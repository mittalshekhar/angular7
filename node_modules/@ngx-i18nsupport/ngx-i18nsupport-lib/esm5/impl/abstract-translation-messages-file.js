/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { STATE_NEW, STATE_TRANSLATED } from '../api/constants';
import { isNullOrUndefined } from 'util';
import { DOMParser } from 'xmldom';
import { XmlSerializer } from './xml-serializer';
/**
 * Created by roobm on 09.05.2017.
 * Abstract superclass for all implementations of ITranslationMessagesFile.
 * @abstract
 */
var /**
 * Created by roobm on 09.05.2017.
 * Abstract superclass for all implementations of ITranslationMessagesFile.
 * @abstract
 */
AbstractTranslationMessagesFile = /** @class */ (function () {
    function AbstractTranslationMessagesFile() {
        this.transUnits = null;
        this._warnings = [];
    }
    /**
     * Parse file content.
     * Sets _parsedDocument, line ending, encoding, etc.
     * @param xmlString xmlString
     * @param path path
     * @param encoding encoding
     * @param optionalMaster optionalMaster
     */
    /**
     * Parse file content.
     * Sets _parsedDocument, line ending, encoding, etc.
     * @param {?} xmlString xmlString
     * @param {?} path path
     * @param {?} encoding encoding
     * @param {?=} optionalMaster optionalMaster
     * @return {?}
     */
    AbstractTranslationMessagesFile.prototype.parseContent = /**
     * Parse file content.
     * Sets _parsedDocument, line ending, encoding, etc.
     * @param {?} xmlString xmlString
     * @param {?} path path
     * @param {?} encoding encoding
     * @param {?=} optionalMaster optionalMaster
     * @return {?}
     */
    function (xmlString, path, encoding, optionalMaster) {
        this._filename = path;
        this._encoding = encoding;
        this._parsedDocument = new DOMParser().parseFromString(xmlString, 'text/xml');
        this._fileEndsWithEOL = xmlString.endsWith('\n');
    };
    /**
     * @return {?}
     */
    AbstractTranslationMessagesFile.prototype.lazyInitializeTransUnits = /**
     * @return {?}
     */
    function () {
        if (isNullOrUndefined(this.transUnits)) {
            this.initializeTransUnits();
            this.countNumbers();
        }
    };
    /**
     * count units after changes of trans units
     * @return {?}
     */
    AbstractTranslationMessagesFile.prototype.countNumbers = /**
     * count units after changes of trans units
     * @return {?}
     */
    function () {
        var _this = this;
        this._numberOfTransUnitsWithMissingId = 0;
        this._numberOfUntranslatedTransUnits = 0;
        this._numberOfReviewedTransUnits = 0;
        this.forEachTransUnit(function (tu) {
            if (isNullOrUndefined(tu.id) || tu.id === '') {
                _this._numberOfTransUnitsWithMissingId++;
            }
            /** @type {?} */
            var state = tu.targetState();
            if (isNullOrUndefined(state) || state === STATE_NEW) {
                _this._numberOfUntranslatedTransUnits++;
            }
            if (state === STATE_TRANSLATED) {
                _this._numberOfReviewedTransUnits++;
            }
        });
    };
    /**
     * @return {?}
     */
    AbstractTranslationMessagesFile.prototype.warnings = /**
     * @return {?}
     */
    function () {
        this.lazyInitializeTransUnits();
        return this._warnings;
    };
    /**
     * Total number of translation units found in the file.
     * @return {?}
     */
    AbstractTranslationMessagesFile.prototype.numberOfTransUnits = /**
     * Total number of translation units found in the file.
     * @return {?}
     */
    function () {
        this.lazyInitializeTransUnits();
        return this.transUnits.length;
    };
    /**
     * Number of translation units without translation found in the file.
     * These units have state 'translated'.
     */
    /**
     * Number of translation units without translation found in the file.
     * These units have state 'translated'.
     * @return {?}
     */
    AbstractTranslationMessagesFile.prototype.numberOfUntranslatedTransUnits = /**
     * Number of translation units without translation found in the file.
     * These units have state 'translated'.
     * @return {?}
     */
    function () {
        this.lazyInitializeTransUnits();
        return this._numberOfUntranslatedTransUnits;
    };
    /**
     * Number of translation units with state 'final'.
     */
    /**
     * Number of translation units with state 'final'.
     * @return {?}
     */
    AbstractTranslationMessagesFile.prototype.numberOfReviewedTransUnits = /**
     * Number of translation units with state 'final'.
     * @return {?}
     */
    function () {
        this.lazyInitializeTransUnits();
        return this._numberOfReviewedTransUnits;
    };
    /**
     * Number of translation units without translation found in the file.
     * These units have state 'translated'.
     * @return {?}
     */
    AbstractTranslationMessagesFile.prototype.numberOfTransUnitsWithMissingId = /**
     * Number of translation units without translation found in the file.
     * These units have state 'translated'.
     * @return {?}
     */
    function () {
        this.lazyInitializeTransUnits();
        return this._numberOfTransUnitsWithMissingId;
    };
    /**
     * Loop over all Translation Units.
     * @param {?} callback callback
     * @return {?}
     */
    AbstractTranslationMessagesFile.prototype.forEachTransUnit = /**
     * Loop over all Translation Units.
     * @param {?} callback callback
     * @return {?}
     */
    function (callback) {
        this.lazyInitializeTransUnits();
        this.transUnits.forEach(function (tu) { return callback(tu); });
    };
    /**
     * Get trans-unit with given id.
     * @param {?} id id
     * @return {?} trans-unit with given id.
     */
    AbstractTranslationMessagesFile.prototype.transUnitWithId = /**
     * Get trans-unit with given id.
     * @param {?} id id
     * @return {?} trans-unit with given id.
     */
    function (id) {
        this.lazyInitializeTransUnits();
        return this.transUnits.find(function (tu) { return tu.id === id; });
    };
    /**
     * Set the praefix used when copying source to target.
     * This is used by importNewTransUnit and createTranslationFileForLang methods.
     * (since 1.8.0)
     * @param {?} targetPraefix targetPraefix
     * @return {?}
     */
    AbstractTranslationMessagesFile.prototype.setNewTransUnitTargetPraefix = /**
     * Set the praefix used when copying source to target.
     * This is used by importNewTransUnit and createTranslationFileForLang methods.
     * (since 1.8.0)
     * @param {?} targetPraefix targetPraefix
     * @return {?}
     */
    function (targetPraefix) {
        this.targetPraefix = targetPraefix;
    };
    /**
     * Get the praefix used when copying source to target.
     * (since 1.8.0)
     * @return the praefix used when copying source to target.
     */
    /**
     * Get the praefix used when copying source to target.
     * (since 1.8.0)
     * @return {?} the praefix used when copying source to target.
     */
    AbstractTranslationMessagesFile.prototype.getNewTransUnitTargetPraefix = /**
     * Get the praefix used when copying source to target.
     * (since 1.8.0)
     * @return {?} the praefix used when copying source to target.
     */
    function () {
        return isNullOrUndefined(this.targetPraefix) ? '' : this.targetPraefix;
    };
    /**
     * Set the suffix used when copying source to target.
     * This is used by importNewTransUnit and createTranslationFileForLang methods.
     * (since 1.8.0)
     * @param {?} targetSuffix targetSuffix
     * @return {?}
     */
    AbstractTranslationMessagesFile.prototype.setNewTransUnitTargetSuffix = /**
     * Set the suffix used when copying source to target.
     * This is used by importNewTransUnit and createTranslationFileForLang methods.
     * (since 1.8.0)
     * @param {?} targetSuffix targetSuffix
     * @return {?}
     */
    function (targetSuffix) {
        this.targetSuffix = targetSuffix;
    };
    /**
     * Get the suffix used when copying source to target.
     * (since 1.8.0)
     * @return the suffix used when copying source to target.
     */
    /**
     * Get the suffix used when copying source to target.
     * (since 1.8.0)
     * @return {?} the suffix used when copying source to target.
     */
    AbstractTranslationMessagesFile.prototype.getNewTransUnitTargetSuffix = /**
     * Get the suffix used when copying source to target.
     * (since 1.8.0)
     * @return {?} the suffix used when copying source to target.
     */
    function () {
        return isNullOrUndefined(this.targetSuffix) ? '' : this.targetSuffix;
    };
    /**
     * Remove the trans-unit with the given id.
     * @param {?} id id
     * @return {?}
     */
    AbstractTranslationMessagesFile.prototype.removeTransUnitWithId = /**
     * Remove the trans-unit with the given id.
     * @param {?} id id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var tuNode = this._parsedDocument.getElementById(id);
        if (tuNode) {
            tuNode.parentNode.removeChild(tuNode);
            this.lazyInitializeTransUnits();
            this.transUnits = this.transUnits.filter(function (tu) { return tu.id !== id; });
            this.countNumbers();
        }
    };
    /**
     * The filename where the data is read from.
     * @return {?}
     */
    AbstractTranslationMessagesFile.prototype.filename = /**
     * The filename where the data is read from.
     * @return {?}
     */
    function () {
        return this._filename;
    };
    /**
     * The encoding if the xml content (UTF-8, ISO-8859-1, ...)
     * @return {?}
     */
    AbstractTranslationMessagesFile.prototype.encoding = /**
     * The encoding if the xml content (UTF-8, ISO-8859-1, ...)
     * @return {?}
     */
    function () {
        return this._encoding;
    };
    /**
     * The xml content to be saved after changes are made.
     * @param {?=} beautifyOutput Flag whether to use pretty-data to format the output.
     * XMLSerializer produces some correct but strangely formatted output, which pretty-data can correct.
     * See issue #64 for details.
     * Default is false.
     * @return {?}
     */
    AbstractTranslationMessagesFile.prototype.editedContent = /**
     * The xml content to be saved after changes are made.
     * @param {?=} beautifyOutput Flag whether to use pretty-data to format the output.
     * XMLSerializer produces some correct but strangely formatted output, which pretty-data can correct.
     * See issue #64 for details.
     * Default is false.
     * @return {?}
     */
    function (beautifyOutput) {
        /** @type {?} */
        var options = {};
        if (beautifyOutput === true) {
            options.beautify = true;
            options.indentString = '  ';
            options.mixedContentElements = this.elementsWithMixedContent();
        }
        /** @type {?} */
        var result = new XmlSerializer().serializeToString(this._parsedDocument, options);
        if (this._fileEndsWithEOL) {
            // add eol if there was eol in original source
            return result + '\n';
        }
        else {
            return result;
        }
    };
    return AbstractTranslationMessagesFile;
}());
/**
 * Created by roobm on 09.05.2017.
 * Abstract superclass for all implementations of ITranslationMessagesFile.
 * @abstract
 */
export { AbstractTranslationMessagesFile };
if (false) {
    /** @type {?} */
    AbstractTranslationMessagesFile.prototype._filename;
    /** @type {?} */
    AbstractTranslationMessagesFile.prototype._encoding;
    /** @type {?} */
    AbstractTranslationMessagesFile.prototype._parsedDocument;
    /** @type {?} */
    AbstractTranslationMessagesFile.prototype._fileEndsWithEOL;
    /** @type {?} */
    AbstractTranslationMessagesFile.prototype.transUnits;
    /** @type {?} */
    AbstractTranslationMessagesFile.prototype._warnings;
    /** @type {?} */
    AbstractTranslationMessagesFile.prototype._numberOfTransUnitsWithMissingId;
    /** @type {?} */
    AbstractTranslationMessagesFile.prototype._numberOfUntranslatedTransUnits;
    /** @type {?} */
    AbstractTranslationMessagesFile.prototype._numberOfReviewedTransUnits;
    /** @type {?} */
    AbstractTranslationMessagesFile.prototype.targetPraefix;
    /** @type {?} */
    AbstractTranslationMessagesFile.prototype.targetSuffix;
    /**
     * @abstract
     * @return {?}
     */
    AbstractTranslationMessagesFile.prototype.i18nFormat = function () { };
    /**
     * @abstract
     * @return {?}
     */
    AbstractTranslationMessagesFile.prototype.fileType = function () { };
    /**
     * return tag names of all elements that have mixed content.
     * These elements will not be beautified.
     * Typical candidates are source and target.
     * @abstract
     * @return {?}
     */
    AbstractTranslationMessagesFile.prototype.elementsWithMixedContent = function () { };
    /**
     * Read all trans units from xml content.
     * Puts the found units into transUnits.
     * Puts warnings for missing ids.
     * @abstract
     * @return {?}
     */
    AbstractTranslationMessagesFile.prototype.initializeTransUnits = function () { };
    /**
     * Get source language.
     * @abstract
     * @return {?} source language.
     */
    AbstractTranslationMessagesFile.prototype.sourceLanguage = function () { };
    /**
     * Get target language.
     * @abstract
     * @return {?} target language.
     */
    AbstractTranslationMessagesFile.prototype.targetLanguage = function () { };
    /**
     * Edit the source language.
     * @abstract
     * @param {?} language language
     * @return {?}
     */
    AbstractTranslationMessagesFile.prototype.setSourceLanguage = function (language) { };
    /**
     * Edit the target language.
     * @abstract
     * @param {?} language language
     * @return {?}
     */
    AbstractTranslationMessagesFile.prototype.setTargetLanguage = function (language) { };
    /**
     * Add a new trans-unit to this file.
     * The trans unit stems from another file.
     * It copies the source content of the tu to the target content too,
     * depending on the values of isDefaultLang and copyContent.
     * So the source can be used as a dummy translation.
     * (used by xliffmerge)
     * @throws an error if trans-unit with same id already is in the file.
     * @abstract
     * @param {?} foreignTransUnit the trans unit to be imported.
     * @param {?} isDefaultLang Flag, wether file contains the default language.
     * Then source and target are just equal.
     * The content will be copied.
     * State will be final.
     * @param {?} copyContent Flag, wether to copy content or leave it empty.
     * Wben true, content will be copied from source.
     * When false, content will be left empty (if it is not the default language).
     * @param {?=} importAfterElement optional (since 1.10) other transunit (part of this file), that should be used as ancestor.
     * Newly imported trans unit is then inserted directly after this element.
     * If not set or not part of this file, new unit will be imported at the end.
     * If explicity set to null, new unit will be imported at the start.
     * @return {?} the newly imported trans unit (since version 1.7.0)
     */
    AbstractTranslationMessagesFile.prototype.importNewTransUnit = function (foreignTransUnit, isDefaultLang, copyContent, importAfterElement) { };
    /**
     * Create a new translation file for this file for a given language.
     * Normally, this is just a copy of the original one.
     * But for XMB the translation file has format 'XTB'.
     * @abstract
     * @param {?} lang Language code
     * @param {?} filename expected filename to store file
     * @param {?} isDefaultLang Flag, wether file contains the default language.
     * Then source and target are just equal.
     * The content will be copied.
     * State will be final.
     * @param {?} copyContent Flag, wether to copy content or leave it empty.
     * Wben true, content will be copied from source.
     * When false, content will be left empty (if it is not the default language).
     * @return {?}
     */
    AbstractTranslationMessagesFile.prototype.createTranslationFileForLang = function (lang, filename, isDefaultLang, copyContent) { };
}

//# sourceMappingURL=data:application/json;base64,