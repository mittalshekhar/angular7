/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Created by roobm on 16.05.2017.
 * Interface for message parser.
 * @record
 */
export function IMessageParser() { }
/**
 * Parse XML to ParsedMessage.
 * \@param xmlElement the xml representation
 * \@param sourceMessage optional original message that will be translated by normalized new one
 * Throws an error if normalized xml is not well formed.
 * @type {?}
 */
IMessageParser.prototype.createNormalizedMessageFromXML;
/**
 * Parse XML string to ParsedMessage.
 * \@param xmlString the xml representation without root element, e.g. this is <ph x></ph> an example.
 * \@param sourceMessage optional original message that will be translated by normalized new one
 * Throws an error if normalized xml is not well formed.
 * @type {?}
 */
IMessageParser.prototype.createNormalizedMessageFromXMLString;
/**
 * Parse normalized string to ParsedMessage.
 * \@param normalizedString normalized string
 * \@param sourceMessage optional original message that will be translated by normalized new one
 * \@return a new parsed message.
 * Throws an error if normalized string is not well formed.
 * @type {?}
 */
IMessageParser.prototype.parseNormalizedString;
/**
 * Parse a string, that is an ICU message, to ParsedMessage.
 * \@param icuMessageString the message, like '{x, plural, =0 {nothing} =1 {one} other {many}}'.
 * \@param sourceMessage optional original message that will be translated by normalized new one
 * \@return a new parsed message.
 * Throws an error if icuMessageString has not the correct syntax.
 * @type {?}
 */
IMessageParser.prototype.parseICUMessage;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaS1tZXNzYWdlLXBhcnNlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtaTE4bnN1cHBvcnQvbmd4LWkxOG5zdXBwb3J0LWxpYi8iLCJzb3VyY2VzIjpbImltcGwvaS1tZXNzYWdlLXBhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJTm9ybWFsaXplZE1lc3NhZ2V9IGZyb20gJy4uL2FwaS9pbmRleCc7XHJcbi8qKlxyXG4gKiBDcmVhdGVkIGJ5IHJvb2JtIG9uIDE2LjA1LjIwMTcuXHJcbiAqIEludGVyZmFjZSBmb3IgbWVzc2FnZSBwYXJzZXIuXHJcbiAqL1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJTWVzc2FnZVBhcnNlciB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJzZSBYTUwgdG8gUGFyc2VkTWVzc2FnZS5cclxuICAgICAqIEBwYXJhbSB4bWxFbGVtZW50IHRoZSB4bWwgcmVwcmVzZW50YXRpb25cclxuICAgICAqIEBwYXJhbSBzb3VyY2VNZXNzYWdlIG9wdGlvbmFsIG9yaWdpbmFsIG1lc3NhZ2UgdGhhdCB3aWxsIGJlIHRyYW5zbGF0ZWQgYnkgbm9ybWFsaXplZCBuZXcgb25lXHJcbiAgICAgKiBUaHJvd3MgYW4gZXJyb3IgaWYgbm9ybWFsaXplZCB4bWwgaXMgbm90IHdlbGwgZm9ybWVkLlxyXG4gICAgICovXHJcbiAgICBjcmVhdGVOb3JtYWxpemVkTWVzc2FnZUZyb21YTUwoeG1sRWxlbWVudDogRWxlbWVudCwgc291cmNlTWVzc2FnZTogSU5vcm1hbGl6ZWRNZXNzYWdlKTogSU5vcm1hbGl6ZWRNZXNzYWdlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFyc2UgWE1MIHN0cmluZyB0byBQYXJzZWRNZXNzYWdlLlxyXG4gICAgICogQHBhcmFtIHhtbFN0cmluZyB0aGUgeG1sIHJlcHJlc2VudGF0aW9uIHdpdGhvdXQgcm9vdCBlbGVtZW50LCBlLmcuIHRoaXMgaXMgPHBoIHg+PC9waD4gYW4gZXhhbXBsZS5cclxuICAgICAqIEBwYXJhbSBzb3VyY2VNZXNzYWdlIG9wdGlvbmFsIG9yaWdpbmFsIG1lc3NhZ2UgdGhhdCB3aWxsIGJlIHRyYW5zbGF0ZWQgYnkgbm9ybWFsaXplZCBuZXcgb25lXHJcbiAgICAgKiBUaHJvd3MgYW4gZXJyb3IgaWYgbm9ybWFsaXplZCB4bWwgaXMgbm90IHdlbGwgZm9ybWVkLlxyXG4gICAgICovXHJcbiAgICBjcmVhdGVOb3JtYWxpemVkTWVzc2FnZUZyb21YTUxTdHJpbmcoeG1sU3RyaW5nOiBzdHJpbmcsIHNvdXJjZU1lc3NhZ2U6IElOb3JtYWxpemVkTWVzc2FnZSk6IElOb3JtYWxpemVkTWVzc2FnZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhcnNlIG5vcm1hbGl6ZWQgc3RyaW5nIHRvIFBhcnNlZE1lc3NhZ2UuXHJcbiAgICAgKiBAcGFyYW0gbm9ybWFsaXplZFN0cmluZyBub3JtYWxpemVkIHN0cmluZ1xyXG4gICAgICogQHBhcmFtIHNvdXJjZU1lc3NhZ2Ugb3B0aW9uYWwgb3JpZ2luYWwgbWVzc2FnZSB0aGF0IHdpbGwgYmUgdHJhbnNsYXRlZCBieSBub3JtYWxpemVkIG5ldyBvbmVcclxuICAgICAqIEByZXR1cm4gYSBuZXcgcGFyc2VkIG1lc3NhZ2UuXHJcbiAgICAgKiBUaHJvd3MgYW4gZXJyb3IgaWYgbm9ybWFsaXplZCBzdHJpbmcgaXMgbm90IHdlbGwgZm9ybWVkLlxyXG4gICAgICovXHJcbiAgICBwYXJzZU5vcm1hbGl6ZWRTdHJpbmcobm9ybWFsaXplZFN0cmluZzogc3RyaW5nLCBzb3VyY2VNZXNzYWdlOiBJTm9ybWFsaXplZE1lc3NhZ2UpOiBJTm9ybWFsaXplZE1lc3NhZ2U7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJzZSBhIHN0cmluZywgdGhhdCBpcyBhbiBJQ1UgbWVzc2FnZSwgdG8gUGFyc2VkTWVzc2FnZS5cclxuICAgICAqIEBwYXJhbSBpY3VNZXNzYWdlU3RyaW5nIHRoZSBtZXNzYWdlLCBsaWtlICd7eCwgcGx1cmFsLCA9MCB7bm90aGluZ30gPTEge29uZX0gb3RoZXIge21hbnl9fScuXHJcbiAgICAgKiBAcGFyYW0gc291cmNlTWVzc2FnZSBvcHRpb25hbCBvcmlnaW5hbCBtZXNzYWdlIHRoYXQgd2lsbCBiZSB0cmFuc2xhdGVkIGJ5IG5vcm1hbGl6ZWQgbmV3IG9uZVxyXG4gICAgICogQHJldHVybiBhIG5ldyBwYXJzZWQgbWVzc2FnZS5cclxuICAgICAqIFRocm93cyBhbiBlcnJvciBpZiBpY3VNZXNzYWdlU3RyaW5nIGhhcyBub3QgdGhlIGNvcnJlY3Qgc3ludGF4LlxyXG4gICAgICovXHJcbiAgICBwYXJzZUlDVU1lc3NhZ2UoaWN1TWVzc2FnZVN0cmluZzogc3RyaW5nLCBzb3VyY2VNZXNzYWdlOiBJTm9ybWFsaXplZE1lc3NhZ2UpOiBJTm9ybWFsaXplZE1lc3NhZ2U7XHJcbn1cclxuIl19