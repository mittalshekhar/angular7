/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ParsedMessagePart, ParsedMessagePartType } from './parsed-message-part';
import { COMMA, CURLY_BRACE_CLOSE, CURLY_BRACE_OPEN, ICUMessageTokenizer, PLURAL, SELECT, TEXT } from './icu-message-tokenizer';
import { ICUMessage } from './icu-message';
import { format } from 'util';
/**
 * Created by martin on 02.06.2017.
 * A message part consisting of an icu message.
 * There can only be one icu message in a parsed message.
 * Syntax of ICU message is '{' <keyname> ',' 'select'|'plural' ',' (<category> '{' text '}')+ '}'
 */
var /**
 * Created by martin on 02.06.2017.
 * A message part consisting of an icu message.
 * There can only be one icu message in a parsed message.
 * Syntax of ICU message is '{' <keyname> ',' 'select'|'plural' ',' (<category> '{' text '}')+ '}'
 */
ParsedMessagePartICUMessage = /** @class */ (function (_super) {
    tslib_1.__extends(ParsedMessagePartICUMessage, _super);
    function ParsedMessagePartICUMessage(icuMessageText, _parser) {
        var _this = _super.call(this, ParsedMessagePartType.ICU_MESSAGE) || this;
        _this._parser = _parser;
        if (icuMessageText) {
            _this.parseICUMessage(icuMessageText);
        }
        return _this;
    }
    /**
     * Test wether text might be an ICU message.
     * Should at least start with something like '{<name>, select, ..' or '{<name>, plural, ...'
     * @param icuMessageText icuMessageText
     * @return wether text might be an ICU message.
     */
    /**
     * Test wether text might be an ICU message.
     * Should at least start with something like '{<name>, select, ..' or '{<name>, plural, ...'
     * @param {?} icuMessageText icuMessageText
     * @return {?} wether text might be an ICU message.
     */
    ParsedMessagePartICUMessage.looksLikeICUMessage = /**
     * Test wether text might be an ICU message.
     * Should at least start with something like '{<name>, select, ..' or '{<name>, plural, ...'
     * @param {?} icuMessageText icuMessageText
     * @return {?} wether text might be an ICU message.
     */
    function (icuMessageText) {
        /** @type {?} */
        var part = new ParsedMessagePartICUMessage(null, null);
        return part.looksLikeICUMessage(icuMessageText);
    };
    /**
     * @param {?=} displayFormat
     * @return {?}
     */
    ParsedMessagePartICUMessage.prototype.asDisplayString = /**
     * @param {?=} displayFormat
     * @return {?}
     */
    function (displayFormat) {
        return '<ICU-Message/>';
    };
    /**
     * return the parsed message.
     * @return {?} parsed message
     */
    ParsedMessagePartICUMessage.prototype.getICUMessage = /**
     * return the parsed message.
     * @return {?} parsed message
     */
    function () {
        return this._message;
    };
    /**
     * Parse the message.
     * @throws an error if the syntax is not ok in any way.
     * @param {?} text message text to parse
     * @return {?}
     */
    ParsedMessagePartICUMessage.prototype.parseICUMessage = /**
     * Parse the message.
     * @throws an error if the syntax is not ok in any way.
     * @param {?} text message text to parse
     * @return {?}
     */
    function (text) {
        // console.log('message ', text);
        // const tokens = new ICUMessageTokenizer().tokenize(text);
        // tokens.forEach((tok) => {
        //     console.log('Token', tok.type, tok.value);
        // });
        this._messageText = text;
        this._tokenizer = new ICUMessageTokenizer();
        this._tokenizer.input(text);
        this.expectNext(CURLY_BRACE_OPEN);
        this.expectNext(TEXT); // varname, not used currently, ng always used VAR_PLURAL or VAR_SELECT
        this.expectNext(COMMA);
        /** @type {?} */
        var token = this._tokenizer.next();
        if (token.type === PLURAL) {
            this._message = new ICUMessage(this._parser, true);
        }
        else if (token.type === SELECT) {
            this._message = new ICUMessage(this._parser, false);
        }
        this.expectNext(COMMA);
        token = this._tokenizer.peek();
        while (token.type !== CURLY_BRACE_CLOSE) {
            /** @type {?} */
            var category = this.expectNext(TEXT).value.trim();
            this.expectNext(CURLY_BRACE_OPEN);
            /** @type {?} */
            var message = this.expectNext(TEXT).value;
            this._message.addCategory(category, this.parseNativeSubMessage(message));
            this.expectNext(CURLY_BRACE_CLOSE);
            token = this._tokenizer.peek();
        }
        this.expectNext(CURLY_BRACE_CLOSE);
        this.expectNext('EOF');
    };
    /**
     * Parse the message to check, wether it might be an ICU message.
     * Should at least start with something like '{<name>, select, ..' or '{<name>, plural, ...'
     * @param {?} text message text to parse
     * @return {?}
     */
    ParsedMessagePartICUMessage.prototype.looksLikeICUMessage = /**
     * Parse the message to check, wether it might be an ICU message.
     * Should at least start with something like '{<name>, select, ..' or '{<name>, plural, ...'
     * @param {?} text message text to parse
     * @return {?}
     */
    function (text) {
        // console.log('message ', text);
        // const tokens = new ICUMessageTokenizer().tokenize(text);
        // tokens.forEach((tok) => {
        //     console.log('Token', tok.type, tok.value);
        // });
        this._tokenizer = new ICUMessageTokenizer();
        this._tokenizer.input(text);
        try {
            this.expectNext(CURLY_BRACE_OPEN);
            this.expectNext(TEXT); // varname, not used currently, ng always used VAR_PLURAL or VAR_SELECT
            this.expectNext(COMMA);
            /** @type {?} */
            var token = this._tokenizer.next();
            if (token.type !== PLURAL && token.type !== SELECT) {
                return false;
            }
            this.expectNext(COMMA);
            return true;
        }
        catch (error) {
            return false;
        }
    };
    /**
     * Read next token and expect, that it is of the given type.
     * @throws error, if next token has wrong type.
     * @param {?} tokentype expected type.
     * @return {?} Token
     */
    ParsedMessagePartICUMessage.prototype.expectNext = /**
     * Read next token and expect, that it is of the given type.
     * @throws error, if next token has wrong type.
     * @param {?} tokentype expected type.
     * @return {?} Token
     */
    function (tokentype) {
        /** @type {?} */
        var token = this._tokenizer.next();
        if (token.type !== tokentype) {
            throw new Error(format('Error parsing ICU Message: expected %s, found %s (%s) (message %s)', tokentype, token.type, token.value, this._messageText));
        }
        return token;
    };
    /**
     * Parse XML text to normalized message.
     * @param {?} message message in format dependent xml syntax.
     * @return {?} normalized message
     */
    ParsedMessagePartICUMessage.prototype.parseNativeSubMessage = /**
     * Parse XML text to normalized message.
     * @param {?} message message in format dependent xml syntax.
     * @return {?} normalized message
     */
    function (message) {
        return this._parser.createNormalizedMessageFromXMLString(message, null);
    };
    return ParsedMessagePartICUMessage;
}(ParsedMessagePart));
/**
 * Created by martin on 02.06.2017.
 * A message part consisting of an icu message.
 * There can only be one icu message in a parsed message.
 * Syntax of ICU message is '{' <keyname> ',' 'select'|'plural' ',' (<category> '{' text '}')+ '}'
 */
export { ParsedMessagePartICUMessage };
if (false) {
    /** @type {?} */
    ParsedMessagePartICUMessage.prototype._message;
    /** @type {?} */
    ParsedMessagePartICUMessage.prototype._messageText;
    /** @type {?} */
    ParsedMessagePartICUMessage.prototype._tokenizer;
    /** @type {?} */
    ParsedMessagePartICUMessage.prototype._parser;
}

//# sourceMappingURL=data:application/json;base64,