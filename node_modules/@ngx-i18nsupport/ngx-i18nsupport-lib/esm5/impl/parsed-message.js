/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { ParsedMessagePartType } from './parsed-message-part';
import { ParsedMessagePartText } from './parsed-message-part-text';
import { ParsedMessagePartPlaceholder } from './parsed-message-part-placeholder';
import { ParsedMessagePartStartTag } from './parsed-message-part-start-tag';
import { ParsedMessagePartEndTag } from './parsed-message-part-end-tag';
import { DOMUtilities } from './dom-utilities';
import { format, isNullOrUndefined } from 'util';
import { ParsedMessagePartICUMessage } from './parsed-message-part-icu-message';
import { ParsedMessagePartICUMessageRef } from './parsed-message-part-icu-message-ref';
import { ParsedMessagePartEmptyTag } from './parsed-message-part-empty-tag';
/**
 * Created by martin on 05.05.2017.
 * A message text read from a translation file.
 * Can contain placeholders, tags, text.
 * This class is a representation independent of the concrete format.
 */
var /**
 * Created by martin on 05.05.2017.
 * A message text read from a translation file.
 * Can contain placeholders, tags, text.
 * This class is a representation independent of the concrete format.
 */
ParsedMessage = /** @class */ (function () {
    function ParsedMessage(parser, sourceMessage) {
        this._parser = parser;
        this.sourceMessage = sourceMessage;
        this._parts = [];
    }
    /**
     * Get the parser (for tests only, not part of API)
     * @return parser
     */
    /**
     * Get the parser (for tests only, not part of API)
     * @return {?} parser
     */
    ParsedMessage.prototype.getParser = /**
     * Get the parser (for tests only, not part of API)
     * @return {?} parser
     */
    function () {
        return this._parser;
    };
    /**
     * Create a new normalized message as a translation of this one.
     * @param normalizedString the translation in normalized form.
     * If the message is an ICUMessage (getICUMessage returns a value), use translateICUMessage instead.
     * @throws an error if normalized string is not well formed.
     * Throws an error too, if this is an ICU message.
     */
    /**
     * Create a new normalized message as a translation of this one.
     * @throws an error if normalized string is not well formed.
     * Throws an error too, if this is an ICU message.
     * @param {?} normalizedString the translation in normalized form.
     * If the message is an ICUMessage (getICUMessage returns a value), use translateICUMessage instead.
     * @return {?}
     */
    ParsedMessage.prototype.translate = /**
     * Create a new normalized message as a translation of this one.
     * @throws an error if normalized string is not well formed.
     * Throws an error too, if this is an ICU message.
     * @param {?} normalizedString the translation in normalized form.
     * If the message is an ICUMessage (getICUMessage returns a value), use translateICUMessage instead.
     * @return {?}
     */
    function (normalizedString) {
        if (isNullOrUndefined(this.getICUMessage())) {
            return this._parser.parseNormalizedString(/** @type {?} */ (normalizedString), this);
        }
        else {
            throw new Error(format('cannot translate ICU message with simple string, use translateICUMessage() instead ("%s", "%s")', normalizedString, this.asNativeString()));
        }
    };
    /**
     * Create a new normalized icu message as a translation of this one.
     * @param icuTranslation the translation, this is the translation of the ICU message,
     * which is not a string, but a collections of the translations of the different categories.
     * The message must be an ICUMessage (getICUMessage returns a value)
     * @throws an error if normalized string is not well formed.
     * Throws an error too, if this is not an ICU message.
     */
    /**
     * Create a new normalized icu message as a translation of this one.
     * @throws an error if normalized string is not well formed.
     * Throws an error too, if this is not an ICU message.
     * @param {?} icuTranslation the translation, this is the translation of the ICU message,
     * which is not a string, but a collections of the translations of the different categories.
     * The message must be an ICUMessage (getICUMessage returns a value)
     * @return {?}
     */
    ParsedMessage.prototype.translateICUMessage = /**
     * Create a new normalized icu message as a translation of this one.
     * @throws an error if normalized string is not well formed.
     * Throws an error too, if this is not an ICU message.
     * @param {?} icuTranslation the translation, this is the translation of the ICU message,
     * which is not a string, but a collections of the translations of the different categories.
     * The message must be an ICUMessage (getICUMessage returns a value)
     * @return {?}
     */
    function (icuTranslation) {
        /** @type {?} */
        var icuMessage = this.getICUMessage();
        if (isNullOrUndefined(icuMessage)) {
            throw new Error(format('this is not an ICU message, use translate() instead ("%s", "%s")', icuTranslation, this.asNativeString()));
        }
        else {
            /** @type {?} */
            var translatedICUMessage = icuMessage.translate(icuTranslation);
            return this._parser.parseICUMessage(translatedICUMessage.asNativeString(), this);
        }
    };
    /**
     * Create a new normalized message from a native xml string as a translation of this one.
     * @param nativeString xml string in the format of the underlying file format.
     * Throws an error if native string is not acceptable.
     */
    /**
     * Create a new normalized message from a native xml string as a translation of this one.
     * @param {?} nativeString xml string in the format of the underlying file format.
     * Throws an error if native string is not acceptable.
     * @return {?}
     */
    ParsedMessage.prototype.translateNativeString = /**
     * Create a new normalized message from a native xml string as a translation of this one.
     * @param {?} nativeString xml string in the format of the underlying file format.
     * Throws an error if native string is not acceptable.
     * @return {?}
     */
    function (nativeString) {
        return this._parser.createNormalizedMessageFromXMLString(nativeString, this);
    };
    /**
     * normalized message as string.
     * @param {?=} displayFormat optional way to determine the exact syntax.
     * Allowed formats are defined as constants NORMALIZATION_FORMAT...
     * @return {?}
     */
    ParsedMessage.prototype.asDisplayString = /**
     * normalized message as string.
     * @param {?=} displayFormat optional way to determine the exact syntax.
     * Allowed formats are defined as constants NORMALIZATION_FORMAT...
     * @return {?}
     */
    function (displayFormat) {
        return this._parts.map(function (part) { return part.asDisplayString(displayFormat); }).join('');
    };
    /**
     * Returns the message content as format dependent native string.
     * Includes all format specific markup like <ph id="INTERPOLATION" ../> ..
     */
    /**
     * Returns the message content as format dependent native string.
     * Includes all format specific markup like <ph id="INTERPOLATION" ../> ..
     * @return {?}
     */
    ParsedMessage.prototype.asNativeString = /**
     * Returns the message content as format dependent native string.
     * Includes all format specific markup like <ph id="INTERPOLATION" ../> ..
     * @return {?}
     */
    function () {
        if (isNullOrUndefined(this.getICUMessage())) {
            return DOMUtilities.getXMLContent(this._xmlRepresentation);
        }
        else {
            return this.getICUMessage().asNativeString();
        }
    };
    /**
     * Validate the message.
     * @return {?} null, if ok, error object otherwise.
     */
    ParsedMessage.prototype.validate = /**
     * Validate the message.
     * @return {?} null, if ok, error object otherwise.
     */
    function () {
        /** @type {?} */
        var hasErrors = false;
        /** @type {?} */
        var errors = {};
        /** @type {?} */
        var e;
        e = this.checkPlaceholderAdded();
        if (!isNullOrUndefined(e)) {
            errors.placeholderAdded = e;
            hasErrors = true;
        }
        e = this.checkICUMessageRefRemoved();
        if (!isNullOrUndefined(e)) {
            errors["icuMessageRefRemoved"] = e;
            hasErrors = true;
        }
        e = this.checkICUMessageRefAdded();
        if (!isNullOrUndefined(e)) {
            errors["icuMessageRefAdded"] = e;
            hasErrors = true;
        }
        return hasErrors ? errors : null;
    };
    /**
     * Validate the message, check for warnings only.
     * A warning shows, that the message is acceptable, but misses something.
     * E.g. if you remove a placeholder or a special tag from the original message, this generates a warning.
     * @return null, if no warning, warnings as error object otherwise.
     */
    /**
     * Validate the message, check for warnings only.
     * A warning shows, that the message is acceptable, but misses something.
     * E.g. if you remove a placeholder or a special tag from the original message, this generates a warning.
     * @return {?} null, if no warning, warnings as error object otherwise.
     */
    ParsedMessage.prototype.validateWarnings = /**
     * Validate the message, check for warnings only.
     * A warning shows, that the message is acceptable, but misses something.
     * E.g. if you remove a placeholder or a special tag from the original message, this generates a warning.
     * @return {?} null, if no warning, warnings as error object otherwise.
     */
    function () {
        /** @type {?} */
        var hasWarnings = false;
        /** @type {?} */
        var warnings = {};
        /** @type {?} */
        var w;
        w = this.checkPlaceholderRemoved();
        if (!isNullOrUndefined(w)) {
            warnings.placeholderRemoved = w;
            hasWarnings = true;
        }
        w = this.checkTagRemoved();
        if (!isNullOrUndefined(w)) {
            warnings.tagRemoved = w;
            hasWarnings = true;
        }
        w = this.checkTagAdded();
        if (!isNullOrUndefined(w)) {
            warnings.tagAdded = w;
            hasWarnings = true;
        }
        return hasWarnings ? warnings : null;
    };
    /**
     * If this message is an ICU message, returns its structure.
     * Otherwise this method returns null.
     * @return {?} ICUMessage or null.
     */
    ParsedMessage.prototype.getICUMessage = /**
     * If this message is an ICU message, returns its structure.
     * Otherwise this method returns null.
     * @return {?} ICUMessage or null.
     */
    function () {
        if (this._parts.length === 1 && this._parts[0].type === ParsedMessagePartType.ICU_MESSAGE) {
            /** @type {?} */
            var icuPart = /** @type {?} */ (this._parts[0]);
            return icuPart.getICUMessage();
        }
        else {
            return null;
        }
    };
    /**
     * Check for added placeholder.
     * @return {?} null or message, if fulfilled.
     */
    ParsedMessage.prototype.checkPlaceholderAdded = /**
     * Check for added placeholder.
     * @return {?} null or message, if fulfilled.
     */
    function () {
        /** @type {?} */
        var e = null;
        /** @type {?} */
        var suspiciousIndexes = [];
        if (this.sourceMessage) {
            /** @type {?} */
            var sourcePlaceholders_1 = this.sourceMessage.allPlaceholders();
            /** @type {?} */
            var myPlaceholders = this.allPlaceholders();
            myPlaceholders.forEach(function (index) {
                if (!sourcePlaceholders_1.has(index)) {
                    suspiciousIndexes.push(index);
                }
            });
        }
        if (suspiciousIndexes.length === 1) {
            e = 'added placeholder ' + suspiciousIndexes[0] + ', which is not in original message';
        }
        else if (suspiciousIndexes.length > 1) {
            /** @type {?} */
            var allSuspiciousIndexes_1 = '';
            /** @type {?} */
            var first_1 = true;
            suspiciousIndexes.forEach(function (index) {
                if (!first_1) {
                    allSuspiciousIndexes_1 = allSuspiciousIndexes_1 + ', ';
                }
                allSuspiciousIndexes_1 = allSuspiciousIndexes_1 + index;
                first_1 = false;
            });
            e = 'added placeholders ' + allSuspiciousIndexes_1 + ', which are not in original message';
        }
        return e;
    };
    /**
     * Check for removed placeholder.
     * @return {?} null or message, if fulfilled.
     */
    ParsedMessage.prototype.checkPlaceholderRemoved = /**
     * Check for removed placeholder.
     * @return {?} null or message, if fulfilled.
     */
    function () {
        /** @type {?} */
        var w = null;
        /** @type {?} */
        var suspiciousIndexes = [];
        if (this.sourceMessage) {
            /** @type {?} */
            var sourcePlaceholders = this.sourceMessage.allPlaceholders();
            /** @type {?} */
            var myPlaceholders_1 = this.allPlaceholders();
            sourcePlaceholders.forEach(function (index) {
                if (!myPlaceholders_1.has(index)) {
                    suspiciousIndexes.push(index);
                }
            });
        }
        if (suspiciousIndexes.length === 1) {
            w = 'removed placeholder ' + suspiciousIndexes[0] + ' from original message';
        }
        else if (suspiciousIndexes.length > 1) {
            /** @type {?} */
            var allSuspiciousIndexes_2 = '';
            /** @type {?} */
            var first_2 = true;
            suspiciousIndexes.forEach(function (index) {
                if (!first_2) {
                    allSuspiciousIndexes_2 = allSuspiciousIndexes_2 + ', ';
                }
                allSuspiciousIndexes_2 = allSuspiciousIndexes_2 + index;
                first_2 = false;
            });
            w = 'removed placeholders ' + allSuspiciousIndexes_2 + ' from original message';
        }
        return w;
    };
    /**
     * Check for added ICU Message Refs.
     * @return {?} null or message, if fulfilled.
     */
    ParsedMessage.prototype.checkICUMessageRefAdded = /**
     * Check for added ICU Message Refs.
     * @return {?} null or message, if fulfilled.
     */
    function () {
        /** @type {?} */
        var e = null;
        /** @type {?} */
        var suspiciousIndexes = [];
        if (this.sourceMessage) {
            /** @type {?} */
            var sourceICURefs_1 = this.sourceMessage.allICUMessageRefs();
            /** @type {?} */
            var myICURefs = this.allICUMessageRefs();
            myICURefs.forEach(function (index) {
                if (!sourceICURefs_1.has(index)) {
                    suspiciousIndexes.push(index);
                }
            });
        }
        if (suspiciousIndexes.length === 1) {
            e = 'added ICU message reference ' + suspiciousIndexes[0] + ', which is not in original message';
        }
        else if (suspiciousIndexes.length > 1) {
            /** @type {?} */
            var allSuspiciousIndexes_3 = '';
            /** @type {?} */
            var first_3 = true;
            suspiciousIndexes.forEach(function (index) {
                if (!first_3) {
                    allSuspiciousIndexes_3 = allSuspiciousIndexes_3 + ', ';
                }
                allSuspiciousIndexes_3 = allSuspiciousIndexes_3 + index;
                first_3 = false;
            });
            e = 'added ICU message references ' + allSuspiciousIndexes_3 + ', which are not in original message';
        }
        return e;
    };
    /**
     * Check for removed ICU Message Refs.
     * @return {?} null or message, if fulfilled.
     */
    ParsedMessage.prototype.checkICUMessageRefRemoved = /**
     * Check for removed ICU Message Refs.
     * @return {?} null or message, if fulfilled.
     */
    function () {
        /** @type {?} */
        var e = null;
        /** @type {?} */
        var suspiciousIndexes = [];
        if (this.sourceMessage) {
            /** @type {?} */
            var sourceICURefs = this.sourceMessage.allICUMessageRefs();
            /** @type {?} */
            var myICURefs_1 = this.allICUMessageRefs();
            sourceICURefs.forEach(function (index) {
                if (!myICURefs_1.has(index)) {
                    suspiciousIndexes.push(index);
                }
            });
        }
        if (suspiciousIndexes.length === 1) {
            e = 'removed ICU message reference ' + suspiciousIndexes[0] + ' from original message';
        }
        else if (suspiciousIndexes.length > 1) {
            /** @type {?} */
            var allSuspiciousIndexes_4 = '';
            /** @type {?} */
            var first_4 = true;
            suspiciousIndexes.forEach(function (index) {
                if (!first_4) {
                    allSuspiciousIndexes_4 = allSuspiciousIndexes_4 + ', ';
                }
                allSuspiciousIndexes_4 = allSuspiciousIndexes_4 + index;
                first_4 = false;
            });
            e = 'removed ICU message references ' + allSuspiciousIndexes_4 + ' from original message';
        }
        return e;
    };
    /**
     * Get all indexes of placeholders used in the message.
     * @return {?}
     */
    ParsedMessage.prototype.allPlaceholders = /**
     * Get all indexes of placeholders used in the message.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var result = new Set();
        this.parts().forEach(function (part) {
            if (part.type === ParsedMessagePartType.PLACEHOLDER) {
                /** @type {?} */
                var index = (/** @type {?} */ (part)).index();
                result.add(index);
            }
        });
        return result;
    };
    /**
     * Return the disp-Attribute of placeholder
     * @param {?} index index of placeholder
     * @return {?} disp or null
     */
    ParsedMessage.prototype.getPlaceholderDisp = /**
     * Return the disp-Attribute of placeholder
     * @param {?} index index of placeholder
     * @return {?} disp or null
     */
    function (index) {
        /** @type {?} */
        var placeHolder = null;
        this.parts().forEach(function (part) {
            if (part.type === ParsedMessagePartType.PLACEHOLDER) {
                /** @type {?} */
                var phPart = /** @type {?} */ (part);
                if (phPart.index() === index) {
                    placeHolder = phPart;
                }
            }
        });
        return placeHolder ? placeHolder.disp() : null;
    };
    /**
     * Get all indexes of ICU message refs used in the message.
     * @return {?}
     */
    ParsedMessage.prototype.allICUMessageRefs = /**
     * Get all indexes of ICU message refs used in the message.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var result = new Set();
        this.parts().forEach(function (part) {
            if (part.type === ParsedMessagePartType.ICU_MESSAGE_REF) {
                /** @type {?} */
                var index = (/** @type {?} */ (part)).index();
                result.add(index);
            }
        });
        return result;
    };
    /**
     * Return the disp-Attribute of icu message ref
     * @param {?} index of ref
     * @return {?} disp or null
     */
    ParsedMessage.prototype.getICUMessageRefDisp = /**
     * Return the disp-Attribute of icu message ref
     * @param {?} index of ref
     * @return {?} disp or null
     */
    function (index) {
        /** @type {?} */
        var icuMessageRefPart = null;
        this.parts().forEach(function (part) {
            if (part.type === ParsedMessagePartType.ICU_MESSAGE_REF) {
                /** @type {?} */
                var refPart = /** @type {?} */ (part);
                if (refPart.index() === index) {
                    icuMessageRefPart = refPart;
                }
            }
        });
        return icuMessageRefPart ? icuMessageRefPart.disp() : null;
    };
    /**
     * Check for added tags.
     * @return {?} null or message, if fulfilled.
     */
    ParsedMessage.prototype.checkTagAdded = /**
     * Check for added tags.
     * @return {?} null or message, if fulfilled.
     */
    function () {
        /** @type {?} */
        var e = null;
        /** @type {?} */
        var suspiciousTags = [];
        if (this.sourceMessage) {
            /** @type {?} */
            var sourceTags_1 = this.sourceMessage.allTags();
            /** @type {?} */
            var myTags = this.allTags();
            myTags.forEach(function (tagName) {
                if (!sourceTags_1.has(tagName)) {
                    suspiciousTags.push(tagName);
                }
            });
        }
        if (suspiciousTags.length === 1) {
            e = 'added tag <' + suspiciousTags[0] + '>, which is not in original message';
        }
        else if (suspiciousTags.length > 1) {
            /** @type {?} */
            var allSuspiciousTags_1 = '';
            /** @type {?} */
            var first_5 = true;
            suspiciousTags.forEach(function (tag) {
                if (!first_5) {
                    allSuspiciousTags_1 = allSuspiciousTags_1 + ', ';
                }
                allSuspiciousTags_1 = allSuspiciousTags_1 + '<' + tag + '>';
                first_5 = false;
            });
            e = 'added tags ' + allSuspiciousTags_1 + ', which are not in original message';
        }
        return e;
    };
    /**
     * Check for removed tags.
     * @return {?} null or message, if fulfilled.
     */
    ParsedMessage.prototype.checkTagRemoved = /**
     * Check for removed tags.
     * @return {?} null or message, if fulfilled.
     */
    function () {
        /** @type {?} */
        var w = null;
        /** @type {?} */
        var suspiciousTags = [];
        if (this.sourceMessage) {
            /** @type {?} */
            var sourceTags = this.sourceMessage.allTags();
            /** @type {?} */
            var myTags_1 = this.allTags();
            sourceTags.forEach(function (tagName) {
                if (!myTags_1.has(tagName)) {
                    suspiciousTags.push(tagName);
                }
            });
        }
        if (suspiciousTags.length === 1) {
            w = 'removed tag <' + suspiciousTags[0] + '> from original message';
        }
        else if (suspiciousTags.length > 1) {
            /** @type {?} */
            var allSuspiciousTags_2 = '';
            /** @type {?} */
            var first_6 = true;
            suspiciousTags.forEach(function (tag) {
                if (!first_6) {
                    allSuspiciousTags_2 = allSuspiciousTags_2 + ', ';
                }
                allSuspiciousTags_2 = allSuspiciousTags_2 + '<' + tag + '>';
                first_6 = false;
            });
            w = 'removed tags ' + allSuspiciousTags_2 + ' from original message';
        }
        return w;
    };
    /**
     * Get all tag names used in the message.
     * @return {?}
     */
    ParsedMessage.prototype.allTags = /**
     * Get all tag names used in the message.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var result = new Set();
        this.parts().forEach(function (part) {
            if (part.type === ParsedMessagePartType.START_TAG || part.type === ParsedMessagePartType.EMPTY_TAG) {
                /** @type {?} */
                var tagName = (/** @type {?} */ (part)).tagName();
                result.add(tagName);
            }
        });
        return result;
    };
    /**
     * @return {?}
     */
    ParsedMessage.prototype.parts = /**
     * @return {?}
     */
    function () {
        return this._parts;
    };
    /**
     * @param {?} xmlRepresentation
     * @return {?}
     */
    ParsedMessage.prototype.setXmlRepresentation = /**
     * @param {?} xmlRepresentation
     * @return {?}
     */
    function (xmlRepresentation) {
        this._xmlRepresentation = xmlRepresentation;
    };
    /**
     * @param {?} text
     * @return {?}
     */
    ParsedMessage.prototype.addText = /**
     * @param {?} text
     * @return {?}
     */
    function (text) {
        this._parts.push(new ParsedMessagePartText(text));
    };
    /**
     * @param {?} index
     * @param {?} disp
     * @return {?}
     */
    ParsedMessage.prototype.addPlaceholder = /**
     * @param {?} index
     * @param {?} disp
     * @return {?}
     */
    function (index, disp) {
        this._parts.push(new ParsedMessagePartPlaceholder(index, disp));
    };
    /**
     * @param {?} tagname
     * @param {?} idcounter
     * @return {?}
     */
    ParsedMessage.prototype.addStartTag = /**
     * @param {?} tagname
     * @param {?} idcounter
     * @return {?}
     */
    function (tagname, idcounter) {
        this._parts.push(new ParsedMessagePartStartTag(tagname, idcounter));
    };
    /**
     * @param {?} tagname
     * @return {?}
     */
    ParsedMessage.prototype.addEndTag = /**
     * @param {?} tagname
     * @return {?}
     */
    function (tagname) {
        /** @type {?} */
        var openTag = this.calculateOpenTagName();
        if (!openTag || openTag !== tagname) {
            // oops, not well formed
            throw new Error(format('unexpected close tag %s (currently open is %s, native xml is "%s")', tagname, openTag, this.asNativeString()));
        }
        this._parts.push(new ParsedMessagePartEndTag(tagname));
    };
    /**
     * @param {?} tagname
     * @param {?} idcounter
     * @return {?}
     */
    ParsedMessage.prototype.addEmptyTag = /**
     * @param {?} tagname
     * @param {?} idcounter
     * @return {?}
     */
    function (tagname, idcounter) {
        this._parts.push(new ParsedMessagePartEmptyTag(tagname, idcounter));
    };
    /**
     * @param {?} index
     * @param {?} disp
     * @return {?}
     */
    ParsedMessage.prototype.addICUMessageRef = /**
     * @param {?} index
     * @param {?} disp
     * @return {?}
     */
    function (index, disp) {
        this._parts.push(new ParsedMessagePartICUMessageRef(index, disp));
    };
    /**
     * @param {?} text
     * @return {?}
     */
    ParsedMessage.prototype.addICUMessage = /**
     * @param {?} text
     * @return {?}
     */
    function (text) {
        this._parts.push(new ParsedMessagePartICUMessage(text, this._parser));
    };
    /**
     * Determine, wether there is an open tag, that is not closed.
     * Returns the latest one or null, if there is no open tag.
     * @return {?}
     */
    ParsedMessage.prototype.calculateOpenTagName = /**
     * Determine, wether there is an open tag, that is not closed.
     * Returns the latest one or null, if there is no open tag.
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var openTags = [];
        this._parts.forEach(function (part) {
            switch (part.type) {
                case ParsedMessagePartType.START_TAG:
                    openTags.push((/** @type {?} */ (part)).tagName());
                    break;
                case ParsedMessagePartType.END_TAG:
                    /** @type {?} */
                    var tagName = (/** @type {?} */ (part)).tagName();
                    if (openTags.length === 0 || openTags[openTags.length - 1] !== tagName) {
                        /** @type {?} */
                        var openTag = (openTags.length === 0) ? 'nothing' : openTags[openTags.length - 1];
                        throw new Error(format('unexpected close tag %s (currently open is %s, native xml is "%s")', tagName, openTag, _this.asNativeString()));
                    }
                    openTags.pop();
            }
        });
        return openTags.length === 0 ? null : openTags[openTags.length - 1];
    };
    return ParsedMessage;
}());
/**
 * Created by martin on 05.05.2017.
 * A message text read from a translation file.
 * Can contain placeholders, tags, text.
 * This class is a representation independent of the concrete format.
 */
export { ParsedMessage };
if (false) {
    /**
     * Parser that created this message (determines the native format).
     * @type {?}
     */
    ParsedMessage.prototype._parser;
    /**
     * The message where this one stems from as translation.
     * Optional, set only for messages created by calling translate.
     * @type {?}
     */
    ParsedMessage.prototype.sourceMessage;
    /**
     * The parts of the message.
     * @type {?}
     */
    ParsedMessage.prototype._parts;
    /**
     * messages xml representation.
     * @type {?}
     */
    ParsedMessage.prototype._xmlRepresentation;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2VkLW1lc3NhZ2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LWkxOG5zdXBwb3J0L25neC1pMThuc3VwcG9ydC1saWIvIiwic291cmNlcyI6WyJpbXBsL3BhcnNlZC1tZXNzYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQW9CLHFCQUFxQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDL0UsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFDakUsT0FBTyxFQUFDLDRCQUE0QixFQUFDLE1BQU0sbUNBQW1DLENBQUM7QUFDL0UsT0FBTyxFQUFDLHlCQUF5QixFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFDMUUsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sK0JBQStCLENBQUM7QUFFdEUsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBRTdDLE9BQU8sRUFBQyxNQUFNLEVBQUUsaUJBQWlCLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFFL0MsT0FBTyxFQUFDLDJCQUEyQixFQUFDLE1BQU0sbUNBQW1DLENBQUM7QUFDOUUsT0FBTyxFQUFDLDhCQUE4QixFQUFDLE1BQU0sdUNBQXVDLENBQUM7QUFFckYsT0FBTyxFQUFDLHlCQUF5QixFQUFDLE1BQU0saUNBQWlDLENBQUM7Ozs7Ozs7QUFPMUU7Ozs7OztBQUFBO0lBdUJJLHVCQUFZLE1BQXNCLEVBQUUsYUFBNEI7UUFDNUQsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFDbkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7S0FDcEI7SUFFRDs7O09BR0c7Ozs7O0lBQ0gsaUNBQVM7Ozs7SUFBVDtRQUNJLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztLQUN2QjtJQUVEOzs7Ozs7T0FNRzs7Ozs7Ozs7O0lBQ0gsaUNBQVM7Ozs7Ozs7O0lBQVQs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LFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDOzt3QkFwaEI1RTtJQXNoQkMsQ0FBQTs7Ozs7OztBQWxnQkQseUJBa2dCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UGFyc2VkTWVzc2FnZVBhcnQsIFBhcnNlZE1lc3NhZ2VQYXJ0VHlwZX0gZnJvbSAnLi9wYXJzZWQtbWVzc2FnZS1wYXJ0JztcclxuaW1wb3J0IHtQYXJzZWRNZXNzYWdlUGFydFRleHR9IGZyb20gJy4vcGFyc2VkLW1lc3NhZ2UtcGFydC10ZXh0JztcclxuaW1wb3J0IHtQYXJzZWRNZXNzYWdlUGFydFBsYWNlaG9sZGVyfSBmcm9tICcuL3BhcnNlZC1tZXNzYWdlLXBhcnQtcGxhY2Vob2xkZXInO1xyXG5pbXBvcnQge1BhcnNlZE1lc3NhZ2VQYXJ0U3RhcnRUYWd9IGZyb20gJy4vcGFyc2VkLW1lc3NhZ2UtcGFydC1zdGFydC10YWcnO1xyXG5pbXBvcnQge1BhcnNlZE1lc3NhZ2VQYXJ0RW5kVGFnfSBmcm9tICcuL3BhcnNlZC1tZXNzYWdlLXBhcnQtZW5kLXRhZyc7XHJcbmltcG9ydCB7SU5vcm1hbGl6ZWRNZXNzYWdlLCBWYWxpZGF0aW9uRXJyb3JzfSBmcm9tICcuLi9hcGkvaS1ub3JtYWxpemVkLW1lc3NhZ2UnO1xyXG5pbXBvcnQge0RPTVV0aWxpdGllc30gZnJvbSAnLi9kb20tdXRpbGl0aWVzJztcclxuaW1wb3J0IHtJTWVzc2FnZVBhcnNlcn0gZnJvbSAnLi9pLW1lc3NhZ2UtcGFyc2VyJztcclxuaW1wb3J0IHtmb3JtYXQsIGlzTnVsbE9yVW5kZWZpbmVkfSBmcm9tICd1dGlsJztcclxuaW1wb3J0IHtJSUNVTWVzc2FnZSwgSUlDVU1lc3NhZ2VUcmFuc2xhdGlvbn0gZnJvbSAnLi4vYXBpL2ktaWN1LW1lc3NhZ2UnO1xyXG5pbXBvcnQge1BhcnNlZE1lc3NhZ2VQYXJ0SUNVTWVzc2FnZX0gZnJvbSAnLi9wYXJzZWQtbWVzc2FnZS1wYXJ0LWljdS1tZXNzYWdlJztcclxuaW1wb3J0IHtQYXJzZWRNZXNzYWdlUGFydElDVU1lc3NhZ2VSZWZ9IGZyb20gJy4vcGFyc2VkLW1lc3NhZ2UtcGFydC1pY3UtbWVzc2FnZS1yZWYnO1xyXG5pbXBvcnQge0lDVU1lc3NhZ2V9IGZyb20gJy4vaWN1LW1lc3NhZ2UnO1xyXG5pbXBvcnQge1BhcnNlZE1lc3NhZ2VQYXJ0RW1wdHlUYWd9IGZyb20gJy4vcGFyc2VkLW1lc3NhZ2UtcGFydC1lbXB0eS10YWcnO1xyXG4vKipcclxuICogQ3JlYXRlZCBieSBtYXJ0aW4gb24gMDUuMDUuMjAxNy5cclxuICogQSBtZXNzYWdlIHRleHQgcmVhZCBmcm9tIGEgdHJhbnNsYXRpb24gZmlsZS5cclxuICogQ2FuIGNvbnRhaW4gcGxhY2Vob2xkZXJzLCB0YWdzLCB0ZXh0LlxyXG4gKiBUaGlzIGNsYXNzIGlzIGEgcmVwcmVzZW50YXRpb24gaW5kZXBlbmRlbnQgb2YgdGhlIGNvbmNyZXRlIGZvcm1hdC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBQYXJzZWRNZXNzYWdlIGltcGxlbWVudHMgSU5vcm1hbGl6ZWRNZXNzYWdlIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhcnNlciB0aGF0IGNyZWF0ZWQgdGhpcyBtZXNzYWdlIChkZXRlcm1pbmVzIHRoZSBuYXRpdmUgZm9ybWF0KS5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfcGFyc2VyOiBJTWVzc2FnZVBhcnNlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtZXNzYWdlIHdoZXJlIHRoaXMgb25lIHN0ZW1zIGZyb20gYXMgdHJhbnNsYXRpb24uXHJcbiAgICAgKiBPcHRpb25hbCwgc2V0IG9ubHkgZm9yIG1lc3NhZ2VzIGNyZWF0ZWQgYnkgY2FsbGluZyB0cmFuc2xhdGUuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc291cmNlTWVzc2FnZTogUGFyc2VkTWVzc2FnZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBwYXJ0cyBvZiB0aGUgbWVzc2FnZS5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfcGFydHM6IFBhcnNlZE1lc3NhZ2VQYXJ0W107XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBtZXNzYWdlcyB4bWwgcmVwcmVzZW50YXRpb24uXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX3htbFJlcHJlc2VudGF0aW9uOiBFbGVtZW50O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHBhcnNlcjogSU1lc3NhZ2VQYXJzZXIsIHNvdXJjZU1lc3NhZ2U6IFBhcnNlZE1lc3NhZ2UpIHtcclxuICAgICAgICB0aGlzLl9wYXJzZXIgPSBwYXJzZXI7XHJcbiAgICAgICAgdGhpcy5zb3VyY2VNZXNzYWdlID0gc291cmNlTWVzc2FnZTtcclxuICAgICAgICB0aGlzLl9wYXJ0cyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBwYXJzZXIgKGZvciB0ZXN0cyBvbmx5LCBub3QgcGFydCBvZiBBUEkpXHJcbiAgICAgKiBAcmV0dXJuIHBhcnNlclxyXG4gICAgICovXHJcbiAgICBnZXRQYXJzZXIoKTogSU1lc3NhZ2VQYXJzZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJzZXI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYSBuZXcgbm9ybWFsaXplZCBtZXNzYWdlIGFzIGEgdHJhbnNsYXRpb24gb2YgdGhpcyBvbmUuXHJcbiAgICAgKiBAcGFyYW0gbm9ybWFsaXplZFN0cmluZyB0aGUgdHJhbnNsYXRpb24gaW4gbm9ybWFsaXplZCBmb3JtLlxyXG4gICAgICogSWYgdGhlIG1lc3NhZ2UgaXMgYW4gSUNVTWVzc2FnZSAoZ2V0SUNVTWVzc2FnZSByZXR1cm5zIGEgdmFsdWUpLCB1c2UgdHJhbnNsYXRlSUNVTWVzc2FnZSBpbnN0ZWFkLlxyXG4gICAgICogQHRocm93cyBhbiBlcnJvciBpZiBub3JtYWxpemVkIHN0cmluZyBpcyBub3Qgd2VsbCBmb3JtZWQuXHJcbiAgICAgKiBUaHJvd3MgYW4gZXJyb3IgdG9vLCBpZiB0aGlzIGlzIGFuIElDVSBtZXNzYWdlLlxyXG4gICAgICovXHJcbiAgICB0cmFuc2xhdGUobm9ybWFsaXplZFN0cmluZzogc3RyaW5nKTogSU5vcm1hbGl6ZWRNZXNzYWdlIHtcclxuICAgICAgICBpZiAoaXNOdWxsT3JVbmRlZmluZWQodGhpcy5nZXRJQ1VNZXNzYWdlKCkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wYXJzZXIucGFyc2VOb3JtYWxpemVkU3RyaW5nKDxzdHJpbmc+IG5vcm1hbGl6ZWRTdHJpbmcsIHRoaXMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXQoJ2Nhbm5vdCB0cmFuc2xhdGUgSUNVIG1lc3NhZ2Ugd2l0aCBzaW1wbGUgc3RyaW5nLCB1c2UgdHJhbnNsYXRlSUNVTWVzc2FnZSgpIGluc3RlYWQgKFwiJXNcIiwgXCIlc1wiKScsXHJcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkU3RyaW5nLCB0aGlzLmFzTmF0aXZlU3RyaW5nKCkpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYSBuZXcgbm9ybWFsaXplZCBpY3UgbWVzc2FnZSBhcyBhIHRyYW5zbGF0aW9uIG9mIHRoaXMgb25lLlxyXG4gICAgICogQHBhcmFtIGljdVRyYW5zbGF0aW9uIHRoZSB0cmFuc2xhdGlvbiwgdGhpcyBpcyB0aGUgdHJhbnNsYXRpb24gb2YgdGhlIElDVSBtZXNzYWdlLFxyXG4gICAgICogd2hpY2ggaXMgbm90IGEgc3RyaW5nLCBidXQgYSBjb2xsZWN0aW9ucyBvZiB0aGUgdHJhbnNsYXRpb25zIG9mIHRoZSBkaWZmZXJlbnQgY2F0ZWdvcmllcy5cclxuICAgICAqIFRoZSBtZXNzYWdlIG11c3QgYmUgYW4gSUNVTWVzc2FnZSAoZ2V0SUNVTWVzc2FnZSByZXR1cm5zIGEgdmFsdWUpXHJcbiAgICAgKiBAdGhyb3dzIGFuIGVycm9yIGlmIG5vcm1hbGl6ZWQgc3RyaW5nIGlzIG5vdCB3ZWxsIGZvcm1lZC5cclxuICAgICAqIFRocm93cyBhbiBlcnJvciB0b28sIGlmIHRoaXMgaXMgbm90IGFuIElDVSBtZXNzYWdlLlxyXG4gICAgICovXHJcbiAgICB0cmFuc2xhdGVJQ1VNZXNzYWdlKGljdVRyYW5zbGF0aW9uOiBJSUNVTWVzc2FnZVRyYW5zbGF0aW9uKTogSU5vcm1hbGl6ZWRNZXNzYWdlIHtcclxuICAgICAgICBjb25zdCBpY3VNZXNzYWdlOiBJSUNVTWVzc2FnZSA9IHRoaXMuZ2V0SUNVTWVzc2FnZSgpO1xyXG4gICAgICAgIGlmIChpc051bGxPclVuZGVmaW5lZChpY3VNZXNzYWdlKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KCd0aGlzIGlzIG5vdCBhbiBJQ1UgbWVzc2FnZSwgdXNlIHRyYW5zbGF0ZSgpIGluc3RlYWQgKFwiJXNcIiwgXCIlc1wiKScsXHJcbiAgICAgICAgICAgICAgICBpY3VUcmFuc2xhdGlvbiwgIHRoaXMuYXNOYXRpdmVTdHJpbmcoKSkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zbGF0ZWRJQ1VNZXNzYWdlOiBJSUNVTWVzc2FnZSA9IGljdU1lc3NhZ2UudHJhbnNsYXRlKGljdVRyYW5zbGF0aW9uKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnNlci5wYXJzZUlDVU1lc3NhZ2UodHJhbnNsYXRlZElDVU1lc3NhZ2UuYXNOYXRpdmVTdHJpbmcoKSwgdGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIGEgbmV3IG5vcm1hbGl6ZWQgbWVzc2FnZSBmcm9tIGEgbmF0aXZlIHhtbCBzdHJpbmcgYXMgYSB0cmFuc2xhdGlvbiBvZiB0aGlzIG9uZS5cclxuICAgICAqIEBwYXJhbSBuYXRpdmVTdHJpbmcgeG1sIHN0cmluZyBpbiB0aGUgZm9ybWF0IG9mIHRoZSB1bmRlcmx5aW5nIGZpbGUgZm9ybWF0LlxyXG4gICAgICogVGhyb3dzIGFuIGVycm9yIGlmIG5hdGl2ZSBzdHJpbmcgaXMgbm90IGFjY2VwdGFibGUuXHJcbiAgICAgKi9cclxuICAgIHRyYW5zbGF0ZU5hdGl2ZVN0cmluZyhuYXRpdmVTdHJpbmc6IHN0cmluZyk6IElOb3JtYWxpemVkTWVzc2FnZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnNlci5jcmVhdGVOb3JtYWxpemVkTWVzc2FnZUZyb21YTUxTdHJpbmcobmF0aXZlU3RyaW5nLCB0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIG5vcm1hbGl6ZWQgbWVzc2FnZSBhcyBzdHJpbmcuXHJcbiAgICAgKiBAcGFyYW0gZGlzcGxheUZvcm1hdCBvcHRpb25hbCB3YXkgdG8gZGV0ZXJtaW5lIHRoZSBleGFjdCBzeW50YXguXHJcbiAgICAgKiBBbGxvd2VkIGZvcm1hdHMgYXJlIGRlZmluZWQgYXMgY29uc3RhbnRzIE5PUk1BTElaQVRJT05fRk9STUFULi4uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhc0Rpc3BsYXlTdHJpbmcoZGlzcGxheUZvcm1hdD86IHN0cmluZykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJ0cy5tYXAoKHBhcnQpID0+IHBhcnQuYXNEaXNwbGF5U3RyaW5nKGRpc3BsYXlGb3JtYXQpKS5qb2luKCcnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIG1lc3NhZ2UgY29udGVudCBhcyBmb3JtYXQgZGVwZW5kZW50IG5hdGl2ZSBzdHJpbmcuXHJcbiAgICAgKiBJbmNsdWRlcyBhbGwgZm9ybWF0IHNwZWNpZmljIG1hcmt1cCBsaWtlIDxwaCBpZD1cIklOVEVSUE9MQVRJT05cIiAuLi8+IC4uXHJcbiAgICAgKi9cclxuICAgIGFzTmF0aXZlU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKGlzTnVsbE9yVW5kZWZpbmVkKHRoaXMuZ2V0SUNVTWVzc2FnZSgpKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gRE9NVXRpbGl0aWVzLmdldFhNTENvbnRlbnQodGhpcy5feG1sUmVwcmVzZW50YXRpb24pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldElDVU1lc3NhZ2UoKS5hc05hdGl2ZVN0cmluZygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFZhbGlkYXRlIHRoZSBtZXNzYWdlLlxyXG4gICAgICogQHJldHVybiBudWxsLCBpZiBvaywgZXJyb3Igb2JqZWN0IG90aGVyd2lzZS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHZhbGlkYXRlKCk6IFZhbGlkYXRpb25FcnJvcnMgfCBudWxsIHtcclxuICAgICAgICBsZXQgaGFzRXJyb3JzID0gZmFsc2U7XHJcbiAgICAgICAgY29uc3QgZXJyb3JzOiBWYWxpZGF0aW9uRXJyb3JzID0ge307XHJcbiAgICAgICAgbGV0IGU7XHJcbiAgICAgICAgZSA9IHRoaXMuY2hlY2tQbGFjZWhvbGRlckFkZGVkKCk7XHJcbiAgICAgICAgaWYgKCFpc051bGxPclVuZGVmaW5lZChlKSkge1xyXG4gICAgICAgICAgICBlcnJvcnMucGxhY2Vob2xkZXJBZGRlZCA9IGU7XHJcbiAgICAgICAgICAgIGhhc0Vycm9ycyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGUgPSB0aGlzLmNoZWNrSUNVTWVzc2FnZVJlZlJlbW92ZWQoKTtcclxuICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWZpbmVkKGUpKSB7XHJcbiAgICAgICAgICAgIGVycm9ycy5pY3VNZXNzYWdlUmVmUmVtb3ZlZCA9IGU7XHJcbiAgICAgICAgICAgIGhhc0Vycm9ycyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGUgPSB0aGlzLmNoZWNrSUNVTWVzc2FnZVJlZkFkZGVkKCk7XHJcbiAgICAgICAgaWYgKCFpc051bGxPclVuZGVmaW5lZChlKSkge1xyXG4gICAgICAgICAgICBlcnJvcnMuaWN1TWVzc2FnZVJlZkFkZGVkID0gZTtcclxuICAgICAgICAgICAgaGFzRXJyb3JzID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGhhc0Vycm9ycyA/IGVycm9ycyA6IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBWYWxpZGF0ZSB0aGUgbWVzc2FnZSwgY2hlY2sgZm9yIHdhcm5pbmdzIG9ubHkuXHJcbiAgICAgKiBBIHdhcm5pbmcgc2hvd3MsIHRoYXQgdGhlIG1lc3NhZ2UgaXMgYWNjZXB0YWJsZSwgYnV0IG1pc3NlcyBzb21ldGhpbmcuXHJcbiAgICAgKiBFLmcuIGlmIHlvdSByZW1vdmUgYSBwbGFjZWhvbGRlciBvciBhIHNwZWNpYWwgdGFnIGZyb20gdGhlIG9yaWdpbmFsIG1lc3NhZ2UsIHRoaXMgZ2VuZXJhdGVzIGEgd2FybmluZy5cclxuICAgICAqIEByZXR1cm4gbnVsbCwgaWYgbm8gd2FybmluZywgd2FybmluZ3MgYXMgZXJyb3Igb2JqZWN0IG90aGVyd2lzZS5cclxuICAgICAqL1xyXG4gICAgdmFsaWRhdGVXYXJuaW5ncygpOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCB7XHJcbiAgICAgICAgbGV0IGhhc1dhcm5pbmdzID0gZmFsc2U7XHJcbiAgICAgICAgY29uc3Qgd2FybmluZ3M6IFZhbGlkYXRpb25FcnJvcnMgPSB7fTtcclxuICAgICAgICBsZXQgdztcclxuICAgICAgICB3ID0gdGhpcy5jaGVja1BsYWNlaG9sZGVyUmVtb3ZlZCgpO1xyXG4gICAgICAgIGlmICghaXNOdWxsT3JVbmRlZmluZWQodykpIHtcclxuICAgICAgICAgICAgd2FybmluZ3MucGxhY2Vob2xkZXJSZW1vdmVkID0gdztcclxuICAgICAgICAgICAgaGFzV2FybmluZ3MgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3ID0gdGhpcy5jaGVja1RhZ1JlbW92ZWQoKTtcclxuICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWZpbmVkKHcpKSB7XHJcbiAgICAgICAgICAgIHdhcm5pbmdzLnRhZ1JlbW92ZWQgPSB3O1xyXG4gICAgICAgICAgICBoYXNXYXJuaW5ncyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHcgPSB0aGlzLmNoZWNrVGFnQWRkZWQoKTtcclxuICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWZpbmVkKHcpKSB7XHJcbiAgICAgICAgICAgIHdhcm5pbmdzLnRhZ0FkZGVkID0gdztcclxuICAgICAgICAgICAgaGFzV2FybmluZ3MgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaGFzV2FybmluZ3MgPyB3YXJuaW5ncyA6IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJZiB0aGlzIG1lc3NhZ2UgaXMgYW4gSUNVIG1lc3NhZ2UsIHJldHVybnMgaXRzIHN0cnVjdHVyZS5cclxuICAgICAqIE90aGVyd2lzZSB0aGlzIG1ldGhvZCByZXR1cm5zIG51bGwuXHJcbiAgICAgKiBAcmV0dXJuIElDVU1lc3NhZ2Ugb3IgbnVsbC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldElDVU1lc3NhZ2UoKTogSUlDVU1lc3NhZ2Uge1xyXG4gICAgICAgIGlmICh0aGlzLl9wYXJ0cy5sZW5ndGggPT09IDEgJiYgdGhpcy5fcGFydHNbMF0udHlwZSA9PT0gUGFyc2VkTWVzc2FnZVBhcnRUeXBlLklDVV9NRVNTQUdFKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGljdVBhcnQgPSA8UGFyc2VkTWVzc2FnZVBhcnRJQ1VNZXNzYWdlPiB0aGlzLl9wYXJ0c1swXTtcclxuICAgICAgICAgICAgcmV0dXJuIGljdVBhcnQuZ2V0SUNVTWVzc2FnZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVjayBmb3IgYWRkZWQgcGxhY2Vob2xkZXIuXHJcbiAgICAgKiBAcmV0dXJuIG51bGwgb3IgbWVzc2FnZSwgaWYgZnVsZmlsbGVkLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNoZWNrUGxhY2Vob2xkZXJBZGRlZCgpOiBhbnkge1xyXG4gICAgICAgIGxldCBlID0gbnVsbDtcclxuICAgICAgICBjb25zdCBzdXNwaWNpb3VzSW5kZXhlcyA9IFtdO1xyXG4gICAgICAgIGlmICh0aGlzLnNvdXJjZU1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgY29uc3Qgc291cmNlUGxhY2Vob2xkZXJzID0gdGhpcy5zb3VyY2VNZXNzYWdlLmFsbFBsYWNlaG9sZGVycygpO1xyXG4gICAgICAgICAgICBjb25zdCBteVBsYWNlaG9sZGVycyA9IHRoaXMuYWxsUGxhY2Vob2xkZXJzKCk7XHJcbiAgICAgICAgICAgIG15UGxhY2Vob2xkZXJzLmZvckVhY2goKGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXNvdXJjZVBsYWNlaG9sZGVycy5oYXMoaW5kZXgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3VzcGljaW91c0luZGV4ZXMucHVzaChpbmRleCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc3VzcGljaW91c0luZGV4ZXMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIGUgPSAnYWRkZWQgcGxhY2Vob2xkZXIgJyArIHN1c3BpY2lvdXNJbmRleGVzWzBdICsgJywgd2hpY2ggaXMgbm90IGluIG9yaWdpbmFsIG1lc3NhZ2UnO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoc3VzcGljaW91c0luZGV4ZXMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICBsZXQgYWxsU3VzcGljaW91c0luZGV4ZXMgPSAnJztcclxuICAgICAgICAgICAgbGV0IGZpcnN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgc3VzcGljaW91c0luZGV4ZXMuZm9yRWFjaCgoaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghZmlyc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbGxTdXNwaWNpb3VzSW5kZXhlcyA9IGFsbFN1c3BpY2lvdXNJbmRleGVzICsgJywgJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGFsbFN1c3BpY2lvdXNJbmRleGVzID0gYWxsU3VzcGljaW91c0luZGV4ZXMgKyBpbmRleDtcclxuICAgICAgICAgICAgICAgIGZpcnN0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBlID0gJ2FkZGVkIHBsYWNlaG9sZGVycyAnICsgYWxsU3VzcGljaW91c0luZGV4ZXMgKyAnLCB3aGljaCBhcmUgbm90IGluIG9yaWdpbmFsIG1lc3NhZ2UnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGZvciByZW1vdmVkIHBsYWNlaG9sZGVyLlxyXG4gICAgICogQHJldHVybiBudWxsIG9yIG1lc3NhZ2UsIGlmIGZ1bGZpbGxlZC5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjaGVja1BsYWNlaG9sZGVyUmVtb3ZlZCgpOiBhbnkge1xyXG4gICAgICAgIGxldCB3ID0gbnVsbDtcclxuICAgICAgICBjb25zdCBzdXNwaWNpb3VzSW5kZXhlcyA9IFtdO1xyXG4gICAgICAgIGlmICh0aGlzLnNvdXJjZU1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgY29uc3Qgc291cmNlUGxhY2Vob2xkZXJzID0gdGhpcy5zb3VyY2VNZXNzYWdlLmFsbFBsYWNlaG9sZGVycygpO1xyXG4gICAgICAgICAgICBjb25zdCBteVBsYWNlaG9sZGVycyA9IHRoaXMuYWxsUGxhY2Vob2xkZXJzKCk7XHJcbiAgICAgICAgICAgIHNvdXJjZVBsYWNlaG9sZGVycy5mb3JFYWNoKChpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFteVBsYWNlaG9sZGVycy5oYXMoaW5kZXgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3VzcGljaW91c0luZGV4ZXMucHVzaChpbmRleCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc3VzcGljaW91c0luZGV4ZXMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIHcgPSAncmVtb3ZlZCBwbGFjZWhvbGRlciAnICsgc3VzcGljaW91c0luZGV4ZXNbMF0gKyAnIGZyb20gb3JpZ2luYWwgbWVzc2FnZSc7XHJcbiAgICAgICAgfSBlbHNlIGlmIChzdXNwaWNpb3VzSW5kZXhlcy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgIGxldCBhbGxTdXNwaWNpb3VzSW5kZXhlcyA9ICcnO1xyXG4gICAgICAgICAgICBsZXQgZmlyc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICBzdXNwaWNpb3VzSW5kZXhlcy5mb3JFYWNoKChpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFmaXJzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsbFN1c3BpY2lvdXNJbmRleGVzID0gYWxsU3VzcGljaW91c0luZGV4ZXMgKyAnLCAnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYWxsU3VzcGljaW91c0luZGV4ZXMgPSBhbGxTdXNwaWNpb3VzSW5kZXhlcyArIGluZGV4O1xyXG4gICAgICAgICAgICAgICAgZmlyc3QgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHcgPSAncmVtb3ZlZCBwbGFjZWhvbGRlcnMgJyArIGFsbFN1c3BpY2lvdXNJbmRleGVzICsgJyBmcm9tIG9yaWdpbmFsIG1lc3NhZ2UnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGZvciBhZGRlZCBJQ1UgTWVzc2FnZSBSZWZzLlxyXG4gICAgICogQHJldHVybiBudWxsIG9yIG1lc3NhZ2UsIGlmIGZ1bGZpbGxlZC5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjaGVja0lDVU1lc3NhZ2VSZWZBZGRlZCgpOiBhbnkge1xyXG4gICAgICAgIGxldCBlID0gbnVsbDtcclxuICAgICAgICBjb25zdCBzdXNwaWNpb3VzSW5kZXhlcyA9IFtdO1xyXG4gICAgICAgIGlmICh0aGlzLnNvdXJjZU1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgY29uc3Qgc291cmNlSUNVUmVmcyA9IHRoaXMuc291cmNlTWVzc2FnZS5hbGxJQ1VNZXNzYWdlUmVmcygpO1xyXG4gICAgICAgICAgICBjb25zdCBteUlDVVJlZnMgPSB0aGlzLmFsbElDVU1lc3NhZ2VSZWZzKCk7XHJcbiAgICAgICAgICAgIG15SUNVUmVmcy5mb3JFYWNoKChpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFzb3VyY2VJQ1VSZWZzLmhhcyhpbmRleCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdXNwaWNpb3VzSW5kZXhlcy5wdXNoKGluZGV4KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzdXNwaWNpb3VzSW5kZXhlcy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgZSA9ICdhZGRlZCBJQ1UgbWVzc2FnZSByZWZlcmVuY2UgJyArIHN1c3BpY2lvdXNJbmRleGVzWzBdICsgJywgd2hpY2ggaXMgbm90IGluIG9yaWdpbmFsIG1lc3NhZ2UnO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoc3VzcGljaW91c0luZGV4ZXMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICBsZXQgYWxsU3VzcGljaW91c0luZGV4ZXMgPSAnJztcclxuICAgICAgICAgICAgbGV0IGZpcnN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgc3VzcGljaW91c0luZGV4ZXMuZm9yRWFjaCgoaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghZmlyc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbGxTdXNwaWNpb3VzSW5kZXhlcyA9IGFsbFN1c3BpY2lvdXNJbmRleGVzICsgJywgJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGFsbFN1c3BpY2lvdXNJbmRleGVzID0gYWxsU3VzcGljaW91c0luZGV4ZXMgKyBpbmRleDtcclxuICAgICAgICAgICAgICAgIGZpcnN0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBlID0gJ2FkZGVkIElDVSBtZXNzYWdlIHJlZmVyZW5jZXMgJyArIGFsbFN1c3BpY2lvdXNJbmRleGVzICsgJywgd2hpY2ggYXJlIG5vdCBpbiBvcmlnaW5hbCBtZXNzYWdlJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVjayBmb3IgcmVtb3ZlZCBJQ1UgTWVzc2FnZSBSZWZzLlxyXG4gICAgICogQHJldHVybiBudWxsIG9yIG1lc3NhZ2UsIGlmIGZ1bGZpbGxlZC5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjaGVja0lDVU1lc3NhZ2VSZWZSZW1vdmVkKCk6IGFueSB7XHJcbiAgICAgICAgbGV0IGUgPSBudWxsO1xyXG4gICAgICAgIGNvbnN0IHN1c3BpY2lvdXNJbmRleGVzID0gW107XHJcbiAgICAgICAgaWYgKHRoaXMuc291cmNlTWVzc2FnZSkge1xyXG4gICAgICAgICAgICBjb25zdCBzb3VyY2VJQ1VSZWZzID0gdGhpcy5zb3VyY2VNZXNzYWdlLmFsbElDVU1lc3NhZ2VSZWZzKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG15SUNVUmVmcyA9IHRoaXMuYWxsSUNVTWVzc2FnZVJlZnMoKTtcclxuICAgICAgICAgICAgc291cmNlSUNVUmVmcy5mb3JFYWNoKChpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFteUlDVVJlZnMuaGFzKGluZGV4KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN1c3BpY2lvdXNJbmRleGVzLnB1c2goaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHN1c3BpY2lvdXNJbmRleGVzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICBlID0gJ3JlbW92ZWQgSUNVIG1lc3NhZ2UgcmVmZXJlbmNlICcgKyBzdXNwaWNpb3VzSW5kZXhlc1swXSArICcgZnJvbSBvcmlnaW5hbCBtZXNzYWdlJztcclxuICAgICAgICB9IGVsc2UgaWYgKHN1c3BpY2lvdXNJbmRleGVzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgbGV0IGFsbFN1c3BpY2lvdXNJbmRleGVzID0gJyc7XHJcbiAgICAgICAgICAgIGxldCBmaXJzdCA9IHRydWU7XHJcbiAgICAgICAgICAgIHN1c3BpY2lvdXNJbmRleGVzLmZvckVhY2goKGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWZpcnN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxsU3VzcGljaW91c0luZGV4ZXMgPSBhbGxTdXNwaWNpb3VzSW5kZXhlcyArICcsICc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBhbGxTdXNwaWNpb3VzSW5kZXhlcyA9IGFsbFN1c3BpY2lvdXNJbmRleGVzICsgaW5kZXg7XHJcbiAgICAgICAgICAgICAgICBmaXJzdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZSA9ICdyZW1vdmVkIElDVSBtZXNzYWdlIHJlZmVyZW5jZXMgJyArIGFsbFN1c3BpY2lvdXNJbmRleGVzICsgJyBmcm9tIG9yaWdpbmFsIG1lc3NhZ2UnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCBhbGwgaW5kZXhlcyBvZiBwbGFjZWhvbGRlcnMgdXNlZCBpbiB0aGUgbWVzc2FnZS5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBhbGxQbGFjZWhvbGRlcnMoKTogU2V0PG51bWJlcj4ge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBTZXQ8bnVtYmVyPigpO1xyXG4gICAgICAgIHRoaXMucGFydHMoKS5mb3JFYWNoKChwYXJ0KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChwYXJ0LnR5cGUgPT09IFBhcnNlZE1lc3NhZ2VQYXJ0VHlwZS5QTEFDRUhPTERFUikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSAoPFBhcnNlZE1lc3NhZ2VQYXJ0UGxhY2Vob2xkZXI+IHBhcnQpLmluZGV4KCk7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQuYWRkKGluZGV4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm4gdGhlIGRpc3AtQXR0cmlidXRlIG9mIHBsYWNlaG9sZGVyXHJcbiAgICAgKiBAcGFyYW0gaW5kZXggaW5kZXggb2YgcGxhY2Vob2xkZXJcclxuICAgICAqIEByZXR1cm4gZGlzcCBvciBudWxsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRQbGFjZWhvbGRlckRpc3AoaW5kZXg6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IHBsYWNlSG9sZGVyOiBQYXJzZWRNZXNzYWdlUGFydFBsYWNlaG9sZGVyID0gbnVsbDtcclxuICAgICAgICB0aGlzLnBhcnRzKCkuZm9yRWFjaCgocGFydCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAocGFydC50eXBlID09PSBQYXJzZWRNZXNzYWdlUGFydFR5cGUuUExBQ0VIT0xERVIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBoUGFydDogUGFyc2VkTWVzc2FnZVBhcnRQbGFjZWhvbGRlciA9IDxQYXJzZWRNZXNzYWdlUGFydFBsYWNlaG9sZGVyPiBwYXJ0O1xyXG4gICAgICAgICAgICAgICAgaWYgKHBoUGFydC5pbmRleCgpID09PSBpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlSG9sZGVyID0gcGhQYXJ0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHBsYWNlSG9sZGVyID8gcGxhY2VIb2xkZXIuZGlzcCgpIDogbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCBhbGwgaW5kZXhlcyBvZiBJQ1UgbWVzc2FnZSByZWZzIHVzZWQgaW4gdGhlIG1lc3NhZ2UuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgYWxsSUNVTWVzc2FnZVJlZnMoKTogU2V0PG51bWJlcj4ge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBTZXQ8bnVtYmVyPigpO1xyXG4gICAgICAgIHRoaXMucGFydHMoKS5mb3JFYWNoKChwYXJ0KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChwYXJ0LnR5cGUgPT09IFBhcnNlZE1lc3NhZ2VQYXJ0VHlwZS5JQ1VfTUVTU0FHRV9SRUYpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gKDxQYXJzZWRNZXNzYWdlUGFydElDVU1lc3NhZ2VSZWY+IHBhcnQpLmluZGV4KCk7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQuYWRkKGluZGV4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm4gdGhlIGRpc3AtQXR0cmlidXRlIG9mIGljdSBtZXNzYWdlIHJlZlxyXG4gICAgICogQHBhcmFtIGluZGV4IG9mIHJlZlxyXG4gICAgICogQHJldHVybiBkaXNwIG9yIG51bGxcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldElDVU1lc3NhZ2VSZWZEaXNwKGluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCBpY3VNZXNzYWdlUmVmUGFydDogUGFyc2VkTWVzc2FnZVBhcnRJQ1VNZXNzYWdlUmVmID0gbnVsbDtcclxuICAgICAgICB0aGlzLnBhcnRzKCkuZm9yRWFjaCgocGFydCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAocGFydC50eXBlID09PSBQYXJzZWRNZXNzYWdlUGFydFR5cGUuSUNVX01FU1NBR0VfUkVGKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZWZQYXJ0OiBQYXJzZWRNZXNzYWdlUGFydElDVU1lc3NhZ2VSZWYgPSA8UGFyc2VkTWVzc2FnZVBhcnRJQ1VNZXNzYWdlUmVmPiBwYXJ0O1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlZlBhcnQuaW5kZXgoKSA9PT0gaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpY3VNZXNzYWdlUmVmUGFydCA9IHJlZlBhcnQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gaWN1TWVzc2FnZVJlZlBhcnQgPyBpY3VNZXNzYWdlUmVmUGFydC5kaXNwKCkgOiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgZm9yIGFkZGVkIHRhZ3MuXHJcbiAgICAgKiBAcmV0dXJuIG51bGwgb3IgbWVzc2FnZSwgaWYgZnVsZmlsbGVkLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNoZWNrVGFnQWRkZWQoKTogYW55IHtcclxuICAgICAgICBsZXQgZSA9IG51bGw7XHJcbiAgICAgICAgY29uc3Qgc3VzcGljaW91c1RhZ3MgPSBbXTtcclxuICAgICAgICBpZiAodGhpcy5zb3VyY2VNZXNzYWdlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZVRhZ3MgPSB0aGlzLnNvdXJjZU1lc3NhZ2UuYWxsVGFncygpO1xyXG4gICAgICAgICAgICBjb25zdCBteVRhZ3MgPSB0aGlzLmFsbFRhZ3MoKTtcclxuICAgICAgICAgICAgbXlUYWdzLmZvckVhY2goKHRhZ05hbWUpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghc291cmNlVGFncy5oYXModGFnTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdXNwaWNpb3VzVGFncy5wdXNoKHRhZ05hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHN1c3BpY2lvdXNUYWdzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICBlID0gJ2FkZGVkIHRhZyA8JyArIHN1c3BpY2lvdXNUYWdzWzBdICsgJz4sIHdoaWNoIGlzIG5vdCBpbiBvcmlnaW5hbCBtZXNzYWdlJztcclxuICAgICAgICB9IGVsc2UgaWYgKHN1c3BpY2lvdXNUYWdzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgbGV0IGFsbFN1c3BpY2lvdXNUYWdzID0gJyc7XHJcbiAgICAgICAgICAgIGxldCBmaXJzdCA9IHRydWU7XHJcbiAgICAgICAgICAgIHN1c3BpY2lvdXNUYWdzLmZvckVhY2goKHRhZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFmaXJzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsbFN1c3BpY2lvdXNUYWdzID0gYWxsU3VzcGljaW91c1RhZ3MgKyAnLCAnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYWxsU3VzcGljaW91c1RhZ3MgPSBhbGxTdXNwaWNpb3VzVGFncyArICc8JyArIHRhZyArICc+JztcclxuICAgICAgICAgICAgICAgIGZpcnN0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBlID0gJ2FkZGVkIHRhZ3MgJyArIGFsbFN1c3BpY2lvdXNUYWdzICsgJywgd2hpY2ggYXJlIG5vdCBpbiBvcmlnaW5hbCBtZXNzYWdlJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVjayBmb3IgcmVtb3ZlZCB0YWdzLlxyXG4gICAgICogQHJldHVybiBudWxsIG9yIG1lc3NhZ2UsIGlmIGZ1bGZpbGxlZC5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjaGVja1RhZ1JlbW92ZWQoKTogYW55IHtcclxuICAgICAgICBsZXQgdyA9IG51bGw7XHJcbiAgICAgICAgY29uc3Qgc3VzcGljaW91c1RhZ3MgPSBbXTtcclxuICAgICAgICBpZiAodGhpcy5zb3VyY2VNZXNzYWdlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZVRhZ3MgPSB0aGlzLnNvdXJjZU1lc3NhZ2UuYWxsVGFncygpO1xyXG4gICAgICAgICAgICBjb25zdCBteVRhZ3MgPSB0aGlzLmFsbFRhZ3MoKTtcclxuICAgICAgICAgICAgc291cmNlVGFncy5mb3JFYWNoKCh0YWdOYW1lKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW15VGFncy5oYXModGFnTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdXNwaWNpb3VzVGFncy5wdXNoKHRhZ05hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHN1c3BpY2lvdXNUYWdzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICB3ID0gJ3JlbW92ZWQgdGFnIDwnICsgc3VzcGljaW91c1RhZ3NbMF0gKyAnPiBmcm9tIG9yaWdpbmFsIG1lc3NhZ2UnO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoc3VzcGljaW91c1RhZ3MubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICBsZXQgYWxsU3VzcGljaW91c1RhZ3MgPSAnJztcclxuICAgICAgICAgICAgbGV0IGZpcnN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgc3VzcGljaW91c1RhZ3MuZm9yRWFjaCgodGFnKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWZpcnN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxsU3VzcGljaW91c1RhZ3MgPSBhbGxTdXNwaWNpb3VzVGFncyArICcsICc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBhbGxTdXNwaWNpb3VzVGFncyA9IGFsbFN1c3BpY2lvdXNUYWdzICsgJzwnICsgdGFnICsgJz4nO1xyXG4gICAgICAgICAgICAgICAgZmlyc3QgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHcgPSAncmVtb3ZlZCB0YWdzICcgKyBhbGxTdXNwaWNpb3VzVGFncyArICcgZnJvbSBvcmlnaW5hbCBtZXNzYWdlJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHc7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYWxsIHRhZyBuYW1lcyB1c2VkIGluIHRoZSBtZXNzYWdlLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGFsbFRhZ3MoKTogU2V0PHN0cmluZz4ge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBTZXQ8c3RyaW5nPigpO1xyXG4gICAgICAgIHRoaXMucGFydHMoKS5mb3JFYWNoKChwYXJ0KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChwYXJ0LnR5cGUgPT09IFBhcnNlZE1lc3NhZ2VQYXJ0VHlwZS5TVEFSVF9UQUcgfHwgcGFydC50eXBlID09PSBQYXJzZWRNZXNzYWdlUGFydFR5cGUuRU1QVFlfVEFHKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0YWdOYW1lID0gKDxQYXJzZWRNZXNzYWdlUGFydFN0YXJ0VGFnPiBwYXJ0KS50YWdOYW1lKCk7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQuYWRkKHRhZ05hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcGFydHMoKTogUGFyc2VkTWVzc2FnZVBhcnRbXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnRzO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFhtbFJlcHJlc2VudGF0aW9uKHhtbFJlcHJlc2VudGF0aW9uOiBFbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5feG1sUmVwcmVzZW50YXRpb24gPSB4bWxSZXByZXNlbnRhdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICBhZGRUZXh0KHRleHQ6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuX3BhcnRzLnB1c2gobmV3IFBhcnNlZE1lc3NhZ2VQYXJ0VGV4dCh0ZXh0KSk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkUGxhY2Vob2xkZXIoaW5kZXg6IG51bWJlciwgZGlzcDogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fcGFydHMucHVzaChuZXcgUGFyc2VkTWVzc2FnZVBhcnRQbGFjZWhvbGRlcihpbmRleCwgZGlzcCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFN0YXJ0VGFnKHRhZ25hbWU6IHN0cmluZywgaWRjb3VudGVyOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl9wYXJ0cy5wdXNoKG5ldyBQYXJzZWRNZXNzYWdlUGFydFN0YXJ0VGFnKHRhZ25hbWUsIGlkY291bnRlcikpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEVuZFRhZyh0YWduYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICAvLyBjaGVjayBpZiB3ZWxsIGZvcm1lZFxyXG4gICAgICAgIGNvbnN0IG9wZW5UYWcgPSB0aGlzLmNhbGN1bGF0ZU9wZW5UYWdOYW1lKCk7XHJcbiAgICAgICAgaWYgKCFvcGVuVGFnIHx8IG9wZW5UYWcgIT09IHRhZ25hbWUpIHtcclxuICAgICAgICAgICAgLy8gb29wcywgbm90IHdlbGwgZm9ybWVkXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXQoJ3VuZXhwZWN0ZWQgY2xvc2UgdGFnICVzIChjdXJyZW50bHkgb3BlbiBpcyAlcywgbmF0aXZlIHhtbCBpcyBcIiVzXCIpJyxcclxuICAgICAgICAgICAgICAgIHRhZ25hbWUsIG9wZW5UYWcsIHRoaXMuYXNOYXRpdmVTdHJpbmcoKSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9wYXJ0cy5wdXNoKG5ldyBQYXJzZWRNZXNzYWdlUGFydEVuZFRhZyh0YWduYW1lKSk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkRW1wdHlUYWcodGFnbmFtZTogc3RyaW5nLCBpZGNvdW50ZXI6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX3BhcnRzLnB1c2gobmV3IFBhcnNlZE1lc3NhZ2VQYXJ0RW1wdHlUYWcodGFnbmFtZSwgaWRjb3VudGVyKSk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkSUNVTWVzc2FnZVJlZihpbmRleDogbnVtYmVyLCBkaXNwKSB7XHJcbiAgICAgICAgdGhpcy5fcGFydHMucHVzaChuZXcgUGFyc2VkTWVzc2FnZVBhcnRJQ1VNZXNzYWdlUmVmKGluZGV4LCBkaXNwKSk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkSUNVTWVzc2FnZSh0ZXh0OiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl9wYXJ0cy5wdXNoKG5ldyBQYXJzZWRNZXNzYWdlUGFydElDVU1lc3NhZ2UodGV4dCwgdGhpcy5fcGFyc2VyKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmUsIHdldGhlciB0aGVyZSBpcyBhbiBvcGVuIHRhZywgdGhhdCBpcyBub3QgY2xvc2VkLlxyXG4gICAgICogUmV0dXJucyB0aGUgbGF0ZXN0IG9uZSBvciBudWxsLCBpZiB0aGVyZSBpcyBubyBvcGVuIHRhZy5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjYWxjdWxhdGVPcGVuVGFnTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IG9wZW5UYWdzID0gW107XHJcbiAgICAgICAgdGhpcy5fcGFydHMuZm9yRWFjaCgocGFydCkgPT4ge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHBhcnQudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBQYXJzZWRNZXNzYWdlUGFydFR5cGUuU1RBUlRfVEFHOlxyXG4gICAgICAgICAgICAgICAgICAgIG9wZW5UYWdzLnB1c2goKDxQYXJzZWRNZXNzYWdlUGFydFN0YXJ0VGFnPiBwYXJ0KS50YWdOYW1lKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBQYXJzZWRNZXNzYWdlUGFydFR5cGUuRU5EX1RBRzpcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0YWdOYW1lID0gKDxQYXJzZWRNZXNzYWdlUGFydEVuZFRhZz4gcGFydCkudGFnTmFtZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcGVuVGFncy5sZW5ndGggPT09IDAgfHwgb3BlblRhZ3Nbb3BlblRhZ3MubGVuZ3RoIC0gMV0gIT09IHRhZ05hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb29wcywgbm90IHdlbGwgZm9ybWVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wZW5UYWcgPSAob3BlblRhZ3MubGVuZ3RoID09PSAwKSA/ICdub3RoaW5nJyA6IG9wZW5UYWdzW29wZW5UYWdzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KCd1bmV4cGVjdGVkIGNsb3NlIHRhZyAlcyAoY3VycmVudGx5IG9wZW4gaXMgJXMsIG5hdGl2ZSB4bWwgaXMgXCIlc1wiKScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWdOYW1lLCBvcGVuVGFnLCB0aGlzLmFzTmF0aXZlU3RyaW5nKCkpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgb3BlblRhZ3MucG9wKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gb3BlblRhZ3MubGVuZ3RoID09PSAwID8gbnVsbCA6IG9wZW5UYWdzW29wZW5UYWdzLmxlbmd0aCAtIDFdO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==