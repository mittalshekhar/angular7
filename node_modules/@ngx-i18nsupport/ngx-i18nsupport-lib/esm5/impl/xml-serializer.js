/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/**
 * An XmlSerializer that supports formatting.
 * Original code is based on [xmldom](https://www.npmjs.com/package/xmldom)
 * It is extended to support formatting including handling of elements with mixed content.
 * Example formatted output:
 * <pre>
 *     <doc>
 *         <element>An element with
 *             <b>mixed</b>
 *              content
 *         </element>
 *     </doc>
 * </pre>
 * Same when "element" is indicated as "mixedContentElement":
 * <pre>
 *     <doc>
 *         <element>An element with <b>mixed</b> content</element>
 *     </doc>
 * </pre>
 * @record
 */
function Namespace() { }
/** @type {?} */
Namespace.prototype.prefix;
/** @type {?} */
Namespace.prototype.namespace;
/**
 * Options used to control the formatting
 * @record
 */
export function XmlSerializerOptions() { }
/** @type {?|undefined} */
XmlSerializerOptions.prototype.beautify;
/** @type {?|undefined} */
XmlSerializerOptions.prototype.indentString;
/** @type {?|undefined} */
XmlSerializerOptions.prototype.mixedContentElements;
/** @type {?} */
var DEFAULT_INDENT_STRING = '  ';
var XmlSerializer = /** @class */ (function () {
    function XmlSerializer() {
    }
    /**
     * Serialze xml document to string.
     * @param document the document
     * @param options can be used to activate beautifying.
     */
    /**
     * Serialze xml document to string.
     * @param {?} document the document
     * @param {?=} options can be used to activate beautifying.
     * @return {?}
     */
    XmlSerializer.prototype.serializeToString = /**
     * Serialze xml document to string.
     * @param {?} document the document
     * @param {?=} options can be used to activate beautifying.
     * @return {?}
     */
    function (document, options) {
        /** @type {?} */
        var buf = [];
        /** @type {?} */
        var visibleNamespaces = [];
        /** @type {?} */
        var refNode = document.documentElement;
        /** @type {?} */
        var prefix = refNode.prefix;
        /** @type {?} */
        var uri = refNode.namespaceURI;
        if (uri && prefix == null) {
            prefix = refNode.lookupPrefix(uri);
            if (prefix == null) {
                visibleNamespaces = [
                    { namespace: uri, prefix: null }
                ];
            }
        }
        if (!options) {
            options = {};
        }
        if (options.indentString) {
            if (!this.containsOnlyWhiteSpace(options.indentString)) {
                throw new Error('indentString must not contain non white characters');
            }
        }
        this.doSerializeToString(document, options, buf, 0, false, visibleNamespaces);
        return buf.join('');
    };
    /**
     * Main format method that does all the work.
     * Outputs a node to the outputbuffer.
     * @param {?} node the node to be formatted.
     * @param {?} options options
     * @param {?} buf outputbuffer, new output will be appended to this array.
     * @param {?} indentLevel Lever of indentation for formatted output.
     * @param {?} partOfMixedContent true, if node is a subelement of an element containind mixed content.
     * @param {?} visibleNamespaces visibleNamespaces
     * @return {?}
     */
    XmlSerializer.prototype.doSerializeToString = /**
     * Main format method that does all the work.
     * Outputs a node to the outputbuffer.
     * @param {?} node the node to be formatted.
     * @param {?} options options
     * @param {?} buf outputbuffer, new output will be appended to this array.
     * @param {?} indentLevel Lever of indentation for formatted output.
     * @param {?} partOfMixedContent true, if node is a subelement of an element containind mixed content.
     * @param {?} visibleNamespaces visibleNamespaces
     * @return {?}
     */
    function (node, options, buf, indentLevel, partOfMixedContent, visibleNamespaces) {
        /** @type {?} */
        var child;
        switch (node.nodeType) {
            case node.ELEMENT_NODE:
                /** @type {?} */
                var elementNode = /** @type {?} */ (node);
                /** @type {?} */
                var attrs = elementNode.attributes;
                /** @type {?} */
                var len = attrs.length;
                child = elementNode.firstChild;
                /** @type {?} */
                var nodeName = elementNode.tagName;
                /** @type {?} */
                var elementHasMixedContent = this.isMixedContentElement(nodeName, options);
                if (partOfMixedContent) {
                    buf.push('<', nodeName);
                }
                else {
                    this.outputIndented(options, buf, indentLevel, '<', nodeName);
                }
                for (var i = 0; i < len; i++) {
                    /** @type {?} */
                    var attr = attrs.item(i);
                    if (attr.prefix === 'xmlns') {
                        visibleNamespaces.push({ prefix: attr.localName, namespace: attr.value });
                    }
                    else if (attr.nodeName === 'xmlns') {
                        visibleNamespaces.push({ prefix: '', namespace: attr.value });
                    }
                }
                for (var i = 0; i < len; i++) {
                    /** @type {?} */
                    var attr = attrs.item(i);
                    if (this.needNamespaceDefine(attr, visibleNamespaces)) {
                        /** @type {?} */
                        var prefix = attr.prefix || '';
                        /** @type {?} */
                        var uri = attr.namespaceURI;
                        /** @type {?} */
                        var ns = prefix ? ' xmlns:' + prefix : ' xmlns';
                        buf.push(ns, '="', uri, '"');
                        visibleNamespaces.push({ prefix: prefix, namespace: uri });
                    }
                    this.doSerializeToString(attr, options, buf, indentLevel, false, visibleNamespaces);
                }
                // add namespace for current node
                if (this.needNamespaceDefine(elementNode, visibleNamespaces)) {
                    /** @type {?} */
                    var prefix = elementNode.prefix || '';
                    /** @type {?} */
                    var uri = node.namespaceURI;
                    /** @type {?} */
                    var ns = prefix ? ' xmlns:' + prefix : ' xmlns';
                    buf.push(ns, '="', uri, '"');
                    visibleNamespaces.push({ prefix: prefix, namespace: uri });
                }
                if (child) {
                    buf.push('>');
                    /** @type {?} */
                    var hasComplexContent = false;
                    while (child) {
                        if (child.nodeType === child.ELEMENT_NODE) {
                            hasComplexContent = true;
                        }
                        this.doSerializeToString(child, options, buf, indentLevel + 1, partOfMixedContent || elementHasMixedContent, visibleNamespaces);
                        child = child.nextSibling;
                    }
                    if (!partOfMixedContent && !elementHasMixedContent && hasComplexContent) {
                        this.outputIndented(options, buf, indentLevel, '</', nodeName, '>');
                    }
                    else {
                        buf.push('</', nodeName, '>');
                    }
                }
                else {
                    buf.push('/>');
                }
                return;
            case node.DOCUMENT_NODE:
            case node.DOCUMENT_FRAGMENT_NODE:
                child = node.firstChild;
                while (child) {
                    this.doSerializeToString(child, options, buf, indentLevel, false, visibleNamespaces);
                    child = child.nextSibling;
                }
                return;
            case node.ATTRIBUTE_NODE:
                /** @type {?} */
                var attrNode = /** @type {?} */ (node);
                return buf.push(' ', attrNode.name, '="', attrNode.value.replace(/[<&"]/g, this._xmlEncoder), '"');
            case node.TEXT_NODE:
                /** @type {?} */
                var textNode = /** @type {?} */ (node);
                if (!options.beautify || partOfMixedContent || !this.containsOnlyWhiteSpace(textNode.data)) {
                    return buf.push(textNode.data.replace(/[<&]/g, this._xmlEncoder));
                }
                return;
            case node.CDATA_SECTION_NODE:
                /** @type {?} */
                var cdatasectionNode = /** @type {?} */ (node);
                return buf.push('<![CDATA[', cdatasectionNode.data, ']]>');
            case node.COMMENT_NODE:
                /** @type {?} */
                var commentNode = /** @type {?} */ (node);
                return buf.push('<!--', commentNode.data, '-->');
            case node.DOCUMENT_TYPE_NODE:
                /** @type {?} */
                var documenttypeNode = /** @type {?} */ (node);
                /** @type {?} */
                var pubid = documenttypeNode.publicId;
                /** @type {?} */
                var sysid = documenttypeNode.systemId;
                buf.push('<!DOCTYPE ', documenttypeNode.name);
                if (pubid) {
                    buf.push(' PUBLIC "', pubid);
                    if (sysid && sysid !== '.') {
                        buf.push('" "', sysid);
                    }
                    buf.push('">');
                }
                else if (sysid && sysid !== '.') {
                    buf.push(' SYSTEM "', sysid, '">');
                }
                else {
                    /** @type {?} */
                    var sub = documenttypeNode.internalSubset;
                    if (sub) {
                        buf.push(' [', sub, ']');
                    }
                    buf.push('>');
                }
                return;
            case node.PROCESSING_INSTRUCTION_NODE:
                /** @type {?} */
                var piNode = /** @type {?} */ (node);
                return buf.push('<?', piNode.target, ' ', piNode.data, '?>');
            case node.ENTITY_REFERENCE_NODE:
                return buf.push('&', node.nodeName, ';');
            // case ENTITY_NODE:
            // case NOTATION_NODE:
            default:
                buf.push('??', node.nodeName);
        }
    };
    /**
     * @param {?} node
     * @param {?} visibleNamespaces
     * @return {?}
     */
    XmlSerializer.prototype.needNamespaceDefine = /**
     * @param {?} node
     * @param {?} visibleNamespaces
     * @return {?}
     */
    function (node, visibleNamespaces) {
        /** @type {?} */
        var prefix = node.prefix || '';
        /** @type {?} */
        var uri = node.namespaceURI;
        if (!prefix && !uri) {
            return false;
        }
        if (prefix === 'xml' && uri === 'http://www.w3.org/XML/1998/namespace'
            || uri === 'http://www.w3.org/2000/xmlns/') {
            return false;
        }
        /** @type {?} */
        var i = visibleNamespaces.length;
        while (i--) {
            /** @type {?} */
            var ns = visibleNamespaces[i];
            // get namespace prefix
            if (ns.prefix === prefix) {
                return ns.namespace !== uri;
            }
        }
        return true;
    };
    /**
     * @param {?} c
     * @return {?}
     */
    XmlSerializer.prototype._xmlEncoder = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return c === '<' && '&lt;' ||
            c === '>' && '&gt;' ||
            c === '&' && '&amp;' ||
            c === '"' && '&quot;' ||
            '&#' + c.charCodeAt(0) + ';';
    };
    /**
     * @param {?} options
     * @param {?} buf
     * @param {?} indentLevel
     * @param {...?} outputParts
     * @return {?}
     */
    XmlSerializer.prototype.outputIndented = /**
     * @param {?} options
     * @param {?} buf
     * @param {?} indentLevel
     * @param {...?} outputParts
     * @return {?}
     */
    function (options, buf, indentLevel) {
        var outputParts = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            outputParts[_i - 3] = arguments[_i];
        }
        if (options.beautify) {
            buf.push('\n');
            if (indentLevel > 0) {
                buf.push(this.indentationString(options, indentLevel));
            }
        }
        buf.push.apply(buf, tslib_1.__spread(outputParts));
    };
    /**
     * @param {?} options
     * @param {?} indentLevel
     * @return {?}
     */
    XmlSerializer.prototype.indentationString = /**
     * @param {?} options
     * @param {?} indentLevel
     * @return {?}
     */
    function (options, indentLevel) {
        /** @type {?} */
        var indent = (options.indentString) ? options.indentString : DEFAULT_INDENT_STRING;
        /** @type {?} */
        var result = '';
        for (var i = 0; i < indentLevel; i++) {
            result = result + indent;
        }
        return result;
    };
    /**
     * Test, wether tagName is an element containing mixed content.
     * @param {?} tagName tagName
     * @param {?} options options
     * @return {?}
     */
    XmlSerializer.prototype.isMixedContentElement = /**
     * Test, wether tagName is an element containing mixed content.
     * @param {?} tagName tagName
     * @param {?} options options
     * @return {?}
     */
    function (tagName, options) {
        if (options && options.mixedContentElements) {
            return !!options.mixedContentElements.find(function (tag) { return tag === tagName; });
        }
        else {
            return false;
        }
    };
    /**
     * @param {?} text
     * @return {?}
     */
    XmlSerializer.prototype.containsOnlyWhiteSpace = /**
     * @param {?} text
     * @return {?}
     */
    function (text) {
        for (var i = 0; i < text.length; i++) {
            /** @type {?} */
            var c = text.charAt(i);
            if (!(c === ' ' || c === '\t' || c === '\r' || c === '\n')) {
                return false;
            }
        }
        return true;
    };
    return XmlSerializer;
}());
export { XmlSerializer };

//# sourceMappingURL=data:application/json;base64,