/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Interface of a translation unit in a translation messages file.
 * @record
 */
export function ITransUnit() { }
/** @type {?} */
ITransUnit.prototype.id;
/**
 * The file the unit belongs to.,
 * @type {?}
 */
ITransUnit.prototype.translationMessagesFile;
/**
 * The original text value, that is to be translated.
 * Contains all markup, depends on the concrete format used.
 * @type {?}
 */
ITransUnit.prototype.sourceContent;
/**
 * Test, wether setting of source content is supported.
 * If not, setSourceContent in trans-unit will do nothing.
 * xtb does not support this, all other formats do.
 * @type {?}
 */
ITransUnit.prototype.supportsSetSourceContent;
/**
 * Set new source content in the transunit.
 * Normally, this is done by ng-extract.
 * Method only exists to allow xliffmerge to merge missing changed source content.
 * \@param newContent the new content.
 * @type {?}
 */
ITransUnit.prototype.setSourceContent;
/**
 * The original text value, that is to be translated, as normalized message.
 * Throws an error if normalized xml is not well formed.
 * (which should not happen in generated files)
 * @type {?}
 */
ITransUnit.prototype.sourceContentNormalized;
/**
 * The translated value.
 * Contains all markup, depends on the concrete format used.
 * @type {?}
 */
ITransUnit.prototype.targetContent;
/**
 * The translated value as normalized message.
 * All placeholders are replaced with {{n}} (starting at 0)
 * and all embedded html is replaced by direct html markup.
 * Throws an error if normalized xml is not well formed.
 * (which should not happen in generated files)
 * @type {?}
 */
ITransUnit.prototype.targetContentNormalized;
/**
 * State of the translation.
 * (on of new, translated, final)
 * Return values are defined as Constants STATE_...
 * @type {?}
 */
ITransUnit.prototype.targetState;
/**
 * Modify the target state.
 * \@param newState one of the 3 allowed target states new, translated, final.
 * Constants STATE_...
 * Invalid states throw an error.
 * @type {?}
 */
ITransUnit.prototype.setTargetState;
/**
 * All the source elements in the trans unit.
 * The source element is a reference to the original template.
 * It contains the name of the template file and a line number with the position inside the template.
 * It is just a help for translators to find the context for the translation.
 * This is set when using Angular 4.0 or greater.
 * Otherwise it just returns an empty array.
 * @type {?}
 */
ITransUnit.prototype.sourceReferences;
/**
 * Test, wether setting of source refs is supported.
 * If not, setSourceReferences will do nothing.
 * xtb does not support this, all other formats do.
 * @type {?}
 */
ITransUnit.prototype.supportsSetSourceReferences;
/**
 * Set source ref elements in the transunit.
 * Normally, this is done by ng-extract.
 * Method only exists to allow xliffmerge to merge missing source refs.
 * \@param sourceRefs the sourcerefs to set. Old ones are removed.
 * @type {?}
 */
ITransUnit.prototype.setSourceReferences;
/**
 * The description set in the template as value of the i18n-attribute.
 * e.g. i18n="mydescription".
 * @type {?}
 */
ITransUnit.prototype.description;
/**
 * The meaning (intent) set in the template as value of the i18n-attribute.
 * This is the part in front of the | symbol.
 * e.g. i18n="meaning|mydescription".
 * @type {?}
 */
ITransUnit.prototype.meaning;
/**
 * Test, wether setting of description and meaning is supported.
 * If not, setDescription and setMeaning will do nothing.
 * xtb does not support this, all other formats do.
 * @type {?}
 */
ITransUnit.prototype.supportsSetDescriptionAndMeaning;
/**
 * Change description property of trans-unit.
 * \@param description description
 * @type {?}
 */
ITransUnit.prototype.setDescription;
/**
 * Change meaning property of trans-unit.
 * \@param meaning meaning
 * @type {?}
 */
ITransUnit.prototype.setMeaning;
/**
 * Get all notes of the trans-unit.
 * Notes are remarks made by a translator.
 * (description and meaning are not included here!)
 * @type {?}
 */
ITransUnit.prototype.notes;
/**
 * Test, wether setting of notes is supported.
 * If not, setNotes will do nothing.
 * xtb does not support this, all other formats do.
 * @type {?}
 */
ITransUnit.prototype.supportsSetNotes;
/**
 * Add notes to trans unit.
 * \@param newNotes the notes to add.
 * @throws an Error if any note contains description or meaning as from attribute.
 * @type {?}
 */
ITransUnit.prototype.setNotes;
/**
 * Translate the trans unit.
 * \@param translation the translated string or (preferred) a normalized message.
 * The pure string can contain any markup and will not be checked.
 * So it can damage the document.
 * A normalized message prevents this.
 * @type {?}
 */
ITransUnit.prototype.translate;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaS10cmFucy11bml0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neC1pMThuc3VwcG9ydC9uZ3gtaTE4bnN1cHBvcnQtbGliLyIsInNvdXJjZXMiOlsiYXBpL2ktdHJhbnMtdW5pdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJTm9ybWFsaXplZE1lc3NhZ2V9IGZyb20gJy4vaS1ub3JtYWxpemVkLW1lc3NhZ2UnO1xyXG5pbXBvcnQge0lUcmFuc2xhdGlvbk1lc3NhZ2VzRmlsZX0gZnJvbSAnLi9pLXRyYW5zbGF0aW9uLW1lc3NhZ2VzLWZpbGUnO1xyXG5pbXBvcnQge0lOb3RlfSBmcm9tICcuL2ktbm90ZSc7XHJcblxyXG4vKipcclxuICogQ3JlYXRlZCBieSBtYXJ0aW4gb24gMTkuMDMuMjAxNy5cclxuICovXHJcblxyXG4vKipcclxuICogSW50ZXJmYWNlIG9mIGEgdHJhbnNsYXRpb24gdW5pdCBpbiBhIHRyYW5zbGF0aW9uIG1lc3NhZ2VzIGZpbGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElUcmFuc1VuaXQge1xyXG5cclxuICAgIHJlYWRvbmx5IGlkOiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgZmlsZSB0aGUgdW5pdCBiZWxvbmdzIHRvLixcclxuICAgICAqL1xyXG4gICAgdHJhbnNsYXRpb25NZXNzYWdlc0ZpbGUoKTogSVRyYW5zbGF0aW9uTWVzc2FnZXNGaWxlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG9yaWdpbmFsIHRleHQgdmFsdWUsIHRoYXQgaXMgdG8gYmUgdHJhbnNsYXRlZC5cclxuICAgICAqIENvbnRhaW5zIGFsbCBtYXJrdXAsIGRlcGVuZHMgb24gdGhlIGNvbmNyZXRlIGZvcm1hdCB1c2VkLlxyXG4gICAgICovXHJcbiAgICBzb3VyY2VDb250ZW50KCk6IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRlc3QsIHdldGhlciBzZXR0aW5nIG9mIHNvdXJjZSBjb250ZW50IGlzIHN1cHBvcnRlZC5cclxuICAgICAqIElmIG5vdCwgc2V0U291cmNlQ29udGVudCBpbiB0cmFucy11bml0IHdpbGwgZG8gbm90aGluZy5cclxuICAgICAqIHh0YiBkb2VzIG5vdCBzdXBwb3J0IHRoaXMsIGFsbCBvdGhlciBmb3JtYXRzIGRvLlxyXG4gICAgICovXHJcbiAgICBzdXBwb3J0c1NldFNvdXJjZUNvbnRlbnQoKTogYm9vbGVhbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCBuZXcgc291cmNlIGNvbnRlbnQgaW4gdGhlIHRyYW5zdW5pdC5cclxuICAgICAqIE5vcm1hbGx5LCB0aGlzIGlzIGRvbmUgYnkgbmctZXh0cmFjdC5cclxuICAgICAqIE1ldGhvZCBvbmx5IGV4aXN0cyB0byBhbGxvdyB4bGlmZm1lcmdlIHRvIG1lcmdlIG1pc3NpbmcgY2hhbmdlZCBzb3VyY2UgY29udGVudC5cclxuICAgICAqIEBwYXJhbSBuZXdDb250ZW50IHRoZSBuZXcgY29udGVudC5cclxuICAgICAqL1xyXG4gICAgc2V0U291cmNlQ29udGVudChuZXdDb250ZW50OiBzdHJpbmcpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG9yaWdpbmFsIHRleHQgdmFsdWUsIHRoYXQgaXMgdG8gYmUgdHJhbnNsYXRlZCwgYXMgbm9ybWFsaXplZCBtZXNzYWdlLlxyXG4gICAgICogVGhyb3dzIGFuIGVycm9yIGlmIG5vcm1hbGl6ZWQgeG1sIGlzIG5vdCB3ZWxsIGZvcm1lZC5cclxuICAgICAqICh3aGljaCBzaG91bGQgbm90IGhhcHBlbiBpbiBnZW5lcmF0ZWQgZmlsZXMpXHJcbiAgICAgKi9cclxuICAgIHNvdXJjZUNvbnRlbnROb3JtYWxpemVkKCk6IElOb3JtYWxpemVkTWVzc2FnZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSB0cmFuc2xhdGVkIHZhbHVlLlxyXG4gICAgICogQ29udGFpbnMgYWxsIG1hcmt1cCwgZGVwZW5kcyBvbiB0aGUgY29uY3JldGUgZm9ybWF0IHVzZWQuXHJcbiAgICAgKi9cclxuICAgIHRhcmdldENvbnRlbnQoKTogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIHRyYW5zbGF0ZWQgdmFsdWUgYXMgbm9ybWFsaXplZCBtZXNzYWdlLlxyXG4gICAgICogQWxsIHBsYWNlaG9sZGVycyBhcmUgcmVwbGFjZWQgd2l0aCB7e259fSAoc3RhcnRpbmcgYXQgMClcclxuICAgICAqIGFuZCBhbGwgZW1iZWRkZWQgaHRtbCBpcyByZXBsYWNlZCBieSBkaXJlY3QgaHRtbCBtYXJrdXAuXHJcbiAgICAgKiBUaHJvd3MgYW4gZXJyb3IgaWYgbm9ybWFsaXplZCB4bWwgaXMgbm90IHdlbGwgZm9ybWVkLlxyXG4gICAgICogKHdoaWNoIHNob3VsZCBub3QgaGFwcGVuIGluIGdlbmVyYXRlZCBmaWxlcylcclxuICAgICAqL1xyXG4gICAgdGFyZ2V0Q29udGVudE5vcm1hbGl6ZWQoKTogSU5vcm1hbGl6ZWRNZXNzYWdlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU3RhdGUgb2YgdGhlIHRyYW5zbGF0aW9uLlxyXG4gICAgICogKG9uIG9mIG5ldywgdHJhbnNsYXRlZCwgZmluYWwpXHJcbiAgICAgKiBSZXR1cm4gdmFsdWVzIGFyZSBkZWZpbmVkIGFzIENvbnN0YW50cyBTVEFURV8uLi5cclxuICAgICAqL1xyXG4gICAgdGFyZ2V0U3RhdGUoKTogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTW9kaWZ5IHRoZSB0YXJnZXQgc3RhdGUuXHJcbiAgICAgKiBAcGFyYW0gbmV3U3RhdGUgb25lIG9mIHRoZSAzIGFsbG93ZWQgdGFyZ2V0IHN0YXRlcyBuZXcsIHRyYW5zbGF0ZWQsIGZpbmFsLlxyXG4gICAgICogQ29uc3RhbnRzIFNUQVRFXy4uLlxyXG4gICAgICogSW52YWxpZCBzdGF0ZXMgdGhyb3cgYW4gZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHNldFRhcmdldFN0YXRlKG5ld1N0YXRlOiBzdHJpbmcpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWxsIHRoZSBzb3VyY2UgZWxlbWVudHMgaW4gdGhlIHRyYW5zIHVuaXQuXHJcbiAgICAgKiBUaGUgc291cmNlIGVsZW1lbnQgaXMgYSByZWZlcmVuY2UgdG8gdGhlIG9yaWdpbmFsIHRlbXBsYXRlLlxyXG4gICAgICogSXQgY29udGFpbnMgdGhlIG5hbWUgb2YgdGhlIHRlbXBsYXRlIGZpbGUgYW5kIGEgbGluZSBudW1iZXIgd2l0aCB0aGUgcG9zaXRpb24gaW5zaWRlIHRoZSB0ZW1wbGF0ZS5cclxuICAgICAqIEl0IGlzIGp1c3QgYSBoZWxwIGZvciB0cmFuc2xhdG9ycyB0byBmaW5kIHRoZSBjb250ZXh0IGZvciB0aGUgdHJhbnNsYXRpb24uXHJcbiAgICAgKiBUaGlzIGlzIHNldCB3aGVuIHVzaW5nIEFuZ3VsYXIgNC4wIG9yIGdyZWF0ZXIuXHJcbiAgICAgKiBPdGhlcndpc2UgaXQganVzdCByZXR1cm5zIGFuIGVtcHR5IGFycmF5LlxyXG4gICAgICovXHJcbiAgICBzb3VyY2VSZWZlcmVuY2VzKCk6IHtzb3VyY2VmaWxlOiBzdHJpbmcsIGxpbmVudW1iZXI6IG51bWJlcn1bXTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRlc3QsIHdldGhlciBzZXR0aW5nIG9mIHNvdXJjZSByZWZzIGlzIHN1cHBvcnRlZC5cclxuICAgICAqIElmIG5vdCwgc2V0U291cmNlUmVmZXJlbmNlcyB3aWxsIGRvIG5vdGhpbmcuXHJcbiAgICAgKiB4dGIgZG9lcyBub3Qgc3VwcG9ydCB0aGlzLCBhbGwgb3RoZXIgZm9ybWF0cyBkby5cclxuICAgICAqL1xyXG4gICAgc3VwcG9ydHNTZXRTb3VyY2VSZWZlcmVuY2VzKCk6IGJvb2xlYW47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgc291cmNlIHJlZiBlbGVtZW50cyBpbiB0aGUgdHJhbnN1bml0LlxyXG4gICAgICogTm9ybWFsbHksIHRoaXMgaXMgZG9uZSBieSBuZy1leHRyYWN0LlxyXG4gICAgICogTWV0aG9kIG9ubHkgZXhpc3RzIHRvIGFsbG93IHhsaWZmbWVyZ2UgdG8gbWVyZ2UgbWlzc2luZyBzb3VyY2UgcmVmcy5cclxuICAgICAqIEBwYXJhbSBzb3VyY2VSZWZzIHRoZSBzb3VyY2VyZWZzIHRvIHNldC4gT2xkIG9uZXMgYXJlIHJlbW92ZWQuXHJcbiAgICAgKi9cclxuICAgIHNldFNvdXJjZVJlZmVyZW5jZXMoc291cmNlUmVmczoge3NvdXJjZWZpbGU6IHN0cmluZywgbGluZW51bWJlcjogbnVtYmVyfVtdKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBkZXNjcmlwdGlvbiBzZXQgaW4gdGhlIHRlbXBsYXRlIGFzIHZhbHVlIG9mIHRoZSBpMThuLWF0dHJpYnV0ZS5cclxuICAgICAqIGUuZy4gaTE4bj1cIm15ZGVzY3JpcHRpb25cIi5cclxuICAgICAqL1xyXG4gICAgZGVzY3JpcHRpb24oKTogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1lYW5pbmcgKGludGVudCkgc2V0IGluIHRoZSB0ZW1wbGF0ZSBhcyB2YWx1ZSBvZiB0aGUgaTE4bi1hdHRyaWJ1dGUuXHJcbiAgICAgKiBUaGlzIGlzIHRoZSBwYXJ0IGluIGZyb250IG9mIHRoZSB8IHN5bWJvbC5cclxuICAgICAqIGUuZy4gaTE4bj1cIm1lYW5pbmd8bXlkZXNjcmlwdGlvblwiLlxyXG4gICAgICovXHJcbiAgICBtZWFuaW5nKCk6IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRlc3QsIHdldGhlciBzZXR0aW5nIG9mIGRlc2NyaXB0aW9uIGFuZCBtZWFuaW5nIGlzIHN1cHBvcnRlZC5cclxuICAgICAqIElmIG5vdCwgc2V0RGVzY3JpcHRpb24gYW5kIHNldE1lYW5pbmcgd2lsbCBkbyBub3RoaW5nLlxyXG4gICAgICogeHRiIGRvZXMgbm90IHN1cHBvcnQgdGhpcywgYWxsIG90aGVyIGZvcm1hdHMgZG8uXHJcbiAgICAgKi9cclxuICAgIHN1cHBvcnRzU2V0RGVzY3JpcHRpb25BbmRNZWFuaW5nKCk6IGJvb2xlYW47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGFuZ2UgZGVzY3JpcHRpb24gcHJvcGVydHkgb2YgdHJhbnMtdW5pdC5cclxuICAgICAqIEBwYXJhbSBkZXNjcmlwdGlvbiBkZXNjcmlwdGlvblxyXG4gICAgICovXHJcbiAgICBzZXREZXNjcmlwdGlvbihkZXNjcmlwdGlvbjogc3RyaW5nKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENoYW5nZSBtZWFuaW5nIHByb3BlcnR5IG9mIHRyYW5zLXVuaXQuXHJcbiAgICAgKiBAcGFyYW0gbWVhbmluZyBtZWFuaW5nXHJcbiAgICAgKi9cclxuICAgIHNldE1lYW5pbmcobWVhbmluZzogc3RyaW5nKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCBhbGwgbm90ZXMgb2YgdGhlIHRyYW5zLXVuaXQuXHJcbiAgICAgKiBOb3RlcyBhcmUgcmVtYXJrcyBtYWRlIGJ5IGEgdHJhbnNsYXRvci5cclxuICAgICAqIChkZXNjcmlwdGlvbiBhbmQgbWVhbmluZyBhcmUgbm90IGluY2x1ZGVkIGhlcmUhKVxyXG4gICAgICovXHJcbiAgICBub3RlcygpOiBJTm90ZVtdO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGVzdCwgd2V0aGVyIHNldHRpbmcgb2Ygbm90ZXMgaXMgc3VwcG9ydGVkLlxyXG4gICAgICogSWYgbm90LCBzZXROb3RlcyB3aWxsIGRvIG5vdGhpbmcuXHJcbiAgICAgKiB4dGIgZG9lcyBub3Qgc3VwcG9ydCB0aGlzLCBhbGwgb3RoZXIgZm9ybWF0cyBkby5cclxuICAgICAqL1xyXG4gICAgc3VwcG9ydHNTZXROb3RlcygpOiBib29sZWFuO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkIG5vdGVzIHRvIHRyYW5zIHVuaXQuXHJcbiAgICAgKiBAcGFyYW0gbmV3Tm90ZXMgdGhlIG5vdGVzIHRvIGFkZC5cclxuICAgICAqIEB0aHJvd3MgYW4gRXJyb3IgaWYgYW55IG5vdGUgY29udGFpbnMgZGVzY3JpcHRpb24gb3IgbWVhbmluZyBhcyBmcm9tIGF0dHJpYnV0ZS5cclxuICAgICAqL1xyXG4gICAgc2V0Tm90ZXMobmV3Tm90ZXM6IElOb3RlW10pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVHJhbnNsYXRlIHRoZSB0cmFucyB1bml0LlxyXG4gICAgICogQHBhcmFtIHRyYW5zbGF0aW9uIHRoZSB0cmFuc2xhdGVkIHN0cmluZyBvciAocHJlZmVycmVkKSBhIG5vcm1hbGl6ZWQgbWVzc2FnZS5cclxuICAgICAqIFRoZSBwdXJlIHN0cmluZyBjYW4gY29udGFpbiBhbnkgbWFya3VwIGFuZCB3aWxsIG5vdCBiZSBjaGVja2VkLlxyXG4gICAgICogU28gaXQgY2FuIGRhbWFnZSB0aGUgZG9jdW1lbnQuXHJcbiAgICAgKiBBIG5vcm1hbGl6ZWQgbWVzc2FnZSBwcmV2ZW50cyB0aGlzLlxyXG4gICAgICovXHJcbiAgICB0cmFuc2xhdGUodHJhbnNsYXRpb246IHN0cmluZyB8IElOb3JtYWxpemVkTWVzc2FnZSk7XHJcblxyXG59XHJcbiJdfQ==