/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @typedef {?} */
var ValidationErrors;
export { ValidationErrors };
/**
 * @record
 */
export function INormalizedMessage() { }
/**
 * normalized message as string.
 * \@param format optional way to determine the exact syntax.
 * Allowed formats are defined as constants NORMALIZATION_FORMAT...
 * @type {?}
 */
INormalizedMessage.prototype.asDisplayString;
/**
 * Validate the message.
 * \@return null, if ok, error object otherwise.
 * @type {?}
 */
INormalizedMessage.prototype.validate;
/**
 * Validate the message, check for warnings only.
 * A warning shows, that the message is acceptable, but misses something.
 * E.g. if you remove a placeholder or a special tag from the original message, this generates a warning.
 * \@return null, if no warning, warnings as error object otherwise.
 * @type {?}
 */
INormalizedMessage.prototype.validateWarnings;
/**
 * Returns the message content as format dependent native string.
 * Includes all format specific markup like <ph id="INTERPOLATION" ../> ..
 * @type {?}
 */
INormalizedMessage.prototype.asNativeString;
/**
 * If this message is an ICU message, returns its structure.
 * Otherwise this method returns null.
 * \@return ICUMessage or null.
 * @type {?}
 */
INormalizedMessage.prototype.getICUMessage;
/**
 * Create a new normalized message as a translation of this one.
 * \@param normalizedString the translation in normalized form.
 * If the message is an ICUMessage (getICUMessage returns a value), use translateICUMessage instead.
 * @throws an error if normalized string is not well formed.
 * Throws an error too, if this is an ICU message.
 * @type {?}
 */
INormalizedMessage.prototype.translate;
/**
 * Create a new normalized icu message as a translation of this one.
 * \@param icuTranslation the translation, this is the translation of the ICU message,
 * which is not a string, but a collections of the translations of the different categories.
 * The message must be an ICUMessage (getICUMessage returns a value)
 * @throws an error if normalized string is not well formed.
 * Throws an error too, if this is not an ICU message.
 * @type {?}
 */
INormalizedMessage.prototype.translateICUMessage;
/**
 * Create a new normalized message from a native xml string as a translation of this one.
 * \@param nativeString xml string in the format of the underlying file format.
 * Throws an error if native string is not acceptable.
 * @type {?}
 */
INormalizedMessage.prototype.translateNativeString;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaS1ub3JtYWxpemVkLW1lc3NhZ2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LWkxOG5zdXBwb3J0L25neC1pMThuc3VwcG9ydC1saWIvIiwic291cmNlcyI6WyJhcGkvaS1ub3JtYWxpemVkLW1lc3NhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SUlDVU1lc3NhZ2UsIElJQ1VNZXNzYWdlVHJhbnNsYXRpb259IGZyb20gJy4vaS1pY3UtbWVzc2FnZSc7XHJcblxyXG4vKipcclxuICogQ3JlYXRlZCBieSBtYXJ0aW4gb24gMDkuMDUuMjAxNy5cclxuICogQSBub3JtYWxpemVkIG1lc3NhZ2UgaXMgYW4gYWJzdHJhY3Rpb24gb2YgYSB0cmFuc2xhdGlvbiBjb250YWluaW5nIHNvbWUgbWFya3VwLlxyXG4gKiBNYXJrdXAgY2FuIGJlIHBsYWNlaG9sZGVycyBvciBodG1sIHRhZ3MuXHJcbiAqL1xyXG5cclxuZXhwb3J0IHR5cGUgVmFsaWRhdGlvbkVycm9ycyA9IHtcclxuICAgIFtrZXk6IHN0cmluZ106IGFueTtcclxuICAgIHBsYWNlaG9sZGVyQWRkZWQ/OiBzdHJpbmc7XHJcbiAgICBwbGFjZWhvbGRlclJlbW92ZWQ/OiBzdHJpbmc7XHJcbiAgICB0YWdBZGRlZD86IHN0cmluZztcclxuICAgIHRhZ1JlbW92ZWQ/OiBzdHJpbmc7XHJcbn07XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElOb3JtYWxpemVkTWVzc2FnZSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBub3JtYWxpemVkIG1lc3NhZ2UgYXMgc3RyaW5nLlxyXG4gICAgICogQHBhcmFtIGZvcm1hdCBvcHRpb25hbCB3YXkgdG8gZGV0ZXJtaW5lIHRoZSBleGFjdCBzeW50YXguXHJcbiAgICAgKiBBbGxvd2VkIGZvcm1hdHMgYXJlIGRlZmluZWQgYXMgY29uc3RhbnRzIE5PUk1BTElaQVRJT05fRk9STUFULi4uXHJcbiAgICAgKi9cclxuICAgIGFzRGlzcGxheVN0cmluZyhmb3JtYXQ/OiBzdHJpbmcpOiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBWYWxpZGF0ZSB0aGUgbWVzc2FnZS5cclxuICAgICAqIEByZXR1cm4gbnVsbCwgaWYgb2ssIGVycm9yIG9iamVjdCBvdGhlcndpc2UuXHJcbiAgICAgKi9cclxuICAgIHZhbGlkYXRlKCk6IFZhbGlkYXRpb25FcnJvcnMgfCBudWxsO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVmFsaWRhdGUgdGhlIG1lc3NhZ2UsIGNoZWNrIGZvciB3YXJuaW5ncyBvbmx5LlxyXG4gICAgICogQSB3YXJuaW5nIHNob3dzLCB0aGF0IHRoZSBtZXNzYWdlIGlzIGFjY2VwdGFibGUsIGJ1dCBtaXNzZXMgc29tZXRoaW5nLlxyXG4gICAgICogRS5nLiBpZiB5b3UgcmVtb3ZlIGEgcGxhY2Vob2xkZXIgb3IgYSBzcGVjaWFsIHRhZyBmcm9tIHRoZSBvcmlnaW5hbCBtZXNzYWdlLCB0aGlzIGdlbmVyYXRlcyBhIHdhcm5pbmcuXHJcbiAgICAgKiBAcmV0dXJuIG51bGwsIGlmIG5vIHdhcm5pbmcsIHdhcm5pbmdzIGFzIGVycm9yIG9iamVjdCBvdGhlcndpc2UuXHJcbiAgICAgKi9cclxuICAgIHZhbGlkYXRlV2FybmluZ3MoKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBtZXNzYWdlIGNvbnRlbnQgYXMgZm9ybWF0IGRlcGVuZGVudCBuYXRpdmUgc3RyaW5nLlxyXG4gICAgICogSW5jbHVkZXMgYWxsIGZvcm1hdCBzcGVjaWZpYyBtYXJrdXAgbGlrZSA8cGggaWQ9XCJJTlRFUlBPTEFUSU9OXCIgLi4vPiAuLlxyXG4gICAgICovXHJcbiAgICBhc05hdGl2ZVN0cmluZygpOiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJZiB0aGlzIG1lc3NhZ2UgaXMgYW4gSUNVIG1lc3NhZ2UsIHJldHVybnMgaXRzIHN0cnVjdHVyZS5cclxuICAgICAqIE90aGVyd2lzZSB0aGlzIG1ldGhvZCByZXR1cm5zIG51bGwuXHJcbiAgICAgKiBAcmV0dXJuIElDVU1lc3NhZ2Ugb3IgbnVsbC5cclxuICAgICAqL1xyXG4gICAgZ2V0SUNVTWVzc2FnZSgpOiBJSUNVTWVzc2FnZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSBhIG5ldyBub3JtYWxpemVkIG1lc3NhZ2UgYXMgYSB0cmFuc2xhdGlvbiBvZiB0aGlzIG9uZS5cclxuICAgICAqIEBwYXJhbSBub3JtYWxpemVkU3RyaW5nIHRoZSB0cmFuc2xhdGlvbiBpbiBub3JtYWxpemVkIGZvcm0uXHJcbiAgICAgKiBJZiB0aGUgbWVzc2FnZSBpcyBhbiBJQ1VNZXNzYWdlIChnZXRJQ1VNZXNzYWdlIHJldHVybnMgYSB2YWx1ZSksIHVzZSB0cmFuc2xhdGVJQ1VNZXNzYWdlIGluc3RlYWQuXHJcbiAgICAgKiBAdGhyb3dzIGFuIGVycm9yIGlmIG5vcm1hbGl6ZWQgc3RyaW5nIGlzIG5vdCB3ZWxsIGZvcm1lZC5cclxuICAgICAqIFRocm93cyBhbiBlcnJvciB0b28sIGlmIHRoaXMgaXMgYW4gSUNVIG1lc3NhZ2UuXHJcbiAgICAgKi9cclxuICAgIHRyYW5zbGF0ZShub3JtYWxpemVkU3RyaW5nOiBzdHJpbmcpOiBJTm9ybWFsaXplZE1lc3NhZ2U7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYSBuZXcgbm9ybWFsaXplZCBpY3UgbWVzc2FnZSBhcyBhIHRyYW5zbGF0aW9uIG9mIHRoaXMgb25lLlxyXG4gICAgICogQHBhcmFtIGljdVRyYW5zbGF0aW9uIHRoZSB0cmFuc2xhdGlvbiwgdGhpcyBpcyB0aGUgdHJhbnNsYXRpb24gb2YgdGhlIElDVSBtZXNzYWdlLFxyXG4gICAgICogd2hpY2ggaXMgbm90IGEgc3RyaW5nLCBidXQgYSBjb2xsZWN0aW9ucyBvZiB0aGUgdHJhbnNsYXRpb25zIG9mIHRoZSBkaWZmZXJlbnQgY2F0ZWdvcmllcy5cclxuICAgICAqIFRoZSBtZXNzYWdlIG11c3QgYmUgYW4gSUNVTWVzc2FnZSAoZ2V0SUNVTWVzc2FnZSByZXR1cm5zIGEgdmFsdWUpXHJcbiAgICAgKiBAdGhyb3dzIGFuIGVycm9yIGlmIG5vcm1hbGl6ZWQgc3RyaW5nIGlzIG5vdCB3ZWxsIGZvcm1lZC5cclxuICAgICAqIFRocm93cyBhbiBlcnJvciB0b28sIGlmIHRoaXMgaXMgbm90IGFuIElDVSBtZXNzYWdlLlxyXG4gICAgICovXHJcbiAgICB0cmFuc2xhdGVJQ1VNZXNzYWdlKGljdVRyYW5zbGF0aW9uOiBJSUNVTWVzc2FnZVRyYW5zbGF0aW9uKTogSU5vcm1hbGl6ZWRNZXNzYWdlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIGEgbmV3IG5vcm1hbGl6ZWQgbWVzc2FnZSBmcm9tIGEgbmF0aXZlIHhtbCBzdHJpbmcgYXMgYSB0cmFuc2xhdGlvbiBvZiB0aGlzIG9uZS5cclxuICAgICAqIEBwYXJhbSBuYXRpdmVTdHJpbmcgeG1sIHN0cmluZyBpbiB0aGUgZm9ybWF0IG9mIHRoZSB1bmRlcmx5aW5nIGZpbGUgZm9ybWF0LlxyXG4gICAgICogVGhyb3dzIGFuIGVycm9yIGlmIG5hdGl2ZSBzdHJpbmcgaXMgbm90IGFjY2VwdGFibGUuXHJcbiAgICAgKi9cclxuICAgIHRyYW5zbGF0ZU5hdGl2ZVN0cmluZyhuYXRpdmVTdHJpbmc6IHN0cmluZyk6IElOb3JtYWxpemVkTWVzc2FnZTtcclxuXHJcbn1cclxuIl19