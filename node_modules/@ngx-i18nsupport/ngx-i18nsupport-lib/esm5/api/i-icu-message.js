/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * A message category, which is a part of an ICU message.
 * E.g. the ICU message {wolves, plural, =0 {no wolves} =1 {one wolf} =2 {two wolves} other {a wolf pack}}
 * has 4 category objects with the categories =0, =1, =2, other.
 * @record
 */
export function IICUMessageCategory() { }
/**
 * Fix part.
 * For plural mesages the category is "=0" or "=1" or "few" or "other"...
 * For select messages it is the matching key.
 * @type {?}
 */
IICUMessageCategory.prototype.getCategory;
/**
 * Translatable part.
 * @type {?}
 */
IICUMessageCategory.prototype.getMessageNormalized;
/**
 * An ICU message.
 * @record
 */
export function IICUMessage() { }
/**
 * Is it a plural message?
 * @type {?}
 */
IICUMessage.prototype.isPluralMessage;
/**
 * Is it a select message?
 * @type {?}
 */
IICUMessage.prototype.isSelectMessage;
/**
 * All the parts of the message.
 * E.g. the ICU message {wolves, plural, =0 {no wolves} =1 {one wolf} =2 {two wolves} other {a wolf pack}}
 * has 4 category objects with the categories =0, =1, =2, other.
 * @type {?}
 */
IICUMessage.prototype.getCategories;
/**
 * Returns the icu message content as format dependent native string.
 * This is, how it is stored, something like '{x, plural, =0 {..}'
 * @type {?}
 */
IICUMessage.prototype.asNativeString;
/**
 * Translate message and return a new, translated message
 * \@param translation the translation (hashmap of categories and translations).
 * \@return new message wit translated content.
 * @type {?}
 */
IICUMessage.prototype.translate;
/** @typedef {?} */
var IICUMessageTranslation;
export { IICUMessageTranslation };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaS1pY3UtbWVzc2FnZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtaTE4bnN1cHBvcnQvbmd4LWkxOG5zdXBwb3J0LWxpYi8iLCJzb3VyY2VzIjpbImFwaS9pLWljdS1tZXNzYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0lOb3JtYWxpemVkTWVzc2FnZX0gZnJvbSAnLi9pLW5vcm1hbGl6ZWQtbWVzc2FnZSc7XHJcbi8qKlxyXG4gKiBDcmVhdGVkIGJ5IG1hcnRpbiBvbiAwMi4wNi4yMDE3LlxyXG4gKiBJbnRlcmZhY2VzIGZvciBoYW5kbGluZyBvZiBJQ1UgTWVzc2FnZXMuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEEgbWVzc2FnZSBjYXRlZ29yeSwgd2hpY2ggaXMgYSBwYXJ0IG9mIGFuIElDVSBtZXNzYWdlLlxyXG4gKiBFLmcuIHRoZSBJQ1UgbWVzc2FnZSB7d29sdmVzLCBwbHVyYWwsID0wIHtubyB3b2x2ZXN9ID0xIHtvbmUgd29sZn0gPTIge3R3byB3b2x2ZXN9IG90aGVyIHthIHdvbGYgcGFja319XHJcbiAqIGhhcyA0IGNhdGVnb3J5IG9iamVjdHMgd2l0aCB0aGUgY2F0ZWdvcmllcyA9MCwgPTEsID0yLCBvdGhlci5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUlDVU1lc3NhZ2VDYXRlZ29yeSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGaXggcGFydC5cclxuICAgICAqIEZvciBwbHVyYWwgbWVzYWdlcyB0aGUgY2F0ZWdvcnkgaXMgXCI9MFwiIG9yIFwiPTFcIiBvciBcImZld1wiIG9yIFwib3RoZXJcIi4uLlxyXG4gICAgICogRm9yIHNlbGVjdCBtZXNzYWdlcyBpdCBpcyB0aGUgbWF0Y2hpbmcga2V5LlxyXG4gICAgICovXHJcbiAgICBnZXRDYXRlZ29yeSgpOiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmFuc2xhdGFibGUgcGFydC5cclxuICAgICAqL1xyXG4gICAgZ2V0TWVzc2FnZU5vcm1hbGl6ZWQoKTogSU5vcm1hbGl6ZWRNZXNzYWdlO1xyXG59XHJcblxyXG4vKipcclxuICogQW4gSUNVIG1lc3NhZ2UuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElJQ1VNZXNzYWdlIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIElzIGl0IGEgcGx1cmFsIG1lc3NhZ2U/XHJcbiAgICAgKi9cclxuICAgIGlzUGx1cmFsTWVzc2FnZSgpOiBib29sZWFuO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSXMgaXQgYSBzZWxlY3QgbWVzc2FnZT9cclxuICAgICAqL1xyXG4gICAgaXNTZWxlY3RNZXNzYWdlKCk6IGJvb2xlYW47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbGwgdGhlIHBhcnRzIG9mIHRoZSBtZXNzYWdlLlxyXG4gICAgICogRS5nLiB0aGUgSUNVIG1lc3NhZ2Uge3dvbHZlcywgcGx1cmFsLCA9MCB7bm8gd29sdmVzfSA9MSB7b25lIHdvbGZ9ID0yIHt0d28gd29sdmVzfSBvdGhlciB7YSB3b2xmIHBhY2t9fVxyXG4gICAgICogaGFzIDQgY2F0ZWdvcnkgb2JqZWN0cyB3aXRoIHRoZSBjYXRlZ29yaWVzID0wLCA9MSwgPTIsIG90aGVyLlxyXG4gICAgICovXHJcbiAgICBnZXRDYXRlZ29yaWVzKCk6IElJQ1VNZXNzYWdlQ2F0ZWdvcnlbXTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGljdSBtZXNzYWdlIGNvbnRlbnQgYXMgZm9ybWF0IGRlcGVuZGVudCBuYXRpdmUgc3RyaW5nLlxyXG4gICAgICogVGhpcyBpcywgaG93IGl0IGlzIHN0b3JlZCwgc29tZXRoaW5nIGxpa2UgJ3t4LCBwbHVyYWwsID0wIHsuLn0nXHJcbiAgICAgKi9cclxuICAgIGFzTmF0aXZlU3RyaW5nKCk6IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRyYW5zbGF0ZSBtZXNzYWdlIGFuZCByZXR1cm4gYSBuZXcsIHRyYW5zbGF0ZWQgbWVzc2FnZVxyXG4gICAgICogQHBhcmFtIHRyYW5zbGF0aW9uIHRoZSB0cmFuc2xhdGlvbiAoaGFzaG1hcCBvZiBjYXRlZ29yaWVzIGFuZCB0cmFuc2xhdGlvbnMpLlxyXG4gICAgICogQHJldHVybiBuZXcgbWVzc2FnZSB3aXQgdHJhbnNsYXRlZCBjb250ZW50LlxyXG4gICAgICovXHJcbiAgICB0cmFuc2xhdGUodHJhbnNsYXRpb246IElJQ1VNZXNzYWdlVHJhbnNsYXRpb24pOiBJSUNVTWVzc2FnZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEEgdHJhbnNsYXRpb24gb2YgYW4gSUNVIG1lc3NhZ2UuXHJcbiAqIENvbnRhaW5zIHRoZSB0cmFuc2xhdGlvbiBmb3IgZXZlcnkgY2F0ZWdvcnkuXHJcbiAqIFRoZSB0cmFuc2xhdGlvbiBjYW4gYmUgYSBzdHJpbmcsIHdoaWNoIGlzIHRoZSBub3JtYWxpemVkIGZvcm0gb2YgdGhlIHRyYW5zbGF0aW9uLlxyXG4gKiBPciBpdCBjYW4gYmUgYSBjb21wbGV4IHRyYW5zbGF0aW9uLCB3aGljaCBpcyBmb3IgdGhlIGNhc2Ugb2YgSUNVIG1lc3NhZ2VzIGVtYmVkZGVkIGluIElDVSBtZXNzYWdlcy5cclxuICovXHJcbmV4cG9ydCB0eXBlIElJQ1VNZXNzYWdlVHJhbnNsYXRpb24gPSB7IFtjYXRlZ29yeTogc3RyaW5nXTogc3RyaW5nfElJQ1VNZXNzYWdlVHJhbnNsYXRpb259O1xyXG4iXX0=