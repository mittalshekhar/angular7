{"version":3,"file":"xliff-message-parser.spec.js","sourceRoot":"","sources":["../../../../projects/ngx-i18nsupport-lib/src/impl/xliff-message-parser.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {XliffMessageParser} from './xliff-message-parser';\r\nimport {ParsedMessage} from './parsed-message';\r\nimport {DOMParser} from 'xmldom';\r\nimport {INormalizedMessage} from '../api/index';\r\n/**\r\n * Created by martin on 17.05.2017.\r\n * Testcases for parsing normalized messages to XLIFF 1.2 and vive versa.\r\n */\r\n\r\ndescribe('message parse XLIFF 1.2 test spec', () => {\r\n\r\n    /**\r\n     * Helperfunction to create a parsed message from normalized string.\r\n     * @param normalizedString normalizedString\r\n     * @param sourceMessage sourceMessage\r\n     * @return ParsedMessage\r\n     */\r\n    function parsedMessageFor(normalizedString: string, sourceMessage?: ParsedMessage): ParsedMessage {\r\n        const parser = new XliffMessageParser();\r\n        return parser.parseNormalizedString(normalizedString, sourceMessage);\r\n    }\r\n\r\n    /**\r\n     * Helperfunction to create a parsed message from native xml.\r\n     * @param xmlContent xmlContent\r\n     * @param sourceMessage sourceMessage\r\n     * @return ParsedMessage\r\n     */\r\n    function parsedMessageFromXML(xmlContent: string, sourceMessage?: ParsedMessage): ParsedMessage {\r\n        const parser = new XliffMessageParser();\r\n        return parser.createNormalizedMessageFromXMLString(xmlContent, sourceMessage);\r\n    }\r\n\r\n    /**\r\n     * create normalized message from string, then create one from generated xml.\r\n     * Check that it is the same.\r\n     * @param normalizedMessage normalizedMessage\r\n     */\r\n    function checkToXmlAndBack(normalizedMessage: string) {\r\n        const xml = parsedMessageFor(normalizedMessage).asNativeString();\r\n        expect(parsedMessageFromXML('<source>' + xml + '</source>').asDisplayString()).toBe(normalizedMessage);\r\n    }\r\n\r\n    describe('normalized message to xml', () => {\r\n\r\n        it('should parse plain text', () => {\r\n            const normalizedMessage = 'a text without anything special';\r\n            const parsedMessage = parsedMessageFor(normalizedMessage);\r\n            expect(parsedMessage.asDisplayString()).toBe(normalizedMessage);\r\n            expect(parsedMessage.asNativeString()).toBe(normalizedMessage);\r\n        });\r\n\r\n        it('should parse text with placeholder', () => {\r\n            const normalizedMessage = 'a placeholder: {{0}}';\r\n            const parsedMessage = parsedMessageFor(normalizedMessage);\r\n            expect(parsedMessage.asDisplayString()).toBe(normalizedMessage);\r\n            expect(parsedMessage.asNativeString()).toBe('a placeholder: <x id=\"INTERPOLATION\"/>');\r\n            checkToXmlAndBack(normalizedMessage);\r\n        });\r\n\r\n        it('should parse text with 2 placeholders', () => {\r\n            const normalizedMessage = '{{1}}: a placeholder: {{0}}';\r\n            const parsedMessage = parsedMessageFor(normalizedMessage);\r\n            expect(parsedMessage.asDisplayString()).toBe(normalizedMessage);\r\n            expect(parsedMessage.asNativeString()).toBe('<x id=\"INTERPOLATION_1\"/>: a placeholder: <x id=\"INTERPOLATION\"/>');\r\n            checkToXmlAndBack(normalizedMessage);\r\n        });\r\n\r\n        it('should parse simple bold tag', () => {\r\n            const normalizedMessage = 'a text <b>with</b> a bold text';\r\n            const parsedMessage = parsedMessageFor(normalizedMessage);\r\n            expect(parsedMessage.asDisplayString()).toBe(normalizedMessage);\r\n            expect(parsedMessage.asNativeString())\r\n                .toBe('a text <x id=\"START_BOLD_TEXT\" ctype=\"x-b\" equiv-text=\"&lt;b>\"/>' +\r\n                    'with<x id=\"CLOSE_BOLD_TEXT\" ctype=\"x-b\"/> a bold text');\r\n            checkToXmlAndBack(normalizedMessage);\r\n        });\r\n\r\n        it('should parse simple italic tag', () => {\r\n            const normalizedMessage = 'a text <i>with</i> emphasis';\r\n            const parsedMessage = parsedMessageFor(normalizedMessage);\r\n            expect(parsedMessage.asDisplayString()).toBe(normalizedMessage);\r\n            expect(parsedMessage.asNativeString())\r\n                .toBe('a text <x id=\"START_ITALIC_TEXT\" ctype=\"x-i\" equiv-text=\"&lt;i>\"/>' +\r\n                    'with<x id=\"CLOSE_ITALIC_TEXT\" ctype=\"x-i\"/> emphasis');\r\n            checkToXmlAndBack(normalizedMessage);\r\n        });\r\n\r\n        it('should parse unknown tag', () => {\r\n            const normalizedMessage = 'a text with <strange>strange emphasis</strange>';\r\n            const parsedMessage = parsedMessageFor(normalizedMessage);\r\n            expect(parsedMessage.asDisplayString()).toBe(normalizedMessage);\r\n            expect(parsedMessage.asNativeString())\r\n                .toBe('a text with <x id=\"START_TAG_STRANGE\" ctype=\"x-strange\" equiv-text=\"&lt;strange>\"/>' +\r\n                    'strange emphasis<x id=\"CLOSE_TAG_STRANGE\" ctype=\"x-strange\"/>');\r\n            checkToXmlAndBack(normalizedMessage);\r\n        });\r\n\r\n        it('should parse embedded tags with placeholder inside', () => {\r\n            const normalizedMessage = '<b><i><strange>Placeholder {{0}}</strange></i></b>';\r\n            const parsedMessage = parsedMessageFor(normalizedMessage);\r\n            expect(parsedMessage.asDisplayString()).toBe(normalizedMessage);\r\n            expect(parsedMessage.asNativeString())\r\n                .toBe('<x id=\"START_BOLD_TEXT\" ctype=\"x-b\" equiv-text=\"&lt;b>\"/><x id=\"START_ITALIC_TEXT\"' +\r\n                    ' ctype=\"x-i\" equiv-text=\"&lt;i>\"/><x id=\"START_TAG_STRANGE\" ctype=\"x-strange\" equiv-text=\"&lt;strange>\"/>' +\r\n                    'Placeholder <x id=\"INTERPOLATION\"/><x id=\"CLOSE_TAG_STRANGE\" ctype=\"x-strange\"/><x id=\"CLOSE_ITALIC_TEXT\"' +\r\n                    ' ctype=\"x-i\"/><x id=\"CLOSE_BOLD_TEXT\" ctype=\"x-b\"/>');\r\n            checkToXmlAndBack(normalizedMessage);\r\n        });\r\n\r\n        it('should parse empty tag like <br>', () => {\r\n            const normalizedMessage = 'one line<br>second line';\r\n            const parsedMessage = parsedMessageFor(normalizedMessage);\r\n            expect(parsedMessage.asDisplayString()).toBe(normalizedMessage);\r\n            expect(parsedMessage.asNativeString()).toBe('one line<x id=\"LINE_BREAK\" ctype=\"lb\" equiv-text=\"&lt;br/>\"/>second line');\r\n            checkToXmlAndBack(normalizedMessage);\r\n        });\r\n\r\n        it('should parse ICU Refs', () => {\r\n            const normalizedMessage = 'a text with <ICU-Message-Ref_0/>';\r\n            const parsedMessage = parsedMessageFor(normalizedMessage);\r\n            expect(parsedMessage.asDisplayString()).toBe(normalizedMessage);\r\n            expect(parsedMessage.asNativeString()).toBe('a text with <x id=\"ICU\"/>');\r\n            checkToXmlAndBack(normalizedMessage);\r\n        });\r\n\r\n    });\r\n\r\n    describe('xml to normalized message', () => {\r\n\r\n        it('should parse simple text content', () => {\r\n           const parsedMessage = parsedMessageFromXML('a simple content');\r\n           expect(parsedMessage.asDisplayString()).toBe('a simple content');\r\n        });\r\n\r\n        it('should parse strange tag with placeholder content', () => {\r\n            const parsedMessage = parsedMessageFromXML('Diese Nachricht ist <x id=\"START_TAG_STRANGE\" ctype=\"x-strange\"/>' +\r\n                '<x id=\"INTERPOLATION\"/><x id=\"CLOSE_TAG_STRANGE\" ctype=\"x-strange\"/>');\r\n            expect(parsedMessage.asDisplayString()).toBe('Diese Nachricht ist <strange>{{0}}</strange>');\r\n        });\r\n\r\n        it('should parse embedded tags', () => {\r\n            const parsedMessage = parsedMessageFromXML('Diese Nachricht ist <x id=\"START_BOLD_TEXT\" ctype=\"x-b\"/>' +\r\n                '<x id=\"START_TAG_STRANGE\" ctype=\"x-strange\"/>SEHR WICHTIG<x id=\"CLOSE_TAG_STRANGE\"' +\r\n                ' ctype=\"x-strange\"/><x id=\"CLOSE_BOLD_TEXT\" ctype=\"x-b\"/>');\r\n            expect(parsedMessage.asDisplayString()).toBe('Diese Nachricht ist <b><strange>SEHR WICHTIG</strange></b>');\r\n        });\r\n\r\n        it('should parse complex message with embedded placeholder', () => {\r\n            const parsedMessage = parsedMessageFromXML('<x id=\"START_LINK\" ctype=\"x-a\"/>link1 with placeholder ' +\r\n                '<x id=\"INTERPOLATION\"/><x id=\"CLOSE_LINK\" ctype=\"x-a\"/>');\r\n            expect(parsedMessage.asDisplayString()).toBe('<a>link1 with placeholder {{0}}</a>');\r\n        });\r\n\r\n        it('should throw an error due to not well formed elements <b><strange></b>', () => {\r\n            try {\r\n                const parsedMessage = parsedMessageFromXML('Diese Nachricht ist falsch geschachtelt: ' +\r\n                    '<x id=\"START_BOLD_TEXT\" ctype=\"x-b\"/><x id=\"START_TAG_STRANGE\" ctype=\"x-strange\"/>' +\r\n                    'FALSCH<x id=\"CLOSE_BOLD_TEXT\" ctype=\"x-b\"/><x id=\"CLOSE_TAG_STRANGE\" ctype=\"x-strange\"/>');\r\n                expect(parsedMessage.toString()).toBe('should throw an error');\r\n            } catch (e) {\r\n                expect(e.message).toContain('unexpected close tag b');\r\n            }\r\n        });\r\n\r\n        it('should parse message with embedded ICU message reference', () => {\r\n            const parsedMessage = parsedMessageFromXML('first: <x id=\"ICU\"/>');\r\n            expect(parsedMessage.asDisplayString()).toBe('first: <ICU-Message-Ref_0/>');\r\n        });\r\n\r\n        it('should parse message with 2 embedded ICU message reference', () => {\r\n            const parsedMessage = parsedMessageFromXML('first: <x id=\"ICU\"/>, second <x id=\"ICU_1\"/>');\r\n            expect(parsedMessage.asDisplayString()).toBe('first: <ICU-Message-Ref_0/>, second <ICU-Message-Ref_1/>');\r\n        });\r\n\r\n        it('should set correct placeholer index (issue #84 ngx-i18nsupport) ', () => {\r\n            const messageWith2Indexes = 'New <x id=\"START_TAG_XY\" ctype=\"x-xy\" equiv-text=\"&lt;xy&gt;\"/>' +\r\n                '<x id=\"CLOSE_TAG_XY\" ctype=\"x-xy\" equiv-text=\"&lt;/xy&gt;\"/> was reported by <x id=\"START_TAG_XY_1\" ctype=\"x-xy\"' +\r\n                ' equiv-text=\"&lt;xy&gt;\"/><x id=\"CLOSE_TAG_XY\" ctype=\"x-xy\" equiv-text=\"&lt;/xy&gt;\"/>';\r\n            const parsedMessage = parsedMessageFromXML(messageWith2Indexes);\r\n            const normalizedMessageString = parsedMessage.asDisplayString();\r\n            expect(normalizedMessageString).toBe('New <xy></xy> was reported by <xy id=\"1\"></xy>');\r\n            const translatedMessage: INormalizedMessage = parsedMessage.translate('New <xy></xy> was reported by <xy id=\"1\"></xy>');\r\n            expect(translatedMessage.asNativeString()).toBe('New <x id=\"START_TAG_XY\" ctype=\"x-xy\" equiv-text=\"&lt;xy>\"/>' +\r\n                '<x id=\"CLOSE_TAG_XY\" ctype=\"x-xy\"/> was reported by <x id=\"START_TAG_XY_1\" ctype=\"x-xy\"' +\r\n                ' equiv-text=\"&lt;xy>\"/><x id=\"CLOSE_TAG_XY\" ctype=\"x-xy\"/>');\r\n        });\r\n\r\n        it('should parse simple plural ICU message', () => {\r\n            const parsedMessage =\r\n                parsedMessageFromXML('{VAR_PLURAL, plural, =0 {just now} =1 {one minute ago} other {a few minutes ago} }');\r\n            expect(parsedMessage.asDisplayString()).toBe('<ICU-Message/>');\r\n            expect(parsedMessage.getICUMessage()).toBeTruthy();\r\n            const icuMessage = parsedMessage.getICUMessage();\r\n            expect(icuMessage.getCategories().length).toBe(3);\r\n        });\r\n\r\n        it('should parse plural ICU message with placeholder', () => {\r\n            const parsedMessage = parsedMessageFromXML('{VAR_PLURAL, plural, =0 {just now} =1 {one minute ago}' +\r\n                ' other {<x id=\"INTERPOLATION\" equiv-text=\"{{minutes}}\"/> minutes ago} }');\r\n            expect(parsedMessage.asDisplayString()).toBe('<ICU-Message/>');\r\n            expect(parsedMessage.getICUMessage()).toBeTruthy();\r\n            const icuMessage = parsedMessage.getICUMessage();\r\n            expect(icuMessage.getCategories().length).toBe(3);\r\n            expect(icuMessage.getCategories()[2].getMessageNormalized().asDisplayString()).toBe('{{0}} minutes ago');\r\n        });\r\n\r\n    });\r\n\r\n});\r\n"]}