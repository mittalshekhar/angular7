{"version":3,"file":"xtb-file.spec.js","sourceRoot":"","sources":["../../../../projects/ngx-i18nsupport-lib/src/impl/xtb-file.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {TranslationMessagesFileFactory, ITranslationMessagesFile, ITransUnit, INormalizedMessage,\r\n    STATE_NEW, STATE_FINAL} from '../api/index';\r\nimport * as fs from 'fs';\r\nimport {DOMParser} from 'xmldom';\r\nimport {DOMUtilities} from './dom-utilities';\r\n\r\n/**\r\n * Created by martin on 28.04.2017.\r\n * Testcases for xmb files.\r\n */\r\n\r\ndescribe('ngx-i18nsupport-lib xtb test spec', () => {\r\n\r\n    const SRCDIR = 'test/testdata/i18n/';\r\n\r\n    const ENCODING = 'UTF-8';\r\n\r\n    /**\r\n     * Helper function to read Xtb from 2 Files, the xtb and the master\r\n     */\r\n    function readFile(path: string, masterPath?: string): ITranslationMessagesFile {\r\n        const content = fs.readFileSync(path, ENCODING);\r\n        if (masterPath) {\r\n            const masterContent = fs.readFileSync(masterPath, ENCODING);\r\n            const optionalMaster = {xmlContent: masterContent, path: masterPath, encoding: ENCODING};\r\n            return TranslationMessagesFileFactory.fromFileContent('xtb', content, path, ENCODING, optionalMaster);\r\n        } else {\r\n            return TranslationMessagesFileFactory.fromFileContent('xtb', content, path, ENCODING, null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to read file with unknown format\r\n     */\r\n    function readUnknownFormatFile(path: string, masterPath?: string): ITranslationMessagesFile {\r\n        const content = fs.readFileSync(path, ENCODING);\r\n        if (masterPath) {\r\n            const masterContent = fs.readFileSync(masterPath, ENCODING);\r\n            const optionalMaster = {xmlContent: masterContent, path: masterPath, encoding: ENCODING};\r\n            return TranslationMessagesFileFactory.fromUnknownFormatFileContent(content, path, ENCODING, optionalMaster);\r\n        } else {\r\n            return TranslationMessagesFileFactory.fromUnknownFormatFileContent(content, path, ENCODING, null);\r\n        }\r\n    }\r\n\r\n    describe('xtb format tests', () => {\r\n        const MASTER_1_XMB = SRCDIR + 'ngExtractedMaster1.xmb';\r\n        const MASTER_DE_XMB = SRCDIR + 'ngExtractedMaster1.de.xmb';\r\n        const TRANSLATION_EN_XTB = SRCDIR + 'ngExtractedMaster1.en.xtb';\r\n\r\n        const ID_MY_FIRST = '2047558209369508311'; // an ID from ngExtractedMaster1.xmb\r\n        const ID_WITH_PLACEHOLDER = '9030312858648510700';\r\n        const ID_WITH_MEANING_AND_DESCRIPTION = '3274258156935474372'; // ID with placeholders and source element\r\n        const ID_WITH_NO_SOURCEREFS = 'no_sourceref_test'; // an ID with no source elements\r\n        const ID_WITH_TWO_SOURCEREFS = '4371668001355139802'; // an ID with 2 source elements\r\n        const ID_WITH_LINEBREAK = '7149517499881679376';\r\n        const ID_WITH_TAGS = '7609655310648429098';\r\n        const ID_WITH_TAG_STRANGE = '7610784844464920497';\r\n        const ID_TO_MERGE = 'unittomerge';\r\n        const ID_ICU_PLURAL = '157616252019374389';\r\n        const ID_ICU_SELECT = '4002068837191765530';\r\n        const ID_ICU_SELECT_2 = '4002068837191765531';\r\n        const ID_ICU_EMBEDDED_TAGS = '6710804210857077393';\r\n        const ID_CONTAINS_ICU = '2747218257718409559';\r\n        const ID_CONTAINS_TWO_ICU = 'complextags.icuTwoICU';\r\n        const ID_WITH_BR_TAG = '3944017551463298929';\r\n        const ID_WITH_IMG_TAG = '705837031073461246';\r\n        const ID_UNTRANSLATED_DESCRIPTION = '7499557905529977372';\r\n\r\n        it('should read xtb file', () => {\r\n            const file: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB);\r\n            expect(file).toBeTruthy();\r\n            expect(file.fileType()).toBe('XTB');\r\n            const tu: ITransUnit = file.transUnitWithId(ID_MY_FIRST);\r\n            expect(tu).toBeTruthy();\r\n            expect(tu.sourceContent()).toBeFalsy();\r\n            expect(tu.targetContent()).toBe('My first I18N Application');\r\n        });\r\n\r\n        it('should emit warnings', () => {\r\n            const file: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB);\r\n            expect(file.warnings().length).toBe(1);\r\n            expect(file.warnings()[0]).toContain('msg without \"id\"');\r\n        });\r\n\r\n        it('should emit warnings, if master does not fit', () => {\r\n            const file: ITranslationMessagesFile = readUnknownFormatFile(TRANSLATION_EN_XTB, MASTER_1_XMB);\r\n            expect(file.warnings().length).toBe(2);\r\n            expect(file.warnings()[0]).toContain('msg without \"id\"');\r\n            expect(file.warnings()[1]).toContain('Check if it is the correct master');\r\n        });\r\n\r\n        it('should count units', () => {\r\n            const file: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB);\r\n            expect(file.numberOfTransUnits()).toBe(18);\r\n            expect(file.numberOfTransUnitsWithMissingId()).toBe(1);\r\n            expect(file.numberOfUntranslatedTransUnits()).toBe(file.numberOfTransUnits());\r\n            expect(file.numberOfReviewedTransUnits()).toBe(0);\r\n        });\r\n\r\n        it('should return source language', () => {\r\n            const file: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB);\r\n            expect(file.sourceLanguage()).toBeFalsy(); // no master, no source!\r\n            const file2: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB, MASTER_DE_XMB);\r\n            expect(file2.sourceLanguage()).toBe('de');\r\n        });\r\n\r\n        it('should return target language', () => {\r\n            const file: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB, MASTER_DE_XMB);\r\n            expect(file.targetLanguage()).toBe('en');\r\n        });\r\n\r\n        it('should loop over all trans units', () => {\r\n            const translatedFile: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB, MASTER_DE_XMB);\r\n            let count = 0;\r\n            translatedFile.forEachTransUnit((tu: ITransUnit) => {\r\n                expect(tu).toBeTruthy();\r\n                count++;\r\n            });\r\n            expect(count).toBeGreaterThan(4);\r\n        });\r\n\r\n        it('should ignore change source content', () => {\r\n            const file: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB, MASTER_DE_XMB);\r\n            const tu: ITransUnit = file.transUnitWithId(ID_WITH_BR_TAG);\r\n            expect(tu).toBeTruthy();\r\n            expect(tu.sourceContent()).toBeTruthy();\r\n            const oldValue = tu.sourceContent();\r\n            expect(tu.supportsSetSourceContent()).toBeFalsy();\r\n            const changedMessage = 'a changed source';\r\n            tu.setSourceContent(changedMessage);\r\n            expect(tu.sourceContent()).toBe(oldValue);\r\n        });\r\n\r\n        it('should read meaning and description of tu', () => {\r\n            const file: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB, MASTER_DE_XMB);\r\n            const tu: ITransUnit = file.transUnitWithId(ID_WITH_MEANING_AND_DESCRIPTION);\r\n            expect(tu).toBeTruthy();\r\n            expect(tu.meaning()).toBe('dateservice.monday');\r\n            expect(tu.description()).toBe('ngx-translate');\r\n        });\r\n\r\n        it('should ignore change description', () => {\r\n            const file: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB, MASTER_DE_XMB);\r\n            const tu: ITransUnit = file.transUnitWithId(ID_WITH_MEANING_AND_DESCRIPTION);\r\n            expect(tu).toBeTruthy();\r\n            expect(tu.description()).toBeTruthy();\r\n            const oldValue = tu.description();\r\n            expect(tu.supportsSetDescriptionAndMeaning()).toBeFalsy();\r\n            const changedMessage = 'a changed description';\r\n            tu.setDescription(changedMessage);\r\n            expect(tu.description()).toBe(oldValue);\r\n        });\r\n\r\n        it('should ignore change meaning', () => {\r\n            const file: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB, MASTER_DE_XMB);\r\n            const tu: ITransUnit = file.transUnitWithId(ID_WITH_MEANING_AND_DESCRIPTION);\r\n            expect(tu).toBeTruthy();\r\n            expect(tu.meaning()).toBeTruthy();\r\n            const oldValue = tu.meaning();\r\n            expect(tu.supportsSetDescriptionAndMeaning()).toBeFalsy();\r\n            const changedMessage = 'a changed description';\r\n            tu.setMeaning(changedMessage);\r\n            expect(tu.meaning()).toBe(oldValue);\r\n        });\r\n\r\n        it('should not have notes and should not allow to change them', () => {\r\n            const file: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB, MASTER_DE_XMB);\r\n            const tu: ITransUnit = file.transUnitWithId(ID_WITH_MEANING_AND_DESCRIPTION);\r\n            expect(tu).toBeTruthy();\r\n            expect(tu.notes()).toEqual([]);\r\n            expect(tu.supportsSetNotes()).toBeFalsy();\r\n            tu.setNotes([{from: 'testcase', text: 'a note that should not be stored'}]);\r\n            expect(tu.notes()).toEqual([]);\r\n        });\r\n\r\n        it('should ignore source attribute in sourceContent', () => {\r\n            const file: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB, MASTER_DE_XMB);\r\n            const tu: ITransUnit = file.transUnitWithId(ID_WITH_PLACEHOLDER);\r\n            expect(tu).toBeTruthy();\r\n            expect(tu.sourceContent())\r\n                .toBe('Eintrag <ph name=\"INTERPOLATION\"><ex>INTERPOLATION</ex></ph>' +\r\n                    ' von <ph name=\"INTERPOLATION_1\"><ex>INTERPOLATION_1</ex></ph> hinzugefügt.');\r\n        });\r\n\r\n        it('should return empty source references array if source not set', () => {\r\n            const file: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB, MASTER_DE_XMB);\r\n            const tu: ITransUnit = file.transUnitWithId(ID_WITH_NO_SOURCEREFS);\r\n            expect(tu).toBeTruthy();\r\n            expect(tu.sourceReferences().length).toBe(0);\r\n        });\r\n\r\n        it('should return source reference', () => {\r\n            const file: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB, MASTER_DE_XMB);\r\n            const tu: ITransUnit = file.transUnitWithId(ID_WITH_PLACEHOLDER);\r\n            expect(tu).toBeTruthy();\r\n            expect(tu.sourceReferences().length).toBe(1);\r\n            expect(tu.sourceReferences()[0].sourcefile).toBe('S:/experimente/sampleapp41/src/app/app.component.ts');\r\n            expect(tu.sourceReferences()[0].linenumber).toBe(6);\r\n        });\r\n\r\n        it('should return more than one source references', () => {\r\n            const file: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB, MASTER_DE_XMB);\r\n            const tu: ITransUnit = file.transUnitWithId(ID_WITH_TWO_SOURCEREFS);\r\n            expect(tu).toBeTruthy();\r\n            expect(tu.sourceReferences().length).toBe(2);\r\n            expect(tu.sourceReferences()[0].sourcefile).toBe('S:/experimente/sampleapp41/src/app/app.component.ts');\r\n            expect(tu.sourceReferences()[0].linenumber).toBe(2);\r\n            expect(tu.sourceReferences()[1].sourcefile).toBe('S:/experimente/sampleapp41/src/app/app.component.ts');\r\n            expect(tu.sourceReferences()[1].linenumber).toBe(3);\r\n        });\r\n\r\n        it('should return source reference with more than 1 linenumber', () => {\r\n            // if the text in template spreads over more than 1 line, there is a linenumber format like 7,8 used\r\n            // in this case, linenumber is the first line (here 7).\r\n            const file: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB, MASTER_DE_XMB);\r\n            const tu: ITransUnit = file.transUnitWithId(ID_WITH_LINEBREAK);\r\n            expect(tu).toBeTruthy();\r\n            expect(tu.sourceReferences().length).toBe(1);\r\n            expect(tu.sourceReferences()[0].sourcefile).toBe('S:/experimente/sampleapp41/src/app/app.component.ts');\r\n            expect(tu.sourceReferences()[0].linenumber).toBe(7);\r\n        });\r\n\r\n        it ('should run through 3 different states while translating', () => {\r\n            const file: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB, MASTER_DE_XMB);\r\n            const tu: ITransUnit = file.transUnitWithId(ID_MY_FIRST);\r\n            expect(tu).toBeTruthy();\r\n            expect(tu.targetState()).toBe(STATE_FINAL);\r\n            // TODO state handling xmb to be improved\r\n            tu.translate('');\r\n            expect(tu.targetState()).toBe(STATE_NEW);\r\n            tu.translate('a translation');\r\n            expect(tu.targetState()).toBe(STATE_FINAL);\r\n        });\r\n\r\n        it('should not change source reference, because it is not supported in xtb', () => {\r\n            const file: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB, MASTER_DE_XMB);\r\n            const tu: ITransUnit = file.transUnitWithId(ID_WITH_TWO_SOURCEREFS);\r\n            expect(tu).toBeTruthy();\r\n            expect(tu.sourceReferences().length).toBe(2);\r\n            expect(tu.supportsSetSourceReferences()).toBeFalsy();\r\n            tu.setSourceReferences([{sourcefile: 'x', linenumber: 1}]);\r\n            expect(tu.sourceReferences().length).toBe(2); // shall be unchanged\r\n            const masterContent = {xmlContent: fs.readFileSync(MASTER_DE_XMB, ENCODING), path: MASTER_DE_XMB, encoding: 'UTF-8'};\r\n            const file2: ITranslationMessagesFile =\r\n                TranslationMessagesFileFactory.fromUnknownFormatFileContent(file.editedContent(), null, null, masterContent);\r\n            const tu2: ITransUnit = file2.transUnitWithId(ID_WITH_TWO_SOURCEREFS);\r\n            expect(tu2.sourceReferences().length).toBe(2);\r\n            expect(tu2.sourceReferences()[0].sourcefile).toBe('S:/experimente/sampleapp41/src/app/app.component.ts');\r\n            expect(tu2.sourceReferences()[0].linenumber).toBe(2);\r\n            expect(tu2.sourceReferences()[1].sourcefile).toBe('S:/experimente/sampleapp41/src/app/app.component.ts');\r\n            expect(tu2.sourceReferences()[1].linenumber).toBe(3);\r\n        });\r\n\r\n        it('should not change source reference when translating', () => {\r\n            const file: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB, MASTER_DE_XMB);\r\n            const tu: ITransUnit = file.transUnitWithId(ID_WITH_TWO_SOURCEREFS);\r\n            expect(tu).toBeTruthy();\r\n            expect(tu.sourceReferences().length).toBe(2);\r\n            tu.translate('a translated value');\r\n            const masterContent = {xmlContent: fs.readFileSync(MASTER_DE_XMB, ENCODING), path: MASTER_DE_XMB, encoding: 'UTF-8'};\r\n            const file2: ITranslationMessagesFile =\r\n                TranslationMessagesFileFactory.fromUnknownFormatFileContent(file.editedContent(), null, null, masterContent);\r\n            const tu2: ITransUnit = file2.transUnitWithId(ID_WITH_TWO_SOURCEREFS);\r\n            expect(tu2.targetContent()).toBe('a translated value');\r\n            expect(tu2.sourceReferences().length).toBe(2);\r\n            expect(tu2.sourceReferences()[0].sourcefile).toBe('S:/experimente/sampleapp41/src/app/app.component.ts');\r\n            expect(tu2.sourceReferences()[0].linenumber).toBe(2);\r\n            expect(tu2.sourceReferences()[1].sourcefile).toBe('S:/experimente/sampleapp41/src/app/app.component.ts');\r\n            expect(tu2.sourceReferences()[1].linenumber).toBe(3);\r\n        });\r\n\r\n        it('should normalize placeholders to {{0}} etc', () => {\r\n            const file: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB, MASTER_DE_XMB);\r\n            const tu: ITransUnit = file.transUnitWithId(ID_WITH_PLACEHOLDER);\r\n            expect(tu.targetContentNormalized().asDisplayString()).toBe('Entry {{0}} of {{1}} added.');\r\n        });\r\n\r\n        it('should normalize embedded html tags', () => {\r\n            const file: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB, MASTER_DE_XMB);\r\n            const tu: ITransUnit = file.transUnitWithId(ID_WITH_TAGS);\r\n            expect(tu.targetContentNormalized().asDisplayString()).toBe('This message is <b><strong>VERY IMPORTANT</strong></b>');\r\n        });\r\n\r\n        it('should normalize embedded html tags', () => {\r\n            const file: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB, MASTER_DE_XMB);\r\n            const tu: ITransUnit = file.transUnitWithId(ID_WITH_TAG_STRANGE);\r\n            expect(tu.targetContentNormalized().asDisplayString()).toBe('This message is <strange>{{0}}</strange>');\r\n        });\r\n\r\n        it('should normalize empty html tag br', () => {\r\n            const file: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB, MASTER_DE_XMB);\r\n            const tu: ITransUnit = file.transUnitWithId(ID_WITH_BR_TAG);\r\n            expect(tu.sourceContentNormalized().asDisplayString()).toBe('Dieser Text enthält<br>einen Zeilenumbruch per HTML-br-Element.');\r\n            const translation = tu.sourceContentNormalized().translate('This text contains<br> a linebreak');\r\n            tu.translate(translation);\r\n            expect(tu.targetContent()).toBe('This text contains<ph name=\"LINE_BREAK\"><ex>&lt;br></ex></ph> a linebreak');\r\n        });\r\n\r\n        it('should normalize empty html tag img', () => {\r\n            const file: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB, MASTER_DE_XMB);\r\n            const tu: ITransUnit = file.transUnitWithId(ID_WITH_IMG_TAG);\r\n            expect(tu.sourceContentNormalized().asDisplayString()).toBe('Dieser Text enthält ein Bild <img> mitt en in der Nachricht');\r\n            const translation = tu.sourceContentNormalized().translate('This text contains an img <img> in the message');\r\n            tu.translate(translation);\r\n            expect(tu.targetContent()).toBe('This text contains an img <ph name=\"TAG_IMG\"><ex>&lt;img></ex></ph> in the message');\r\n        });\r\n\r\n        it('should remove a transunit by id', () => {\r\n            const file: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB, MASTER_DE_XMB);\r\n            const tu: ITransUnit = file.transUnitWithId(ID_WITH_TWO_SOURCEREFS);\r\n            expect(tu).toBeTruthy();\r\n            file.removeTransUnitWithId(ID_WITH_TWO_SOURCEREFS);\r\n            const file2: ITranslationMessagesFile =\r\n                TranslationMessagesFileFactory.fromUnknownFormatFileContent(file.editedContent(), null, null);\r\n            const tu2: ITransUnit = file2.transUnitWithId(ID_WITH_TWO_SOURCEREFS);\r\n            expect(tu2).toBeFalsy(); // should not exist any more\r\n        });\r\n\r\n        it ('should copy a transunit from file a to file b', () => {\r\n            const file: ITranslationMessagesFile = readUnknownFormatFile(MASTER_1_XMB);\r\n            const tu: ITransUnit = file.transUnitWithId(ID_TO_MERGE);\r\n            expect(tu).toBeTruthy();\r\n            const targetFile: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB, MASTER_1_XMB);\r\n            expect(targetFile.transUnitWithId(ID_TO_MERGE)).toBeFalsy();\r\n            const newTu = targetFile.importNewTransUnit(tu, false, true);\r\n            expect(targetFile.transUnitWithId(ID_TO_MERGE)).toBeTruthy();\r\n            expect(targetFile.transUnitWithId(ID_TO_MERGE)).toEqual(newTu);\r\n            const changedTargetFile = TranslationMessagesFileFactory.fromUnknownFormatFileContent(targetFile.editedContent(), null, null);\r\n            const targetTu = changedTargetFile.transUnitWithId(ID_TO_MERGE);\r\n            expect(targetTu.targetContent()).toBe('Test for merging units');\r\n        });\r\n\r\n        it ('should not copy source to target for non default lang if not wanted', () => {\r\n            const file: ITranslationMessagesFile = readUnknownFormatFile(MASTER_1_XMB);\r\n            const tu: ITransUnit = file.transUnitWithId(ID_UNTRANSLATED_DESCRIPTION);\r\n            expect(tu).toBeTruthy();\r\n            const isDefaultLang = false;\r\n            const copyContent = false;\r\n            const file2: ITranslationMessagesFile = file.createTranslationFileForLang('xy', null, isDefaultLang, copyContent);\r\n            const changedTargetFile = TranslationMessagesFileFactory.fromUnknownFormatFileContent(file2.editedContent(), null, null);\r\n            const tu2a: ITransUnit = changedTargetFile.transUnitWithId(ID_UNTRANSLATED_DESCRIPTION);\r\n            expect(tu2a.targetContent()).toBeFalsy();\r\n            const tu2: ITransUnit = file2.transUnitWithId(ID_UNTRANSLATED_DESCRIPTION);\r\n            expect(tu2.targetContent()).toBeFalsy();\r\n        });\r\n\r\n        it ('should copy a transunit from file a to file b and leave content blank (xliffmerge #103)', () => {\r\n            const file: ITranslationMessagesFile = readUnknownFormatFile(MASTER_1_XMB);\r\n            const tu: ITransUnit = file.transUnitWithId(ID_TO_MERGE);\r\n            expect(tu).toBeTruthy();\r\n            const targetFile: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB, MASTER_1_XMB);\r\n            expect(targetFile.transUnitWithId(ID_TO_MERGE)).toBeFalsy();\r\n            // flag copyContent set to false here...\r\n            const newTu = targetFile.importNewTransUnit(tu, false, false);\r\n            expect(targetFile.transUnitWithId(ID_TO_MERGE)).toBeTruthy();\r\n            expect(targetFile.transUnitWithId(ID_TO_MERGE)).toEqual(newTu);\r\n            const changedTargetFile = TranslationMessagesFileFactory.fromUnknownFormatFileContent(targetFile.editedContent(), null, null);\r\n            const targetTu = changedTargetFile.transUnitWithId(ID_TO_MERGE);\r\n            expect(targetTu.targetContent()).toBe('');\r\n        });\r\n\r\n        it ('should copy a transunit to a specified position (#53)', () => {\r\n            const file: ITranslationMessagesFile = readUnknownFormatFile(MASTER_1_XMB);\r\n            const tu: ITransUnit = file.transUnitWithId(ID_TO_MERGE);\r\n            expect(tu).toBeTruthy();\r\n            const targetFile: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB, MASTER_1_XMB);\r\n            expect(targetFile.transUnitWithId(ID_TO_MERGE)).toBeFalsy();\r\n            const ID_EXISTING = '4371668001355139802';\r\n            const existingTu = targetFile.transUnitWithId(ID_EXISTING);\r\n            expect(existingTu).toBeTruthy();\r\n            const newTu = targetFile.importNewTransUnit(tu, false, true, existingTu);\r\n            expect(targetFile.transUnitWithId(ID_TO_MERGE)).toBeTruthy();\r\n            expect(targetFile.transUnitWithId(ID_TO_MERGE)).toEqual(newTu);\r\n            const doc: Document = new DOMParser().parseFromString(targetFile.editedContent());\r\n            const existingElem = DOMUtilities.getElementByTagNameAndId(doc, 'translation', ID_EXISTING);\r\n            const newElem = DOMUtilities.getElementByTagNameAndId(doc, 'translation', ID_TO_MERGE);\r\n            expect(DOMUtilities.getElementFollowingSibling(existingElem)).toEqual(newElem);\r\n            const changedTargetFile = TranslationMessagesFileFactory.fromUnknownFormatFileContent(targetFile.editedContent(), null, null);\r\n            const targetTu = changedTargetFile.transUnitWithId(ID_TO_MERGE);\r\n            expect(targetTu.targetContent()).toBe('Test for merging units');\r\n        });\r\n\r\n        it ('should copy a transunit to first position (#53)', () => {\r\n            const file: ITranslationMessagesFile = readUnknownFormatFile(MASTER_1_XMB);\r\n            const tu: ITransUnit = file.transUnitWithId(ID_TO_MERGE);\r\n            expect(tu).toBeTruthy();\r\n            const targetFile: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB, MASTER_1_XMB);\r\n            expect(targetFile.transUnitWithId(ID_TO_MERGE)).toBeFalsy();\r\n            // when importNewTransUnit is called with null, new unit will be added at first position\r\n            const newTu = targetFile.importNewTransUnit(tu, false, true, null);\r\n            expect(targetFile.transUnitWithId(ID_TO_MERGE)).toBeTruthy();\r\n            expect(targetFile.transUnitWithId(ID_TO_MERGE)).toEqual(newTu);\r\n            const doc: Document = new DOMParser().parseFromString(targetFile.editedContent());\r\n            const newElem = DOMUtilities.getElementByTagNameAndId(doc, 'translation', ID_TO_MERGE);\r\n            expect(newElem).toBeTruthy();\r\n            expect(DOMUtilities.getElementPrecedingSibling(newElem)).toBeFalsy();\r\n            const changedTargetFile = TranslationMessagesFileFactory.fromUnknownFormatFileContent(targetFile.editedContent(), null, null);\r\n            const targetTu = changedTargetFile.transUnitWithId(ID_TO_MERGE);\r\n            expect(targetTu.targetContent()).toBe('Test for merging units');\r\n        });\r\n\r\n        it ('should copy a transunit from file a to file b and set a praefix and suffix', () => {\r\n            const file: ITranslationMessagesFile = readUnknownFormatFile(MASTER_1_XMB);\r\n            const tu: ITransUnit = file.transUnitWithId(ID_TO_MERGE);\r\n            expect(tu).toBeTruthy();\r\n            const targetFile: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB, MASTER_1_XMB);\r\n            targetFile.setNewTransUnitTargetPraefix('%%');\r\n            targetFile.setNewTransUnitTargetSuffix('!!');\r\n            expect(targetFile.transUnitWithId(ID_TO_MERGE)).toBeFalsy();\r\n            const newTu = targetFile.importNewTransUnit(tu, false, true);\r\n            expect(targetFile.transUnitWithId(ID_TO_MERGE)).toBeTruthy();\r\n            expect(targetFile.transUnitWithId(ID_TO_MERGE)).toEqual(newTu);\r\n            const changedTargetFile = TranslationMessagesFileFactory.fromUnknownFormatFileContent(targetFile.editedContent(), null, null);\r\n            const targetTu = changedTargetFile.transUnitWithId(ID_TO_MERGE);\r\n            expect(targetTu.targetContent()).toBe('%%Test for merging units!!');\r\n        });\r\n\r\n        it ('should copy a transunit from file a to file b, but should not set a praefix and suffix for ICU messages', () => {\r\n            const file: ITranslationMessagesFile = readUnknownFormatFile(MASTER_1_XMB);\r\n            const tu: ITransUnit = file.transUnitWithId(ID_ICU_SELECT_2);\r\n            expect(tu).toBeTruthy();\r\n            const targetFile: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB, MASTER_1_XMB);\r\n            targetFile.setNewTransUnitTargetPraefix('%%');\r\n            targetFile.setNewTransUnitTargetSuffix('!!');\r\n            expect(targetFile.transUnitWithId(ID_ICU_SELECT_2)).toBeFalsy();\r\n            const newTu = targetFile.importNewTransUnit(tu, false, true);\r\n            expect(targetFile.transUnitWithId(ID_ICU_SELECT_2)).toBeTruthy();\r\n            expect(targetFile.transUnitWithId(ID_ICU_SELECT_2)).toEqual(newTu);\r\n            const changedTargetFile = TranslationMessagesFileFactory.fromUnknownFormatFileContent(targetFile.editedContent(), null, null);\r\n            const targetTu = changedTargetFile.transUnitWithId(ID_ICU_SELECT_2);\r\n            expect(targetTu.targetContent()).not.toContain('%%');\r\n            expect(targetTu.targetContent()).not.toContain('!!');\r\n        });\r\n\r\n        it ('should translate using NormalizedMessage (plain text case, no placeholders, no markup)', () => {\r\n            const file: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB, MASTER_DE_XMB);\r\n            const tu: ITransUnit = file.transUnitWithId(ID_MY_FIRST);\r\n            expect(tu).toBeTruthy();\r\n            const translationString = 'Anwendung läuft';\r\n            // first translate\r\n            const translation: INormalizedMessage = tu.sourceContentNormalized().translate(translationString);\r\n            tu.translate(translation);\r\n            expect(tu.targetContent()).toBe(translationString);\r\n            const file2: ITranslationMessagesFile =\r\n                TranslationMessagesFileFactory.fromUnknownFormatFileContent(file.editedContent(), null, null);\r\n            const tu2: ITransUnit = file2.transUnitWithId(ID_MY_FIRST);\r\n            expect(tu2.targetContentNormalized().asDisplayString()).toBe(translationString);\r\n        });\r\n\r\n        it('should translate plural ICU', () => {\r\n            const file: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB, MASTER_DE_XMB);\r\n            const tu: ITransUnit = file.transUnitWithId(ID_ICU_PLURAL);\r\n            expect(tu).toBeTruthy();\r\n            const normalizedMessage = tu.sourceContentNormalized();\r\n            expect(normalizedMessage.asDisplayString()).toBe('<ICU-Message/>');\r\n            const translatedMessage = normalizedMessage.translateICUMessage({'=0': 'nothing'});\r\n            tu.translate(translatedMessage);\r\n            const icuMessage = tu.targetContentNormalized().getICUMessage();\r\n            expect(icuMessage).toBeTruthy();\r\n            expect(icuMessage.isPluralMessage()).toBeTruthy();\r\n            expect(icuMessage.isSelectMessage()).toBeFalsy();\r\n            expect(icuMessage.getCategories().length).toBe(3);\r\n            expect(icuMessage.getCategories()[0].getCategory()).toBe('=0');\r\n            expect(icuMessage.getCategories()[0].getMessageNormalized().asDisplayString()).toBe('nothing');\r\n            expect(tu.targetContent()).toBe('{VAR_PLURAL, plural, =0 {nothing} =1 {1 Schaf} other {x Schafe}}');\r\n        });\r\n\r\n        it('should translate ICU with embedded tags', () => {\r\n            const file: ITranslationMessagesFile = readFile(TRANSLATION_EN_XTB, MASTER_DE_XMB);\r\n            const tu: ITransUnit = file.transUnitWithId(ID_ICU_EMBEDDED_TAGS);\r\n            const normalizedMessage = tu.sourceContentNormalized();\r\n            expect(normalizedMessage.asDisplayString()).toBe('<ICU-Message/>');\r\n            const translatedMessage = normalizedMessage.translateICUMessage({'wert1': '<em>changed</em>'});\r\n            tu.translate(translatedMessage);\r\n            const icuMessage = tu.targetContentNormalized().getICUMessage();\r\n            expect(icuMessage).toBeTruthy();\r\n            expect(icuMessage.isPluralMessage()).toBeFalsy();\r\n            expect(icuMessage.isSelectMessage()).toBeTruthy();\r\n            expect(icuMessage.getCategories().length).toBe(3);\r\n            expect(icuMessage.getCategories()[1].getCategory()).toBe('wert1');\r\n            expect(icuMessage.getCategories()[1].getMessageNormalized().asDisplayString()).toBe('<em>changed</em>');\r\n            expect(tu.targetContent())\r\n                .toContain('wert1 {<ph name=\"START_EMPHASISED_TEXT\"><ex>' +\r\n                    '&lt;em></ex></ph>changed<ph name=\"CLOSE_EMPHASISED_TEXT\"><ex>&lt;/em></ex></ph>}');\r\n            // TODO find warnings in embedded message, known limitation in the moment.\r\n            //            const warnings = icuMessage.getCategories()[1].getMessageNormalized().validateWarnings();\r\n            //            expect(warnings).toBeTruthy();\r\n        });\r\n\r\n    });\r\n});\r\n"]}