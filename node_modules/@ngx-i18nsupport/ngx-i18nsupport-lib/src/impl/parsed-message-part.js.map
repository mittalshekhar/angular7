{"version":3,"file":"parsed-message-part.js","sourceRoot":"","sources":["../../../../projects/ngx-i18nsupport-lib/src/impl/parsed-message-part.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;AAEH,IAAY,qBAQX;AARD,WAAY,qBAAqB;IAC7B,iEAAI,CAAA;IACJ,+EAAW,CAAA;IACX,2EAAS,CAAA;IACT,uEAAO,CAAA;IACP,2EAAS,CAAA;IACT,+EAAW,CAAA;IACX,uFAAe,CAAA;AACnB,CAAC,EARW,qBAAqB,GAArB,6BAAqB,KAArB,6BAAqB,QAQhC;AAED;IAEI,YAAmB,IAA2B;QAA3B,SAAI,GAAJ,IAAI,CAAuB;IAE9C,CAAC;CASJ;AAbD,8CAaC","sourcesContent":["/**\r\n * Created by martin on 05.05.2017.\r\n * A part of a parsed message.\r\n * Can be a text, a placeholder, a tag\r\n */\r\n\r\nexport enum ParsedMessagePartType {\r\n    TEXT,\r\n    PLACEHOLDER,\r\n    START_TAG,\r\n    END_TAG,\r\n    EMPTY_TAG,\r\n    ICU_MESSAGE,\r\n    ICU_MESSAGE_REF\r\n}\r\n\r\nexport abstract class ParsedMessagePart {\r\n\r\n    constructor(public type: ParsedMessagePartType) {\r\n\r\n    }\r\n\r\n    /**\r\n     * String representation of the part.\r\n     * @param format optional way to determine the exact syntax.\r\n     * Allowed formats are defined as constants NORMALIZATION_FORMAT...\r\n     */\r\n    public abstract asDisplayString(format?: string): string;\r\n\r\n}\r\n"]}