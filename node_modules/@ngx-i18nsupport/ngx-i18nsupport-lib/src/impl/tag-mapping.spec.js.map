{"version":3,"file":"tag-mapping.spec.js","sourceRoot":"","sources":["../../../../projects/ngx-i18nsupport-lib/src/impl/tag-mapping.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {TagMapping} from './tag-mapping';\r\n/**\r\n * Created by roobm on 02.06.2017.\r\n * Testcases for Mapping from normalized tag names to placeholder names.\r\n */\r\n\r\ndescribe('tag mapping spec', () => {\r\n\r\n    it('should map START_EMPHASISED_TEXT to em', () => {\r\n        const placeholderName = 'START_EMPHASISED_TEXT';\r\n        const tagname = new TagMapping().getTagnameFromStartTagPlaceholderName(placeholderName);\r\n        expect(tagname).toBe('em');\r\n    });\r\n\r\n    it('should map START_BOLD_TEXT to b', () => {\r\n        const placeholderName = 'START_BOLD_TEXT';\r\n        const tagname = new TagMapping().getTagnameFromStartTagPlaceholderName(placeholderName);\r\n        expect(tagname).toBe('b');\r\n    });\r\n\r\n    it('should map TAG_IMG to img', () => {\r\n        const placeholderName = 'TAG_IMG';\r\n        const starttagname = new TagMapping().getTagnameFromStartTagPlaceholderName(placeholderName);\r\n        expect(starttagname).toBe(null);\r\n        expect(new TagMapping().isEmptyTagPlaceholderName(placeholderName)).toBeTruthy();\r\n        const emptytagname = new TagMapping().getTagnameFromEmptyTagPlaceholderName(placeholderName);\r\n        expect(emptytagname).toBe('img');\r\n    });\r\n\r\n    it('should map LINE_BREAK to br', () => {\r\n        const placeholderName = 'LINE_BREAK';\r\n        const starttagname = new TagMapping().getTagnameFromStartTagPlaceholderName(placeholderName);\r\n        expect(starttagname).toBe(null);\r\n        expect(new TagMapping().isEmptyTagPlaceholderName(placeholderName)).toBeTruthy();\r\n        const emptytagname = new TagMapping().getTagnameFromEmptyTagPlaceholderName(placeholderName);\r\n        expect(emptytagname).toBe('br');\r\n    });\r\n\r\n    it('should map START_LINK to a', () => {\r\n        const placeholderName = 'START_LINK';\r\n        const tagname = new TagMapping().getTagnameFromStartTagPlaceholderName(placeholderName);\r\n        expect(tagname).toBe('a');\r\n    });\r\n\r\n    it('should map START_LINK_1 to a', () => {\r\n        const placeholderName = 'START_LINK_1';\r\n        const tagname = new TagMapping().getTagnameFromStartTagPlaceholderName(placeholderName);\r\n        expect(tagname).toBe('a');\r\n    });\r\n\r\n    it('should map START_LINK_100 to a', () => {\r\n        const placeholderName = 'START_LINK_100';\r\n        const tagname = new TagMapping().getTagnameFromStartTagPlaceholderName(placeholderName);\r\n        expect(tagname).toBe('a');\r\n    });\r\n\r\n    it('should map CLOSE_TAG_IMG to img', () => {\r\n        const placeholderName = 'CLOSE_TAG_IMG';\r\n        const tagname = new TagMapping().getTagnameFromCloseTagPlaceholderName(placeholderName);\r\n        expect(tagname).toBe('img');\r\n    });\r\n\r\n    it('should map CLOSE_LINK to a', () => {\r\n        const placeholderName = 'CLOSE_LINK';\r\n        const tagname = new TagMapping().getTagnameFromCloseTagPlaceholderName(placeholderName);\r\n        expect(tagname).toBe('a');\r\n    });\r\n\r\n    it('should map CLOSE_LINK_1 to a', () => {\r\n        const placeholderName = 'CLOSE_LINK_1';\r\n        const tagname = new TagMapping().getTagnameFromCloseTagPlaceholderName(placeholderName);\r\n        expect(tagname).toBe('a');\r\n    });\r\n\r\n    it('should map tag a to START_LINK', () => {\r\n        const tagname = 'a';\r\n        const placeholderName = new TagMapping().getStartTagPlaceholderName(tagname, 0);\r\n        expect(placeholderName).toBe('START_LINK');\r\n    });\r\n\r\n    it('should map tag a to START_LINK with index', () => {\r\n        const tagname = 'a';\r\n        const placeholderName = new TagMapping().getStartTagPlaceholderName(tagname, 7);\r\n        expect(placeholderName).toBe('START_LINK_7');\r\n    });\r\n\r\n    it('should map end tag img to CLOSE_TAG_IMG', () => {\r\n        const tagname = 'img';\r\n        const placeholderName = new TagMapping().getCloseTagPlaceholderName(tagname);\r\n        expect(placeholderName).toBe('CLOSE_TAG_IMG');\r\n    });\r\n\r\n    it('should map end tag strange to CLOSE_TAG_STRANGE', () => {\r\n        const tagname = 'strange';\r\n        const placeholderName = new TagMapping().getCloseTagPlaceholderName(tagname);\r\n        expect(placeholderName).toBe('CLOSE_TAG_STRANGE');\r\n    });\r\n\r\n    it('should map end tag b to CLOSE_BOLD_TEXT', () => {\r\n        const tagname = 'b';\r\n        const placeholderName = new TagMapping().getCloseTagPlaceholderName(tagname);\r\n        expect(placeholderName).toBe('CLOSE_BOLD_TEXT');\r\n    });\r\n\r\n    it('should map tag br to LINE_BREAK', () => {\r\n        const tagname = 'br';\r\n        const placeholderName = new TagMapping().getEmptyTagPlaceholderName(tagname, 0);\r\n        expect(placeholderName).toBe('LINE_BREAK');\r\n    });\r\n\r\n    it('should map tag img to TAG_IMG', () => {\r\n        const tagname = 'img';\r\n        const placeholderName = new TagMapping().getEmptyTagPlaceholderName(tagname, 0);\r\n        expect(placeholderName).toBe('TAG_IMG');\r\n    });\r\n\r\n    it('should map tag img to TAG_IMG with index', () => {\r\n        const tagname = 'img';\r\n        const placeholderName = new TagMapping().getEmptyTagPlaceholderName(tagname, 1);\r\n        expect(placeholderName).toBe('TAG_IMG_1');\r\n    });\r\n\r\n    it('should map special ctype for br', () => {\r\n        const tagname = 'br';\r\n        const ctype = new TagMapping().getCtypeForTag(tagname);\r\n        expect(ctype).toBe('lb');\r\n    });\r\n\r\n    it('should map special ctype for img', () => {\r\n        const tagname = 'IMG';\r\n        const ctype = new TagMapping().getCtypeForTag(tagname);\r\n        expect(ctype).toBe('image');\r\n    });\r\n\r\n    it('should map ctype for any tag', () => {\r\n        const tagname = 'strangething';\r\n        const ctype = new TagMapping().getCtypeForTag(tagname);\r\n        expect(ctype).toBe('x-strangething');\r\n    });\r\n\r\n\r\n});\r\n"]}