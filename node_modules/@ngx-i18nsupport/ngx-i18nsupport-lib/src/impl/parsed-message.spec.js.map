{"version":3,"file":"parsed-message.spec.js","sourceRoot":"","sources":["../../../../projects/ngx-i18nsupport-lib/src/impl/parsed-message.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {Xliff2MessageParser} from './xliff2-message-parser';\r\nimport {ParsedMessage} from './parsed-message';\r\nimport {INormalizedMessage} from '../api/index';\r\nimport {IMessageParser} from './i-message-parser';\r\nimport {XliffMessageParser} from './xliff-message-parser';\r\nimport {XmbMessageParser} from './xmb-message-parser';\r\n/**\r\n * Created by martin on 17.05.2017.\r\n * Testcases for parsed messages.\r\n */\r\n\r\ndescribe('normalized message test spec', () => {\r\n\r\n    /**\r\n     * Helperfunction to create a parsed message from normalized string.\r\n     * @param normalizedString normalizedString\r\n     * @param sourceMessage sourceMessage\r\n     * @return new parsed message\r\n     */\r\n    function parsedMessageFor(normalizedString: string, sourceMessage?: ParsedMessage): ParsedMessage {\r\n        const parser = new Xliff2MessageParser(); // parser does not matter here, every format should be the same.\r\n        return parser.parseNormalizedString(normalizedString, sourceMessage);\r\n    }\r\n\r\n    /**\r\n     * Helperfunction to create an ICU Message.\r\n     * @param icuMessageString icuMessageString\r\n     * @param sourceMessage sourceMessage\r\n     * @param parserType (optional) xlf or xlf2 or xmb, default xlf2\r\n     * @return new isu message\r\n     */\r\n    function parsedICUMessage(icuMessageString: string, sourceMessage?: ParsedMessage, parserType?: string): INormalizedMessage {\r\n        let parser: IMessageParser;\r\n        if (sourceMessage) {\r\n            parser = sourceMessage.getParser();\r\n        } else {\r\n            if (parserType) {\r\n                switch (parserType) {\r\n                    case 'xlf':\r\n                        parser = new XliffMessageParser();\r\n                        break;\r\n                    case 'xlf':\r\n                        parser = new XmbMessageParser();\r\n                        break;\r\n                    case 'xlf2':\r\n                        parser = new Xliff2MessageParser();\r\n                        break;\r\n                }\r\n            } else {\r\n                parser = new Xliff2MessageParser(); // parser does not matter here, every format should be the same.\r\n            }\r\n        }\r\n        return parser.parseICUMessage(icuMessageString, sourceMessage);\r\n    }\r\n\r\n    describe('validation test cases ', () => {\r\n\r\n        it('should find nothing wrong with simple text message', () => {\r\n            const translation = 'a text without anything special';\r\n            const parsedMessage = parsedMessageFor(translation);\r\n            expect(parsedMessage.validate()).toBeFalsy();\r\n            expect(parsedMessage.validateWarnings()).toBeFalsy();\r\n        });\r\n\r\n        it('should find nothing wrong with simple text as translation of simple text', () => {\r\n            const original = 'any text';\r\n            const translation = 'a text without anything special';\r\n            const sourceMessage = parsedMessageFor(original);\r\n            const translatedMessage = sourceMessage.translate(translation);\r\n            expect(translatedMessage.validate()).toBeFalsy();\r\n            expect(translatedMessage.validateWarnings()).toBeFalsy();\r\n        });\r\n\r\n        it('should warn if you remove a placeholder in the translation', () => {\r\n            const original = 'a text with placeholder: {{0}}';\r\n            const translation = 'a text without anything special';\r\n            const sourceMessage = parsedMessageFor(original);\r\n            const translatedMessage = sourceMessage.translate(translation);\r\n            expect(translatedMessage.validate()).toBeFalsy();\r\n            const warnings = translatedMessage.validateWarnings();\r\n            expect(warnings).toBeTruthy();\r\n            expect(warnings.placeholderRemoved).toBe('removed placeholder 0 from original message');\r\n        });\r\n\r\n        it('should warn if you remove 2 placeholders in the translation', () => {\r\n            const original = 'a text with placeholders: {{0}} and {{1}}';\r\n            const translation = 'a text without anything special';\r\n            const sourceMessage = parsedMessageFor(original);\r\n            const translatedMessage = sourceMessage.translate(translation);\r\n            expect(translatedMessage.validate()).toBeFalsy();\r\n            const warnings = translatedMessage.validateWarnings();\r\n            expect(warnings).toBeTruthy();\r\n            expect(warnings.placeholderRemoved).toBe('removed placeholders 0, 1 from original message');\r\n        });\r\n\r\n        it('should report an error if you add a new placeholder in the translation', () => {\r\n            const original = 'a text with placeholder: {{0}}';\r\n            const translation = 'a text with 2 placeholders: {{0}} and {{1}}';\r\n            const sourceMessage = parsedMessageFor(original);\r\n            const translatedMessage = sourceMessage.translate(translation);\r\n            expect(translatedMessage.validateWarnings()).toBeFalsy();\r\n            const errors = translatedMessage.validate();\r\n            expect(errors).toBeTruthy();\r\n            expect(errors.placeholderAdded).toBe('added placeholder 1, which is not in original message');\r\n        });\r\n\r\n        it('should report an error if you add 2 new placeholders in the translation', () => {\r\n            const original = 'a text with placeholder: {{0}}';\r\n            const translation = 'a text with 3 placeholders: {{0}} and {{1}} and {{2}}';\r\n            const sourceMessage = parsedMessageFor(original);\r\n            const translatedMessage = sourceMessage.translate(translation);\r\n            expect(translatedMessage.validateWarnings()).toBeFalsy();\r\n            const errors = translatedMessage.validate();\r\n            expect(errors).toBeTruthy();\r\n            expect(errors.placeholderAdded).toBe('added placeholders 1, 2, which are not in original message');\r\n        });\r\n\r\n        it('should not report an error if you duplicate a placeholder in the translation', () => {\r\n            const original = 'a text with placeholder: {{0}}';\r\n            const translation = 'a text with a duplicated placeholders: {{0}} and {{0}}';\r\n            const sourceMessage = parsedMessageFor(original);\r\n            const translatedMessage = sourceMessage.translate(translation);\r\n            expect(translatedMessage.validate()).toBeFalsy();\r\n            expect(translatedMessage.validateWarnings()).toBeFalsy();\r\n        });\r\n\r\n        it('should warn if you remove a tag in the translation', () => {\r\n            const original = 'a <b>bold</b> text';\r\n            const translation = 'a non bold text';\r\n            const sourceMessage = parsedMessageFor(original);\r\n            const translatedMessage = sourceMessage.translate(translation);\r\n            expect(translatedMessage.validate()).toBeFalsy();\r\n            const warnings = translatedMessage.validateWarnings();\r\n            expect(warnings).toBeTruthy();\r\n            expect(warnings.tagRemoved).toBe('removed tag <b> from original message');\r\n        });\r\n\r\n        it('should warn if you add a tag in the translation', () => {\r\n            const original = 'a normal text';\r\n            const translation = 'a <strange>text</strange>';\r\n            const sourceMessage = parsedMessageFor(original);\r\n            const translatedMessage = sourceMessage.translate(translation);\r\n            expect(translatedMessage.validate()).toBeFalsy();\r\n            const warnings = translatedMessage.validateWarnings();\r\n            expect(warnings).toBeTruthy();\r\n            expect(warnings.tagAdded).toBe('added tag <strange>, which is not in original message');\r\n        });\r\n\r\n        it('should warn if you remove an empty tag in the translation', () => {\r\n            const original = 'a text with <br>line break and <img>';\r\n            const translation = 'a text';\r\n            const sourceMessage = parsedMessageFor(original);\r\n            const translatedMessage = sourceMessage.translate(translation);\r\n            expect(translatedMessage.validate()).toBeFalsy();\r\n            const warnings = translatedMessage.validateWarnings();\r\n            expect(warnings).toBeTruthy();\r\n            expect(warnings.tagRemoved).toBe('removed tags <br>, <img> from original message');\r\n        });\r\n\r\n        it('should warn if you add an empty tag in the translation', () => {\r\n            const original = 'a normal text';\r\n            const translation = 'a normal text with <br> line break';\r\n            const sourceMessage = parsedMessageFor(original);\r\n            const translatedMessage = sourceMessage.translate(translation);\r\n            expect(translatedMessage.validate()).toBeFalsy();\r\n            const warnings = translatedMessage.validateWarnings();\r\n            expect(warnings).toBeTruthy();\r\n            expect(warnings.tagAdded).toBe('added tag <br>, which is not in original message');\r\n        });\r\n\r\n        it('should warn if you add 2 empty tags in the translation', () => {\r\n            const original = 'a normal text';\r\n            const translation = 'a normal text with <br> line break and <img>';\r\n            const sourceMessage = parsedMessageFor(original);\r\n            const translatedMessage = sourceMessage.translate(translation);\r\n            expect(translatedMessage.validate()).toBeFalsy();\r\n            const warnings = translatedMessage.validateWarnings();\r\n            expect(warnings).toBeTruthy();\r\n            expect(warnings.tagAdded).toBe('added tags <br>, <img>, which are not in original message');\r\n        });\r\n\r\n        it('should find nothing wrong with text containing line breaks', () => {\r\n            const original = 'a text without\\na line break';\r\n            const translation = 'a text without\\na line break';\r\n            const sourceMessage = parsedMessageFor(original);\r\n            const translatedMessage = sourceMessage.translate(translation);\r\n            expect(translatedMessage.asDisplayString()).toBe(translation);\r\n            expect(translatedMessage.validate()).toBeFalsy();\r\n            expect(translatedMessage.validateWarnings()).toBeFalsy();\r\n        });\r\n\r\n        it('should find nothing wrong in complex nested tags', () => {\r\n            const original = '<span>a <b>bold</b> text</span> and <span>a <b>bold</b> text</span>';\r\n            const translation = '<span>a <b>bold</b> text</span> and <span>a <b>bold</b> text</span>';\r\n            const sourceMessage = parsedMessageFor(original);\r\n            const translatedMessage = sourceMessage.translate(translation);\r\n            expect(translatedMessage.asDisplayString()).toBe(translation);\r\n            expect(translatedMessage.validate()).toBeFalsy();\r\n            expect(translatedMessage.validateWarnings()).toBeFalsy();\r\n        });\r\n\r\n        it('should report an error if you remove an ICU ref in the translation', () => {\r\n            const original = 'a text with <ICU-Message-Ref_0/>';\r\n            const translation = 'a text without icu-ref';\r\n            const sourceMessage = parsedMessageFor(original);\r\n            const translatedMessage = sourceMessage.translate(translation);\r\n            expect(translatedMessage.validateWarnings()).toBeFalsy();\r\n            const errors = translatedMessage.validate();\r\n            expect(errors).toBeTruthy();\r\n            expect(errors.icuMessageRefRemoved).toBe('removed ICU message reference 0 from original message');\r\n        });\r\n\r\n        it('should report an error if you remove 2 ICU refs in the translation', () => {\r\n            const original = 'a text with <ICU-Message-Ref_0/> and <ICU-Message-Ref_1/>';\r\n            const translation = 'a text without icu-ref';\r\n            const sourceMessage = parsedMessageFor(original);\r\n            const translatedMessage = sourceMessage.translate(translation);\r\n            expect(translatedMessage.validateWarnings()).toBeFalsy();\r\n            const errors = translatedMessage.validate();\r\n            expect(errors).toBeTruthy();\r\n            expect(errors.icuMessageRefRemoved).toBe('removed ICU message references 0, 1 from original message');\r\n        });\r\n\r\n        it('should report an error if you add an ICU ref in the translation', () => {\r\n            const original = 'a text with <ICU-Message-Ref_0/>';\r\n            const translation = 'a text with <ICU-Message-Ref_0/> and  <ICU-Message-Ref_1/>';\r\n            const sourceMessage = parsedMessageFor(original);\r\n            const translatedMessage = sourceMessage.translate(translation);\r\n            expect(translatedMessage.validateWarnings()).toBeFalsy();\r\n            const errors = translatedMessage.validate();\r\n            expect(errors).toBeTruthy();\r\n            expect(errors.icuMessageRefAdded).toBe('added ICU message reference 1, which is not in original message');\r\n        });\r\n\r\n        it('should report an error if you add 2 ICU refs in the translation', () => {\r\n            const original = 'a text with <ICU-Message-Ref_0/>';\r\n            const translation = 'a text with <ICU-Message-Ref_0/> and  <ICU-Message-Ref_1/> and  <ICU-Message-Ref_2/>';\r\n            const sourceMessage = parsedMessageFor(original);\r\n            const translatedMessage = sourceMessage.translate(translation);\r\n            expect(translatedMessage.validateWarnings()).toBeFalsy();\r\n            const errors = translatedMessage.validate();\r\n            expect(errors).toBeTruthy();\r\n            expect(errors.icuMessageRefAdded).toBe('added ICU message references 1, 2, which are not in original message');\r\n        });\r\n\r\n        it('should parse tags with - and [0-9]', () => {\r\n            const original = '<h1><md-icon>info</md-icon></h1>';\r\n            const sourceMessage = parsedMessageFor(original);\r\n            expect(sourceMessage.parts().length).toBe(5);\r\n        });\r\n\r\n    });\r\n\r\n    describe('ICU test cases', () => {\r\n        it('should parse ICU plural message', () => {\r\n            const original = '{n, plural, =0 {kein Schaf} =1 {ein Schaf} other {Schafe}}';\r\n            const sourceICUMessage = parsedICUMessage(original);\r\n            expect(sourceICUMessage).toBeTruthy();\r\n            expect(sourceICUMessage.getICUMessage()).toBeTruthy();\r\n            expect(sourceICUMessage.getICUMessage().isPluralMessage()).toBeTruthy();\r\n            expect(sourceICUMessage.getICUMessage().getCategories().length).toBe(3);\r\n            expect(sourceICUMessage.getICUMessage().getCategories()[0].getCategory()).toBe('=0');\r\n            expect(sourceICUMessage.getICUMessage().getCategories()[0].getMessageNormalized().asDisplayString()).toBe('kein Schaf');\r\n            expect(sourceICUMessage.getICUMessage().asNativeString())\r\n                .toBe('{VAR_PLURAL, plural, =0 {kein Schaf} =1 {ein Schaf} other {Schafe}}');\r\n        });\r\n\r\n        it('should parse ICU select message', () => {\r\n            const original = '{gender, select, m {männlich} f {weiblich}}';\r\n            const sourceICUMessage = parsedICUMessage(original);\r\n            expect(sourceICUMessage).toBeTruthy();\r\n            expect(sourceICUMessage.getICUMessage()).toBeTruthy();\r\n            expect(sourceICUMessage.getICUMessage().isPluralMessage()).toBeFalsy();\r\n            expect(sourceICUMessage.getICUMessage().getCategories().length).toBe(2);\r\n            expect(sourceICUMessage.getICUMessage().getCategories()[0].getCategory()).toBe('m');\r\n            expect(sourceICUMessage.getICUMessage().getCategories()[0].getMessageNormalized().asDisplayString()).toBe('männlich');\r\n            expect(sourceICUMessage.getICUMessage().asNativeString()).toBe('{VAR_SELECT, select, m {männlich} f {weiblich}}');\r\n        });\r\n\r\n        it('should parse ICU select message with select or plural in message text', () => {\r\n            const original = '{VAR_SELECT, select, wert0 {value0 selected} wert1 {plural selected} wert2 {anything else selected} }';\r\n            const sourceICUMessage = parsedICUMessage(original);\r\n            expect(sourceICUMessage).toBeTruthy();\r\n            expect(sourceICUMessage.getICUMessage()).toBeTruthy();\r\n            expect(sourceICUMessage.getICUMessage().isPluralMessage()).toBeFalsy();\r\n            expect(sourceICUMessage.getICUMessage().getCategories().length).toBe(3);\r\n            expect(sourceICUMessage.getICUMessage().getCategories()[0].getCategory()).toBe('wert0');\r\n            expect(sourceICUMessage.getICUMessage().getCategories()[0].getMessageNormalized().asDisplayString()).toBe('value0 selected');\r\n        });\r\n\r\n        it('should parse ICU select message with masked } {', () => {\r\n            const original = '{VAR_SELECT, select, wert0 {value0 \\'}\\'\\'\\'\\'{\\'}}';\r\n            const sourceICUMessage = parsedICUMessage(original);\r\n            expect(sourceICUMessage).toBeTruthy();\r\n            expect(sourceICUMessage.getICUMessage()).toBeTruthy();\r\n            expect(sourceICUMessage.getICUMessage().isPluralMessage()).toBeFalsy();\r\n            expect(sourceICUMessage.getICUMessage().getCategories().length).toBe(1);\r\n            expect(sourceICUMessage.getICUMessage().getCategories()[0].getCategory()).toBe('wert0');\r\n            expect(sourceICUMessage.getICUMessage().getCategories()[0].getMessageNormalized().asDisplayString()).toBe('value0 }\\'{');\r\n        });\r\n\r\n        it('should translate ICU plural message', () => {\r\n            const original = '{n, plural, =0 {kein Schaf} =1 {ein Schaf} other {Schafe}}';\r\n            const sourceICUMessage: INormalizedMessage = parsedICUMessage(original);\r\n            expect(sourceICUMessage).toBeTruthy();\r\n            const translatedICUMessage = sourceICUMessage.translateICUMessage({\r\n                '=0': 'no sheep',\r\n                '=1': 'one sheep',\r\n                'other': 'sheep'\r\n            });\r\n            expect(translatedICUMessage.asNativeString()).toBe('{VAR_PLURAL, plural, =0 {no sheep} =1 {one sheep} other {sheep}}');\r\n        });\r\n\r\n        it('should translate ICU plural message with new categories', () => {\r\n            const original = '{n, plural, =0 {kein Schaf} =1 {ein Schaf} other {Schafe}}';\r\n            const sourceICUMessage: INormalizedMessage = parsedICUMessage(original);\r\n            expect(sourceICUMessage).toBeTruthy();\r\n            const translatedICUMessage = sourceICUMessage.translateICUMessage({\r\n                '=0': 'no sheep',\r\n                'many': 'a lot of sheep'\r\n            });\r\n            expect(translatedICUMessage.asNativeString())\r\n                .toBe('{VAR_PLURAL, plural, =0 {no sheep} =1 {ein Schaf} other {Schafe} many {a lot of sheep}}');\r\n        });\r\n\r\n        it('should throw an error when translation of ICU plural message adds invalid category', () => {\r\n            const original = '{n, plural, =0 {kein Schaf} =1 {ein Schaf} other {Schafe}}';\r\n            const sourceICUMessage: INormalizedMessage = parsedICUMessage(original);\r\n            expect(sourceICUMessage).toBeTruthy();\r\n            try {\r\n                const translatedICUMessage = sourceICUMessage.translateICUMessage({\r\n                    '=0': 'no sheep',\r\n                    'verdammtviele': 'a lot of sheep'\r\n                });\r\n                expect('').toBe('should have thrown an error \"invalid category\"');\r\n            } catch (error) {\r\n                expect(error.toString())\r\n                    .toBe('Error: invalid plural category \"verdammtviele\", allowed are =<n> and zero,one,two,few,many,other');\r\n            }\r\n        });\r\n\r\n        it('should translate ICU select message', () => {\r\n            const original = '{gender, select, m {männlich} f {weiblich}}';\r\n            const sourceICUMessage: INormalizedMessage = parsedICUMessage(original);\r\n            expect(sourceICUMessage).toBeTruthy();\r\n            const translatedICUMessage = sourceICUMessage.translateICUMessage({\r\n                'm': 'male',\r\n                'f': 'female'\r\n            });\r\n            expect(translatedICUMessage.asNativeString()).toBe('{VAR_SELECT, select, m {male} f {female}}');\r\n        });\r\n\r\n        it('should partially translate ICU select message', () => {\r\n            const original = '{gender, select, m {männlich} f {weiblich}}';\r\n            const sourceICUMessage: INormalizedMessage = parsedICUMessage(original);\r\n            expect(sourceICUMessage).toBeTruthy();\r\n            // only translate one part of message\r\n            const translatedICUMessage = sourceICUMessage.translateICUMessage({\r\n                'f': 'female'\r\n            });\r\n            expect(translatedICUMessage.asNativeString()).toBe('{VAR_SELECT, select, m {männlich} f {female}}');\r\n        });\r\n\r\n        it('should throw an error if translation of ICU select message contains additional categories', () => {\r\n            const original = '{gender, select, m {männlich} f {weiblich}}';\r\n            const sourceICUMessage: INormalizedMessage = parsedICUMessage(original);\r\n            expect(sourceICUMessage).toBeTruthy();\r\n            try {\r\n                // a category not part of the message\r\n                const translatedICUMessage = sourceICUMessage.translateICUMessage({\r\n                    'u': 'unknown'\r\n                });\r\n                expect('').toBe('should have thrown an error \"unknown category\"');\r\n            } catch (error) {\r\n                expect(error.toString()).toBe('Error: adding a new category not allowed for select messages (\"u\" is not part of message)');\r\n            }\r\n        });\r\n\r\n        it('should parse plural ICU message with placeholder in xlf format', () => {\r\n            const original = '{minutes, plural, =0 {just now} =1 {one minute ago} other {<x id=\"INTERPOLATION\" equiv-text=\"{{minutes}}\"/> minutes ago} }';\r\n            const parsedMessage: INormalizedMessage = parsedICUMessage(original, null, 'xlf');\r\n            expect(parsedMessage.asDisplayString()).toBe('<ICU-Message/>');\r\n            expect(parsedMessage.getICUMessage()).toBeTruthy();\r\n            const icuMessage = parsedMessage.getICUMessage();\r\n            expect(icuMessage.getCategories().length).toBe(3);\r\n            expect(icuMessage.getCategories()[2].getMessageNormalized().asDisplayString()).toBe('{{0}} minutes ago');\r\n        });\r\n\r\n        it('should parse plural ICU message with placeholder in xlf2 format', () => {\r\n            const original = '{minutes, plural, =0 {just now} =1 {one minute ago} other {<ph id=\"3\" equiv=\"INTERPOLATION\" disp=\"{{minutes}}\"/> minutes ago} }';\r\n            const parsedMessage: INormalizedMessage = parsedICUMessage(original);\r\n            expect(parsedMessage.asDisplayString()).toBe('<ICU-Message/>');\r\n            expect(parsedMessage.getICUMessage()).toBeTruthy();\r\n            const icuMessage = parsedMessage.getICUMessage();\r\n            expect(icuMessage.getCategories().length).toBe(3);\r\n            expect(icuMessage.getCategories()[2].getMessageNormalized().asDisplayString()).toBe('{{0}} minutes ago');\r\n        });\r\n\r\n        it('should parse nested ICU messages', () => {\r\n            const original = `{gender_of_host, select, \r\n  female {\r\n    {num_guests, plural, \r\n      =0 {{host} does not give a party.}\r\n      =1 {{host} invites {guest} to her party.}\r\n      =2 {{host} invites {guest} and one other person to her party.}\r\n      other {{host} invites {guest} and # other people to her party.}}}\r\n  male {\r\n    {num_guests, plural, \r\n      =0 {{host} does not give a party.}\r\n      =1 {{host} invites {guest} to his party.}\r\n      =2 {{host} invites {guest} and one other person to his party.}\r\n      other {{host} invites {guest} and # other people to his party.}}}\r\n  other {\r\n    {num_guests, plural, \r\n      =0 {{host} does not give a party.}\r\n      =1 {{host} invites {guest} to their party.}\r\n      =2 {{host} invites {guest} and one other person to their party.}\r\n      other {{host} invites {guest} and # other people to their party.}}}}`;\r\n\r\n            const parsedMessage: INormalizedMessage = parsedICUMessage(original, null, 'xlf');\r\n            expect(parsedMessage.asDisplayString()).toBe('<ICU-Message/>');\r\n            expect(parsedMessage.getICUMessage()).toBeTruthy();\r\n            const outerIcuMessage = parsedMessage.getICUMessage();\r\n            expect(outerIcuMessage.getCategories().length).toBe(3);\r\n            expect(outerIcuMessage.getCategories()[0].getCategory()).toBe('female');\r\n            expect(outerIcuMessage.getCategories()[1].getCategory()).toBe('male');\r\n            expect(outerIcuMessage.getCategories()[2].getCategory()).toBe('other');\r\n            const innerMessage = outerIcuMessage.getCategories()[1].getMessageNormalized();\r\n            expect(innerMessage.asDisplayString()).toBe('<ICU-Message/>');\r\n            const innerIcuMessage = innerMessage.getICUMessage();\r\n            expect(innerIcuMessage).toBeTruthy();\r\n            expect(innerIcuMessage.getCategories().length).toBe(4);\r\n            expect(innerIcuMessage.getCategories()[0].getCategory()).toBe('=0');\r\n            expect(innerIcuMessage.getCategories()[1].getCategory()).toBe('=1');\r\n            expect(innerIcuMessage.getCategories()[2].getCategory()).toBe('=2');\r\n            expect(innerIcuMessage.getCategories()[3].getCategory()).toBe('other');\r\n        });\r\n\r\n        it('should parse nested ICU messages with placeholder', () => {\r\n            const original = `{gender_of_host, select, \r\n  female {\r\n    {num_guests, plural, \r\n      =0 {{host} does not give a party.}\r\n      =1 {{host} invites {guest} to her party.}\r\n      =2 {{host} invites {guest} and one other person to her party.}\r\n      other {{host} invites {guest} and # other people to her party.}}}\r\n  male {\r\n    {num_guests, plural, \r\n      =0 {<x id=\"INTERPOLATION\" equiv-text=\"{{host}}\"/> does not give a party.}\r\n      =1 {<x id=\"INTERPOLATION\" equiv-text=\"{{host}}\"/> invites {guest} to his party.}\r\n      =2 {<x id=\"INTERPOLATION\" equiv-text=\"{{host}}\"/> invites {guest} and one other person to his party.}\r\n      other {<x id=\"INTERPOLATION\" equiv-text=\"{{host}}\"/> invites {guest} and # other people to his party.}}}\r\n  other {\r\n    {num_guests, plural, \r\n      =0 {{host} does not give a party.}\r\n      =1 {{host} invites {guest} to their party.}\r\n      =2 {{host} invites {guest} and one other person to their party.}\r\n      other {{host} invites {guest} and # other people to their party.}}}}`;\r\n\r\n            const parsedMessage: INormalizedMessage = parsedICUMessage(original, null, 'xlf');\r\n            expect(parsedMessage.asDisplayString()).toBe('<ICU-Message/>');\r\n            expect(parsedMessage.getICUMessage()).toBeTruthy();\r\n            const outerIcuMessage = parsedMessage.getICUMessage();\r\n            expect(outerIcuMessage.getCategories().length).toBe(3);\r\n            expect(outerIcuMessage.getCategories()[0].getCategory()).toBe('female');\r\n            expect(outerIcuMessage.getCategories()[1].getCategory()).toBe('male');\r\n            expect(outerIcuMessage.getCategories()[2].getCategory()).toBe('other');\r\n            const innerMessage = outerIcuMessage.getCategories()[1].getMessageNormalized();\r\n            expect(innerMessage.asDisplayString()).toBe('<ICU-Message/>');\r\n            const innerIcuMessage = innerMessage.getICUMessage();\r\n            expect(innerIcuMessage).toBeTruthy();\r\n            expect(innerIcuMessage.getCategories().length).toBe(4);\r\n            expect(innerIcuMessage.getCategories()[0].getCategory()).toBe('=0');\r\n            expect(innerIcuMessage.getCategories()[0].getMessageNormalized().asDisplayString()).toBe('{{0}} does not give a party.');\r\n        });\r\n\r\n    });\r\n});"]}