{"version":3,"file":"i-normalized-message.js","sourceRoot":"","sources":["../../../../projects/ngx-i18nsupport-lib/src/api/i-normalized-message.ts"],"names":[],"mappings":"","sourcesContent":["import {IICUMessage, IICUMessageTranslation} from './i-icu-message';\r\n\r\n/**\r\n * Created by martin on 09.05.2017.\r\n * A normalized message is an abstraction of a translation containing some markup.\r\n * Markup can be placeholders or html tags.\r\n */\r\n\r\nexport type ValidationErrors = {\r\n    [key: string]: any;\r\n    placeholderAdded?: string;\r\n    placeholderRemoved?: string;\r\n    tagAdded?: string;\r\n    tagRemoved?: string;\r\n};\r\n\r\nexport interface INormalizedMessage {\r\n\r\n    /**\r\n     * normalized message as string.\r\n     * @param format optional way to determine the exact syntax.\r\n     * Allowed formats are defined as constants NORMALIZATION_FORMAT...\r\n     */\r\n    asDisplayString(format?: string): string;\r\n\r\n    /**\r\n     * Validate the message.\r\n     * @return null, if ok, error object otherwise.\r\n     */\r\n    validate(): ValidationErrors | null;\r\n\r\n    /**\r\n     * Validate the message, check for warnings only.\r\n     * A warning shows, that the message is acceptable, but misses something.\r\n     * E.g. if you remove a placeholder or a special tag from the original message, this generates a warning.\r\n     * @return null, if no warning, warnings as error object otherwise.\r\n     */\r\n    validateWarnings(): ValidationErrors | null;\r\n\r\n    /**\r\n     * Returns the message content as format dependent native string.\r\n     * Includes all format specific markup like <ph id=\"INTERPOLATION\" ../> ..\r\n     */\r\n    asNativeString(): string;\r\n\r\n    /**\r\n     * If this message is an ICU message, returns its structure.\r\n     * Otherwise this method returns null.\r\n     * @return ICUMessage or null.\r\n     */\r\n    getICUMessage(): IICUMessage;\r\n\r\n    /**\r\n     * Create a new normalized message as a translation of this one.\r\n     * @param normalizedString the translation in normalized form.\r\n     * If the message is an ICUMessage (getICUMessage returns a value), use translateICUMessage instead.\r\n     * @throws an error if normalized string is not well formed.\r\n     * Throws an error too, if this is an ICU message.\r\n     */\r\n    translate(normalizedString: string): INormalizedMessage;\r\n\r\n    /**\r\n     * Create a new normalized icu message as a translation of this one.\r\n     * @param icuTranslation the translation, this is the translation of the ICU message,\r\n     * which is not a string, but a collections of the translations of the different categories.\r\n     * The message must be an ICUMessage (getICUMessage returns a value)\r\n     * @throws an error if normalized string is not well formed.\r\n     * Throws an error too, if this is not an ICU message.\r\n     */\r\n    translateICUMessage(icuTranslation: IICUMessageTranslation): INormalizedMessage;\r\n\r\n    /**\r\n     * Create a new normalized message from a native xml string as a translation of this one.\r\n     * @param nativeString xml string in the format of the underlying file format.\r\n     * Throws an error if native string is not acceptable.\r\n     */\r\n    translateNativeString(nativeString: string): INormalizedMessage;\r\n\r\n}\r\n"]}