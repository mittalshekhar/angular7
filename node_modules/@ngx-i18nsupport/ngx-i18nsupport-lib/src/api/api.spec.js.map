{"version":3,"file":"api.spec.js","sourceRoot":"","sources":["../../../../projects/ngx-i18nsupport-lib/src/api/api.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {TranslationMessagesFileFactory, ITranslationMessagesFile} from './index';\r\nimport * as fs from 'fs';\r\n\r\n/**\r\n * Created by martin on 10.04.2017.\r\n * Testcases for public API.\r\n * Just reading different file formats.\r\n * Detail Tests are in the files for the specific formats.\r\n */\r\n\r\ndescribe('ngx-i18nsupport-lib API test spec', () => {\r\n\r\n    const SRCDIR = 'test/testdata/i18n/';\r\n\r\n    const ENCODING = 'UTF-8';\r\n\r\n    /**\r\n     * Helper function to read Xliff from File\r\n     */\r\n    function readXliff(path: string): ITranslationMessagesFile {\r\n        const content = fs.readFileSync(path, ENCODING);\r\n        return TranslationMessagesFileFactory.fromFileContent('xlf', content, path, ENCODING);\r\n    }\r\n\r\n    /**\r\n     * Helper function to read XLIFF 2.0 from File\r\n     */\r\n    function readXliff2(path: string): ITranslationMessagesFile {\r\n        const content = fs.readFileSync(path, ENCODING);\r\n        return TranslationMessagesFileFactory.fromFileContent('xlf2', content, path, ENCODING);\r\n    }\r\n\r\n    /**\r\n     * Helper function to read Xmb from File\r\n     */\r\n    function readXmb(path: string): ITranslationMessagesFile {\r\n        const content = fs.readFileSync(path, ENCODING);\r\n        return TranslationMessagesFileFactory.fromFileContent('xmb', content, path, ENCODING);\r\n    }\r\n\r\n    /**\r\n     * Helper function to read Xmb from 2 Files, the xmb and the master\r\n     */\r\n    function readXtbWithMaster(path: string, masterPath: string): ITranslationMessagesFile {\r\n        const content = fs.readFileSync(path, ENCODING);\r\n        if (masterPath) {\r\n            const masterContent = fs.readFileSync(masterPath, ENCODING);\r\n            const optionalMaster = {xmlContent: masterContent, path: masterPath, encoding: ENCODING};\r\n            return TranslationMessagesFileFactory.fromFileContent('xtb', content, path, ENCODING, optionalMaster);\r\n        } else {\r\n            return TranslationMessagesFileFactory.fromFileContent('xtb', content, path, ENCODING);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to read translation file of any format\r\n     */\r\n    function readFile(path: string, masterPath?: string): ITranslationMessagesFile {\r\n        const content = fs.readFileSync(path, ENCODING);\r\n        if (masterPath) {\r\n            const masterContent = fs.readFileSync(masterPath, ENCODING);\r\n            const optionalMaster = {xmlContent: masterContent, path: masterPath, encoding: ENCODING};\r\n            return TranslationMessagesFileFactory.fromUnknownFormatFileContent(content, path, ENCODING, optionalMaster);\r\n        } else {\r\n            return TranslationMessagesFileFactory.fromUnknownFormatFileContent(content, path, ENCODING);\r\n        }\r\n    }\r\n\r\n    describe('api tests', () => {\r\n        const MASTER1SRC_XLIFF = SRCDIR + 'ngExtractedMaster1.xlf';\r\n        const MASTER1SRC_XLIFF2 = SRCDIR + 'ngExtractedMaster1.xlf2';\r\n        const MASTER1SRC_XMB = SRCDIR + 'ngExtractedMaster1.xmb';\r\n        const MASTER_DE_XMB = SRCDIR + 'ngExtractedMaster1.de.xmb';\r\n        const MASTER_EN_XTB = SRCDIR + 'ngExtractedMaster1.en.xtb';\r\n\r\n        it('should read xlf file', () => {\r\n            const file: ITranslationMessagesFile = readXliff(MASTER1SRC_XLIFF);\r\n            expect(file).toBeTruthy();\r\n            expect(file.fileType()).toBe('XLIFF 1.2');\r\n        });\r\n\r\n        it('should read XLIFF 2.0 file', () => {\r\n            const file: ITranslationMessagesFile = readXliff2(MASTER1SRC_XLIFF2);\r\n            expect(file).toBeTruthy();\r\n            expect(file.fileType()).toBe('XLIFF 2.0');\r\n        });\r\n\r\n        it('should read xmb file', () => {\r\n            const file: ITranslationMessagesFile = readXmb(MASTER1SRC_XMB);\r\n            expect(file).toBeTruthy();\r\n            expect(file.fileType()).toBe('XMB');\r\n        });\r\n\r\n        it('should read xtb file with master', () => {\r\n            const file: ITranslationMessagesFile = readXtbWithMaster(MASTER_EN_XTB, MASTER_DE_XMB);\r\n            expect(file).toBeTruthy();\r\n            expect(file.fileType()).toBe('XTB');\r\n            expect(file.sourceLanguage()).toBe('de');\r\n            expect(file.targetLanguage()).toBe('en');\r\n        });\r\n\r\n        it('should autodetect file format', () => {\r\n            const file1: ITranslationMessagesFile = readFile(MASTER1SRC_XLIFF);\r\n            expect(file1).toBeTruthy();\r\n            expect(file1.fileType()).toBe('XLIFF 1.2');\r\n            const file2: ITranslationMessagesFile = readFile(MASTER1SRC_XMB);\r\n            expect(file2).toBeTruthy();\r\n            expect(file2.fileType()).toBe('XMB');\r\n            const file3: ITranslationMessagesFile = readFile(MASTER_EN_XTB, MASTER1SRC_XMB);\r\n            expect(file3).toBeTruthy();\r\n            expect(file3.fileType()).toBe('XTB');\r\n            const file4: ITranslationMessagesFile = readFile(MASTER1SRC_XLIFF2);\r\n            expect(file4).toBeTruthy();\r\n            expect(file4.fileType()).toBe('XLIFF 2.0');\r\n        });\r\n\r\n        it ('should detect files with wrong format', () => {\r\n           try {\r\n               TranslationMessagesFileFactory.fromUnknownFormatFileContent('schrott', 'dummyfile', 'UTF-X');\r\n           }  catch (error) {\r\n               expect(error.toString()).toBe('Error: could not identify file format, it is neiter XLIFF (1.2 or 2.0) nor XMB/XTB');\r\n               return;\r\n           }\r\n           fail('expected error not received');\r\n        });\r\n\r\n        it ('should report wrong format as error', () => {\r\n            try {\r\n                TranslationMessagesFileFactory.fromFileContent('schrott', 'schrott', 'dummyfile', 'UTF-X');\r\n            }  catch (error) {\r\n                expect(error.toString()).toBe('Error: oops, unsupported format \"schrott\"');\r\n                return;\r\n            }\r\n            fail('expected error not received');\r\n        });\r\n\r\n        it('should detect error when reading xtb file with no xmb master', () => {\r\n            try {\r\n                readXtbWithMaster(MASTER_EN_XTB, MASTER1SRC_XLIFF);\r\n                fail('expected error not received');\r\n            } catch (error) {\r\n                expect(error.toString()).toContain('An xtb file needs xmb as master file.');\r\n            }\r\n        });\r\n\r\n    });\r\n});\r\n"]}