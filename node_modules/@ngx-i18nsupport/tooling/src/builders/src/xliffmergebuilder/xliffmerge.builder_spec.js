"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const testing_1 = require("@angular-devkit/architect/testing");
const operators_1 = require("rxjs/operators");
describe('xliffmerge.builder', () => {
    /**
     * We are using a test workspace from the test folder.
     * In this workspace the builder is already configured.
     */
    const ngxi18nsupportRoot = core_1.normalize(core_1.join(core_1.normalize(__dirname), '../../../..'));
    const workspaceRoot = core_1.join(ngxi18nsupportRoot, 'src/builders/test/hello-world-app/');
    const host = new testing_1.TestProjectHost(workspaceRoot);
    const xliffmergeTargetSpec = { project: 'hello-world-app', target: 'xliffmerge' };
    function runXliffmergeBuilderOnTestWorkspace(configuration, logger) {
        return testing_1.runTargetSpec(host, xliffmergeTargetSpec, configuration, testing_1.DefaultTimeout, logger);
    }
    beforeEach(done => {
        host.initialize().toPromise().then(done, done.fail);
    });
    afterEach(done => {
        host.restore().toPromise().then(done, done.fail);
    });
    it('should show error when called with illegal profile', (done) => {
        const logger = new testing_1.TestLogger('logger');
        const profileName = 'nonexistentfile';
        runXliffmergeBuilderOnTestWorkspace({ profile: profileName }, logger).pipe(operators_1.tap((buildEvent) => {
            expect(buildEvent.success).toBe(false);
            const msg = 'could not read profile';
            expect(logger.includes(msg)).toBe(true, `msg "${msg}" not found in log`);
            expect(logger.includes(profileName)).toBe(true, `filename "${profileName}" not found in log`);
        })).toPromise().then(done, done.fail);
    });
    it('should show error when called with illegal configuration', (done) => {
        const logger = new testing_1.TestLogger('logger');
        const xlfFileName = 'nonexistentxlffile';
        runXliffmergeBuilderOnTestWorkspace({ xliffmergeOptions: { i18nFile: xlfFileName } }, logger).pipe(operators_1.tap((buildEvent) => {
            expect(buildEvent.success).toBe(false);
            const msg = 'is not readable';
            expect(logger.includes(msg)).toBe(true, `msg "${msg}" not found in log`);
            expect(logger.includes(xlfFileName)).toBe(true, `filename "${xlfFileName}" not found in log`);
        })).toPromise().then(done, done.fail);
    });
    it('should use profile when called with both profile and configuration', (done) => {
        const logger = new testing_1.TestLogger('logger');
        const profileName = 'nonexistentfile';
        const xlfFileName = 'nonexistentxlffile';
        runXliffmergeBuilderOnTestWorkspace({ profile: profileName, xliffmergeOptions: { i18nFile: xlfFileName } }, logger).pipe(operators_1.tap((buildEvent) => {
            expect(buildEvent.success).toBe(false);
            const msg = 'could not read profile';
            expect(logger.includes(msg)).toBe(true, `msg "${msg}" not found in log`);
            expect(logger.includes(profileName)).toBe(true, `filename "${profileName}" not found in log`);
        })).toPromise().then(done, done.fail);
    });
    it('should run successfully with given xliffmergeOptions', (done) => {
        const logger = new testing_1.TestLogger('logger');
        const configuration = {
            xliffmergeOptions: {
                'srcDir': 'src/i18n',
                'genDir': 'src/i18nout',
                languages: ['en', 'de']
            }
        };
        const generatedFileEN = core_1.join(core_1.normalize('src'), 'i18nout', 'messages.en.xlf');
        const generatedFileDE = core_1.join(core_1.normalize('src'), 'i18nout', 'messages.de.xlf');
        runXliffmergeBuilderOnTestWorkspace(configuration, logger).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(true)), operators_1.tap(() => {
            const msg = 'WARNING: please translate file';
            expect(logger.includes(msg)).toBe(true, `msg "${msg}" not found in log`);
            expect(host.scopedSync().exists(generatedFileEN)).toBe(true, `file ${generatedFileEN} not generated`);
            expect(host.scopedSync().exists(generatedFileDE)).toBe(true, `file ${generatedFileDE} not generated`);
        })).toPromise().then(done, done.fail);
    });
    it('should run successfully with options from profile', (done) => {
        const logger = new testing_1.TestLogger('logger');
        const profileContent = {
            xliffmergeOptions: {
                'srcDir': 'src/i18n',
                'genDir': 'src/i18nout',
                languages: ['en', 'de']
            }
        };
        host.scopedSync().write(core_1.join(core_1.normalize('.'), 'xliffmergeconfig.json'), core_1.virtualFs.stringToFileBuffer(JSON.stringify(profileContent)));
        const configuration = {
            profile: 'xliffmergeconfig.json'
        };
        const generatedFileEN = core_1.join(core_1.normalize('src'), 'i18nout', 'messages.en.xlf');
        const generatedFileDE = core_1.join(core_1.normalize('src'), 'i18nout', 'messages.de.xlf');
        runXliffmergeBuilderOnTestWorkspace(configuration, logger).pipe(operators_1.tap((buildEvent) => expect(buildEvent.success).toBe(true)), operators_1.tap(() => {
            const msg = 'WARNING: please translate file';
            expect(logger.includes(msg)).toBe(true, `msg "${msg}" not found in log`);
            expect(host.scopedSync().exists(generatedFileEN)).toBe(true, `file ${generatedFileEN} not generated`);
            expect(host.scopedSync().exists(generatedFileDE)).toBe(true, `file ${generatedFileDE} not generated`);
        })).toPromise().then(done, done.fail);
    });
});
//# sourceMappingURL=xliffmerge.builder_spec.js.map