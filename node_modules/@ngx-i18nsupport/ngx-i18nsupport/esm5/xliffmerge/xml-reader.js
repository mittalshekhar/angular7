/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { FileUtil } from '../common/file-util';
/**
 * Created by martin on 10.03.2017.
 * Helper class to read XMl with a correct encoding.
 */
var XmlReader = /** @class */ (function () {
    function XmlReader() {
    }
    /**
     * Read an xml-File.
     * @param path Path to file
     * @param encoding optional encoding of the xml.
     * This is read from the file, but if you know it before, you can avoid reading the file twice.
     * @return file content and encoding found in the file.
     */
    /**
     * Read an xml-File.
     * @param {?} path Path to file
     * @param {?=} encoding optional encoding of the xml.
     * This is read from the file, but if you know it before, you can avoid reading the file twice.
     * @return {?} file content and encoding found in the file.
     */
    XmlReader.readXmlFileContent = /**
     * Read an xml-File.
     * @param {?} path Path to file
     * @param {?=} encoding optional encoding of the xml.
     * This is read from the file, but if you know it before, you can avoid reading the file twice.
     * @return {?} file content and encoding found in the file.
     */
    function (path, encoding) {
        if (!encoding) {
            encoding = XmlReader.DEFAULT_ENCODING;
        }
        /** @type {?} */
        var content = FileUtil.read(path, encoding);
        /** @type {?} */
        var foundEncoding = XmlReader.encodingFromXml(content);
        if (foundEncoding !== encoding) {
            // read again with the correct encoding
            content = FileUtil.read(path, foundEncoding);
        }
        return {
            content: content,
            encoding: foundEncoding
        };
    };
    /**
     * Read the encoding from the xml.
     * xml File starts with .. encoding=".."
     * @param xmlString xmlString
     * @return encoding
     */
    /**
     * Read the encoding from the xml.
     * xml File starts with .. encoding=".."
     * @param {?} xmlString xmlString
     * @return {?} encoding
     */
    XmlReader.encodingFromXml = /**
     * Read the encoding from the xml.
     * xml File starts with .. encoding=".."
     * @param {?} xmlString xmlString
     * @return {?} encoding
     */
    function (xmlString) {
        /** @type {?} */
        var index = xmlString.indexOf('encoding="');
        if (index < 0) {
            return this.DEFAULT_ENCODING; // default in xml if not explicitly set
        }
        /** @type {?} */
        var endIndex = xmlString.indexOf('"', index + 10);
        return xmlString.substring(index + 10, endIndex);
    };
    XmlReader.DEFAULT_ENCODING = 'UTF-8';
    return XmlReader;
}());
export { XmlReader };
if (false) {
    /** @type {?} */
    XmlReader.DEFAULT_ENCODING;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieG1sLXJlYWRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtaTE4bnN1cHBvcnQvbmd4LWkxOG5zdXBwb3J0LyIsInNvdXJjZXMiOlsieGxpZmZtZXJnZS94bWwtcmVhZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0scUJBQXFCLENBQUM7Ozs7O0FBTTdDO0lBQUE7SUF5Q0EsQ0FBQztJQXRDRzs7Ozs7O09BTUc7Ozs7Ozs7O0lBQ1csNEJBQWtCOzs7Ozs7O0lBQWhDLFVBQWlDLElBQVksRUFBRSxRQUFpQjtRQUM1RCxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ1gsUUFBUSxHQUFHLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQztTQUN6Qzs7WUFDRyxPQUFPLEdBQVcsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDOztZQUM3QyxhQUFhLEdBQUcsU0FBUyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUM7UUFDeEQsSUFBSSxhQUFhLEtBQUssUUFBUSxFQUFFO1lBQzVCLHVDQUF1QztZQUN2QyxPQUFPLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsYUFBYSxDQUFDLENBQUM7U0FDaEQ7UUFDRCxPQUFPO1lBQ0gsT0FBTyxFQUFFLE9BQU87WUFDaEIsUUFBUSxFQUFFLGFBQWE7U0FDMUIsQ0FBQztJQUNOLENBQUM7SUFFRDs7Ozs7T0FLRzs7Ozs7OztJQUNZLHlCQUFlOzs7Ozs7SUFBOUIsVUFBK0IsU0FBaUI7O1lBQ3RDLEtBQUssR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQztRQUM3QyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7WUFDWCxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLHVDQUF1QztTQUN4RTs7WUFDSyxRQUFRLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNuRCxPQUFPLFNBQVMsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBdENNLDBCQUFnQixHQUFHLE9BQU8sQ0FBQztJQXdDdEMsZ0JBQUM7Q0FBQSxBQXpDRCxJQXlDQztTQXpDWSxTQUFTOzs7SUFDbEIsMkJBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtGaWxlVXRpbH0gZnJvbSAnLi4vY29tbW9uL2ZpbGUtdXRpbCc7XHJcbi8qKlxyXG4gKiBDcmVhdGVkIGJ5IG1hcnRpbiBvbiAxMC4wMy4yMDE3LlxyXG4gKiBIZWxwZXIgY2xhc3MgdG8gcmVhZCBYTWwgd2l0aCBhIGNvcnJlY3QgZW5jb2RpbmcuXHJcbiAqL1xyXG5cclxuZXhwb3J0IGNsYXNzIFhtbFJlYWRlciB7XHJcbiAgICBzdGF0aWMgREVGQVVMVF9FTkNPRElORyA9ICdVVEYtOCc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkIGFuIHhtbC1GaWxlLlxyXG4gICAgICogQHBhcmFtIHBhdGggUGF0aCB0byBmaWxlXHJcbiAgICAgKiBAcGFyYW0gZW5jb2Rpbmcgb3B0aW9uYWwgZW5jb2Rpbmcgb2YgdGhlIHhtbC5cclxuICAgICAqIFRoaXMgaXMgcmVhZCBmcm9tIHRoZSBmaWxlLCBidXQgaWYgeW91IGtub3cgaXQgYmVmb3JlLCB5b3UgY2FuIGF2b2lkIHJlYWRpbmcgdGhlIGZpbGUgdHdpY2UuXHJcbiAgICAgKiBAcmV0dXJuIGZpbGUgY29udGVudCBhbmQgZW5jb2RpbmcgZm91bmQgaW4gdGhlIGZpbGUuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZFhtbEZpbGVDb250ZW50KHBhdGg6IHN0cmluZywgZW5jb2Rpbmc/OiBzdHJpbmcpOiB7Y29udGVudDogc3RyaW5nLCBlbmNvZGluZzogc3RyaW5nfSB7XHJcbiAgICAgICAgaWYgKCFlbmNvZGluZykge1xyXG4gICAgICAgICAgICBlbmNvZGluZyA9IFhtbFJlYWRlci5ERUZBVUxUX0VOQ09ESU5HO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgY29udGVudDogc3RyaW5nID0gRmlsZVV0aWwucmVhZChwYXRoLCBlbmNvZGluZyk7XHJcbiAgICAgICAgY29uc3QgZm91bmRFbmNvZGluZyA9IFhtbFJlYWRlci5lbmNvZGluZ0Zyb21YbWwoY29udGVudCk7XHJcbiAgICAgICAgaWYgKGZvdW5kRW5jb2RpbmcgIT09IGVuY29kaW5nKSB7XHJcbiAgICAgICAgICAgIC8vIHJlYWQgYWdhaW4gd2l0aCB0aGUgY29ycmVjdCBlbmNvZGluZ1xyXG4gICAgICAgICAgICBjb250ZW50ID0gRmlsZVV0aWwucmVhZChwYXRoLCBmb3VuZEVuY29kaW5nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY29udGVudDogY29udGVudCxcclxuICAgICAgICAgICAgZW5jb2Rpbmc6IGZvdW5kRW5jb2RpbmdcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVhZCB0aGUgZW5jb2RpbmcgZnJvbSB0aGUgeG1sLlxyXG4gICAgICogeG1sIEZpbGUgc3RhcnRzIHdpdGggLi4gZW5jb2Rpbmc9XCIuLlwiXHJcbiAgICAgKiBAcGFyYW0geG1sU3RyaW5nIHhtbFN0cmluZ1xyXG4gICAgICogQHJldHVybiBlbmNvZGluZ1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHN0YXRpYyBlbmNvZGluZ0Zyb21YbWwoeG1sU3RyaW5nOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IGluZGV4ID0geG1sU3RyaW5nLmluZGV4T2YoJ2VuY29kaW5nPVwiJyk7XHJcbiAgICAgICAgaWYgKGluZGV4IDwgMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ERUZBVUxUX0VOQ09ESU5HOyAvLyBkZWZhdWx0IGluIHhtbCBpZiBub3QgZXhwbGljaXRseSBzZXRcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZW5kSW5kZXggPSB4bWxTdHJpbmcuaW5kZXhPZignXCInLCBpbmRleCArIDEwKTsgLy8gMTAgPSBsZW5ndGggb2YgJ2VuY29kaW5nPVwiJ1xyXG4gICAgICAgIHJldHVybiB4bWxTdHJpbmcuc3Vic3RyaW5nKGluZGV4ICsgMTAsIGVuZEluZGV4KTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbiJdfQ==