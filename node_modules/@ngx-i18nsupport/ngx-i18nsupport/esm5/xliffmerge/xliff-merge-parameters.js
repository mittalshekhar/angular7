/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/**
 * Created by martin on 17.02.2017.
 * Collection of all parameters used by the tool.
 * The parameters are read form the profile or defaults are used.
 */
import * as fs from 'fs';
import { XliffMergeError } from './xliff-merge-error';
import { format } from 'util';
import { isArray, isNullOrUndefined } from '../common/util';
import { FileUtil } from '../common/file-util';
import { NgxTranslateExtractor } from './ngx-translate-extractor';
import { dirname, isAbsolute, join } from 'path';
/** @type {?} */
var PROFILE_CANDIDATES = ['package.json', '.angular-cli.json'];
var XliffMergeParameters = /** @class */ (function () {
    function XliffMergeParameters() {
        this.errorsFound = [];
        this.warningsFound = [];
    }
    /**
     * Create Parameters.
     * @param options command options
     * @param profileContent given profile (if not, it is read from the profile path from options).
     */
    /**
     * Create Parameters.
     * @param {?} options command options
     * @param {?=} profileContent given profile (if not, it is read from the profile path from options).
     * @return {?}
     */
    XliffMergeParameters.createFromOptions = /**
     * Create Parameters.
     * @param {?} options command options
     * @param {?=} profileContent given profile (if not, it is read from the profile path from options).
     * @return {?}
     */
    function (options, profileContent) {
        /** @type {?} */
        var parameters = new XliffMergeParameters();
        parameters.configure(options, profileContent);
        return parameters;
    };
    /**
     * Read potential profile.
     * To be a candidate, file must exist and contain property "xliffmergeOptions".
     * @param profilePath path of profile
     * @return parsed content of file or null, if file does not exist or is not a profile candidate.
     */
    /**
     * Read potential profile.
     * To be a candidate, file must exist and contain property "xliffmergeOptions".
     * @param {?} profilePath path of profile
     * @return {?} parsed content of file or null, if file does not exist or is not a profile candidate.
     */
    XliffMergeParameters.readProfileCandidate = /**
     * Read potential profile.
     * To be a candidate, file must exist and contain property "xliffmergeOptions".
     * @param {?} profilePath path of profile
     * @return {?} parsed content of file or null, if file does not exist or is not a profile candidate.
     */
    function (profilePath) {
        /** @type {?} */
        var content;
        try {
            content = fs.readFileSync(profilePath, 'UTF-8');
        }
        catch (err) {
            return null;
        }
        /** @type {?} */
        var parsedContent = JSON.parse(content);
        if (parsedContent && parsedContent.xliffmergeOptions) {
            return parsedContent;
        }
        else {
            return null;
        }
    };
    /**
     * Initialize me from the profile content.
     * (public only for test usage).
     * @param options options given at runtime via command line
     * @param profileContent if null, read it from profile.
     */
    /**
     * Initialize me from the profile content.
     * (public only for test usage).
     * @param {?} options options given at runtime via command line
     * @param {?=} profileContent if null, read it from profile.
     * @return {?}
     */
    XliffMergeParameters.prototype.configure = /**
     * Initialize me from the profile content.
     * (public only for test usage).
     * @param {?} options options given at runtime via command line
     * @param {?=} profileContent if null, read it from profile.
     * @return {?}
     */
    function (options, profileContent) {
        this.errorsFound = [];
        this.warningsFound = [];
        if (!profileContent) {
            profileContent = this.readProfile(options);
        }
        /** @type {?} */
        var validProfile = (!!profileContent);
        if (options.quiet) {
            this._quiet = options.quiet;
        }
        if (options.verbose) {
            this._verbose = options.verbose;
        }
        if (validProfile) {
            this.initializeFromConfig(profileContent);
            // if languages are given as parameters, they ovveride everything said in profile
            if (!!options.languages && options.languages.length > 0) {
                this._languages = options.languages;
                if (!this._defaultLanguage) {
                    this._defaultLanguage = this._languages[0];
                }
            }
            this.checkParameters();
        }
    };
    /**
     * Read profile.
     * @param options program options
     * @return the read profile (empty, if none, null if errors)
     */
    /**
     * Read profile.
     * @param {?} options program options
     * @return {?} the read profile (empty, if none, null if errors)
     */
    XliffMergeParameters.prototype.readProfile = /**
     * Read profile.
     * @param {?} options program options
     * @return {?} the read profile (empty, if none, null if errors)
     */
    function (options) {
        var e_1, _a;
        /** @type {?} */
        var profilePath = options.profilePath;
        if (!profilePath) {
            try {
                for (var PROFILE_CANDIDATES_1 = tslib_1.__values(PROFILE_CANDIDATES), PROFILE_CANDIDATES_1_1 = PROFILE_CANDIDATES_1.next(); !PROFILE_CANDIDATES_1_1.done; PROFILE_CANDIDATES_1_1 = PROFILE_CANDIDATES_1.next()) {
                    var configfilename = PROFILE_CANDIDATES_1_1.value;
                    /** @type {?} */
                    var profile = XliffMergeParameters.readProfileCandidate(configfilename);
                    if (profile) {
                        this.usedProfilePath = configfilename;
                        return profile;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (PROFILE_CANDIDATES_1_1 && !PROFILE_CANDIDATES_1_1.done && (_a = PROFILE_CANDIDATES_1.return)) _a.call(PROFILE_CANDIDATES_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return {};
        }
        /** @type {?} */
        var content;
        try {
            content = fs.readFileSync(profilePath, 'UTF-8');
        }
        catch (err) {
            this.errorsFound.push(new XliffMergeError('could not read profile "' + profilePath + '"'));
            return null;
        }
        this.usedProfilePath = profilePath;
        /** @type {?} */
        var profileContent = JSON.parse(content);
        // replace all pathes in options by absolute paths
        /** @type {?} */
        var xliffmergeOptions = profileContent.xliffmergeOptions;
        xliffmergeOptions.srcDir = this.adjustPathToProfilePath(profilePath, xliffmergeOptions.srcDir);
        xliffmergeOptions.genDir = this.adjustPathToProfilePath(profilePath, xliffmergeOptions.genDir);
        xliffmergeOptions.apikeyfile = this.adjustPathToProfilePath(profilePath, xliffmergeOptions.apikeyfile);
        return profileContent;
    };
    /**
     * @param {?} profilePath
     * @param {?} pathToAdjust
     * @return {?}
     */
    XliffMergeParameters.prototype.adjustPathToProfilePath = /**
     * @param {?} profilePath
     * @param {?} pathToAdjust
     * @return {?}
     */
    function (profilePath, pathToAdjust) {
        if (!pathToAdjust || isAbsolute(pathToAdjust)) {
            return pathToAdjust;
        }
        return join(dirname(profilePath), pathToAdjust).replace(/\\/g, '/');
    };
    /**
     * @param {?} profileContent
     * @return {?}
     */
    XliffMergeParameters.prototype.initializeFromConfig = /**
     * @param {?} profileContent
     * @return {?}
     */
    function (profileContent) {
        if (!profileContent) {
            return;
        }
        /** @type {?} */
        var profile = profileContent.xliffmergeOptions;
        if (profile) {
            if (!isNullOrUndefined(profile.quiet)) {
                this._quiet = profile.quiet;
            }
            if (!isNullOrUndefined(profile.verbose)) {
                this._verbose = profile.verbose;
            }
            if (!isNullOrUndefined(profile.allowIdChange)) {
                this._allowIdChange = profile.allowIdChange;
            }
            if (profile.defaultLanguage) {
                this._defaultLanguage = profile.defaultLanguage;
            }
            if (profile.languages) {
                this._languages = profile.languages;
            }
            if (profile.srcDir) {
                this._srcDir = profile.srcDir;
            }
            if (profile.angularCompilerOptions) {
                if (profile.angularCompilerOptions.genDir) {
                    this._genDir = profile.angularCompilerOptions.genDir;
                }
            }
            if (profile.genDir) {
                // this must be after angularCompilerOptions to be preferred
                this._genDir = profile.genDir;
            }
            if (profile.i18nBaseFile) {
                this._i18nBaseFile = profile.i18nBaseFile;
            }
            if (profile.i18nFile) {
                this._i18nFile = profile.i18nFile;
            }
            if (profile.i18nFormat) {
                this._i18nFormat = profile.i18nFormat;
            }
            if (profile.encoding) {
                this._encoding = profile.encoding;
            }
            if (!isNullOrUndefined(profile.removeUnusedIds)) {
                this._removeUnusedIds = profile.removeUnusedIds;
            }
            if (!isNullOrUndefined(profile.supportNgxTranslate)) {
                this._supportNgxTranslate = profile.supportNgxTranslate;
            }
            if (!isNullOrUndefined(profile.ngxTranslateExtractionPattern)) {
                this._ngxTranslateExtractionPattern = profile.ngxTranslateExtractionPattern;
            }
            if (!isNullOrUndefined(profile.useSourceAsTarget)) {
                this._useSourceAsTarget = profile.useSourceAsTarget;
            }
            if (!isNullOrUndefined(profile.targetPraefix)) {
                this._targetPraefix = profile.targetPraefix;
            }
            if (!isNullOrUndefined(profile.targetSuffix)) {
                this._targetSuffix = profile.targetSuffix;
            }
            if (!isNullOrUndefined(profile.autotranslate)) {
                this._autotranslate = profile.autotranslate;
            }
            if (!isNullOrUndefined(profile.beautifyOutput)) {
                this._beautifyOutput = profile.beautifyOutput;
            }
            if (!isNullOrUndefined(profile.preserveOrder)) {
                this._preserveOrder = profile.preserveOrder;
            }
            if (!isNullOrUndefined(profile.apikey)) {
                this._apikey = profile.apikey;
            }
            if (!isNullOrUndefined(profile.apikeyfile)) {
                this._apikeyfile = profile.apikeyfile;
            }
        }
        else {
            this.warningsFound.push('did not find "xliffmergeOptions" in profile, using defaults');
        }
    };
    /**
     * Check all Parameters, wether they are complete and consistent.
     * if something is wrong with the parameters, it is collected in errorsFound.
     */
    /**
     * Check all Parameters, wether they are complete and consistent.
     * if something is wrong with the parameters, it is collected in errorsFound.
     * @return {?}
     */
    XliffMergeParameters.prototype.checkParameters = /**
     * Check all Parameters, wether they are complete and consistent.
     * if something is wrong with the parameters, it is collected in errorsFound.
     * @return {?}
     */
    function () {
        var _this = this;
        this.checkLanguageSyntax(this.defaultLanguage());
        if (this.languages().length === 0) {
            this.errorsFound.push(new XliffMergeError('no languages specified'));
        }
        this.languages().forEach(function (lang) {
            _this.checkLanguageSyntax(lang);
        });
        /** @type {?} */
        var stats;
        /** @type {?} */
        var err;
        // srcDir should exists
        try {
            stats = fs.statSync(this.srcDir());
        }
        catch (e) {
            err = e;
        }
        if (!!err || !stats.isDirectory()) {
            this.errorsFound.push(new XliffMergeError('srcDir "' + this.srcDir() + '" is not a directory'));
        }
        // genDir should exists
        try {
            stats = fs.statSync(this.genDir());
        }
        catch (e) {
            err = e;
        }
        if (!!err || !stats.isDirectory()) {
            this.errorsFound.push(new XliffMergeError('genDir "' + this.genDir() + '" is not a directory'));
        }
        // master file MUST exist
        try {
            fs.accessSync(this.i18nFile(), fs.constants.R_OK);
        }
        catch (err) {
            this.errorsFound.push(new XliffMergeError('i18nFile "' + this.i18nFile() + '" is not readable'));
        }
        // i18nFormat must be xlf xlf2 or xmb
        if (!(this.i18nFormat() === 'xlf' || this.i18nFormat() === 'xlf2' || this.i18nFormat() === 'xmb')) {
            this.errorsFound.push(new XliffMergeError('i18nFormat "' + this.i18nFormat() + '" invalid, must be "xlf" or "xlf2" or "xmb"'));
        }
        // autotranslate requires api key
        if (this.autotranslate() && !this.apikey()) {
            this.errorsFound.push(new XliffMergeError('autotranslate requires an API key, please set one'));
        }
        // autotranslated languages must be in list of all languages
        this.autotranslatedLanguages().forEach(function (lang) {
            if (_this.languages().indexOf(lang) < 0) {
                _this.errorsFound.push(new XliffMergeError('autotranslate language "' + lang + '" is not in list of languages'));
            }
            if (lang === _this.defaultLanguage()) {
                _this.errorsFound.push(new XliffMergeError('autotranslate language "' + lang + '" cannot be translated, because it is the source language'));
            }
        });
        // ngx translate pattern check
        if (this.supportNgxTranslate()) {
            /** @type {?} */
            var checkResult = NgxTranslateExtractor.checkPattern(this.ngxTranslateExtractionPattern());
            if (!isNullOrUndefined(checkResult)) {
                this.errorsFound.push(new XliffMergeError('ngxTranslateExtractionPattern "' + this.ngxTranslateExtractionPattern() + '": ' + checkResult));
            }
        }
        // targetPraefix and targetSuffix check
        if (!this.useSourceAsTarget()) {
            if (this.targetPraefix().length > 0) {
                this.warningsFound.push('configured targetPraefix "' + this.targetPraefix() + '" will not be used because "useSourceAsTarget" is disabled"');
            }
            if (this.targetSuffix().length > 0) {
                this.warningsFound.push('configured targetSuffix "' + this.targetSuffix() + '" will not be used because "useSourceAsTarget" is disabled"');
            }
        }
    };
    /**
     * Check syntax of language.
     * Must be compatible with XML Schema type xsd:language.
     * Pattern: [a-zA-Z]{1,8}((-|_)[a-zA-Z0-9]{1,8})*
     * @param lang language to check
     */
    /**
     * Check syntax of language.
     * Must be compatible with XML Schema type xsd:language.
     * Pattern: [a-zA-Z]{1,8}((-|_)[a-zA-Z0-9]{1,8})*
     * @param {?} lang language to check
     * @return {?}
     */
    XliffMergeParameters.prototype.checkLanguageSyntax = /**
     * Check syntax of language.
     * Must be compatible with XML Schema type xsd:language.
     * Pattern: [a-zA-Z]{1,8}((-|_)[a-zA-Z0-9]{1,8})*
     * @param {?} lang language to check
     * @return {?}
     */
    function (lang) {
        /** @type {?} */
        var pattern = /^[a-zA-Z]{1,8}([-_][a-zA-Z0-9]{1,8})*$/;
        if (!pattern.test(lang)) {
            this.errorsFound.push(new XliffMergeError('language "' + lang + '" is not valid'));
        }
    };
    /**
     * @return {?}
     */
    XliffMergeParameters.prototype.allowIdChange = /**
     * @return {?}
     */
    function () {
        return (isNullOrUndefined(this._allowIdChange)) ? false : this._allowIdChange;
    };
    /**
     * @return {?}
     */
    XliffMergeParameters.prototype.verbose = /**
     * @return {?}
     */
    function () {
        return (isNullOrUndefined(this._verbose)) ? false : this._verbose;
    };
    /**
     * @return {?}
     */
    XliffMergeParameters.prototype.quiet = /**
     * @return {?}
     */
    function () {
        return (isNullOrUndefined(this._quiet)) ? false : this._quiet;
    };
    /**
     * Debug output all parameters to commandOutput.
     */
    /**
     * Debug output all parameters to commandOutput.
     * @param {?} commandOutput
     * @return {?}
     */
    XliffMergeParameters.prototype.showAllParameters = /**
     * Debug output all parameters to commandOutput.
     * @param {?} commandOutput
     * @return {?}
     */
    function (commandOutput) {
        var e_2, _a;
        commandOutput.debug('xliffmerge Used Parameters:');
        commandOutput.debug('usedProfilePath:\t"%s"', this.usedProfilePath);
        commandOutput.debug('defaultLanguage:\t"%s"', this.defaultLanguage());
        commandOutput.debug('srcDir:\t"%s"', this.srcDir());
        commandOutput.debug('genDir:\t"%s"', this.genDir());
        commandOutput.debug('i18nBaseFile:\t"%s"', this.i18nBaseFile());
        commandOutput.debug('i18nFile:\t"%s"', this.i18nFile());
        commandOutput.debug('languages:\t%s', this.languages());
        try {
            for (var _b = tslib_1.__values(this.languages()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var language = _c.value;
                commandOutput.debug('outputFile[%s]:\t%s', language, this.generatedI18nFile(language));
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        commandOutput.debug('removeUnusedIds:\t%s', this.removeUnusedIds());
        commandOutput.debug('supportNgxTranslate:\t%s', this.supportNgxTranslate());
        if (this.supportNgxTranslate()) {
            commandOutput.debug('ngxTranslateExtractionPattern:\t%s', this.ngxTranslateExtractionPattern());
        }
        commandOutput.debug('useSourceAsTarget:\t%s', this.useSourceAsTarget());
        if (this.useSourceAsTarget()) {
            commandOutput.debug('targetPraefix:\t"%s"', this.targetPraefix());
            commandOutput.debug('targetSuffix:\t"%s"', this.targetSuffix());
        }
        commandOutput.debug('allowIdChange:\t%s', this.allowIdChange());
        commandOutput.debug('beautifyOutput:\t%s', this.beautifyOutput());
        commandOutput.debug('preserveOrder:\t%s', this.preserveOrder());
        commandOutput.debug('autotranslate:\t%s', this.autotranslate());
        if (this.autotranslate()) {
            commandOutput.debug('autotranslated languages:\t%s', this.autotranslatedLanguages());
            commandOutput.debug('apikey:\t%s', this.apikey() ? '****' : 'NOT SET');
            commandOutput.debug('apikeyfile:\t%s', this.apikeyfile());
        }
    };
    /**
     * Default-Language, default en.
     * @return default language
     */
    /**
     * Default-Language, default en.
     * @return {?} default language
     */
    XliffMergeParameters.prototype.defaultLanguage = /**
     * Default-Language, default en.
     * @return {?} default language
     */
    function () {
        return this._defaultLanguage ? this._defaultLanguage : 'en';
    };
    /**
     * Liste der zu bearbeitenden Sprachen.
     * @return languages
     */
    /**
     * Liste der zu bearbeitenden Sprachen.
     * @return {?} languages
     */
    XliffMergeParameters.prototype.languages = /**
     * Liste der zu bearbeitenden Sprachen.
     * @return {?} languages
     */
    function () {
        return this._languages ? this._languages : [];
    };
    /**
     * src directory, where the master xlif is located.
     * @return srcDir
     */
    /**
     * src directory, where the master xlif is located.
     * @return {?} srcDir
     */
    XliffMergeParameters.prototype.srcDir = /**
     * src directory, where the master xlif is located.
     * @return {?} srcDir
     */
    function () {
        return this._srcDir ? this._srcDir : '.';
    };
    /**
     * The base file name of the xlif file for input and output.
     * Default is messages
     * @return base file
     */
    /**
     * The base file name of the xlif file for input and output.
     * Default is messages
     * @return {?} base file
     */
    XliffMergeParameters.prototype.i18nBaseFile = /**
     * The base file name of the xlif file for input and output.
     * Default is messages
     * @return {?} base file
     */
    function () {
        return this._i18nBaseFile ? this._i18nBaseFile : 'messages';
    };
    /**
     * The master xlif file (the one generated by ng-xi18n).
     * Default is <srcDir>/<i18nBaseFile>.xlf.
     * @return master file
     */
    /**
     * The master xlif file (the one generated by ng-xi18n).
     * Default is <srcDir>/<i18nBaseFile>.xlf.
     * @return {?} master file
     */
    XliffMergeParameters.prototype.i18nFile = /**
     * The master xlif file (the one generated by ng-xi18n).
     * Default is <srcDir>/<i18nBaseFile>.xlf.
     * @return {?} master file
     */
    function () {
        return join(this.srcDir(), (this._i18nFile ? this._i18nFile : this.i18nBaseFile() + '.' + this.suffixForGeneratedI18nFile())).replace(/\\/g, '/');
    };
    /**
     * Format of the master xlif file.
     * Default is "xlf", possible are "xlf" or "xlf2" or "xmb".
     * @return format
     */
    /**
     * Format of the master xlif file.
     * Default is "xlf", possible are "xlf" or "xlf2" or "xmb".
     * @return {?} format
     */
    XliffMergeParameters.prototype.i18nFormat = /**
     * Format of the master xlif file.
     * Default is "xlf", possible are "xlf" or "xlf2" or "xmb".
     * @return {?} format
     */
    function () {
        return (this._i18nFormat ? this._i18nFormat : 'xlf');
    };
    /**
     * potentially to be generated I18n-File with the translations for one language.
     * @param lang language shortcut
     * @return Path of file
     */
    /**
     * potentially to be generated I18n-File with the translations for one language.
     * @param {?} lang language shortcut
     * @return {?} Path of file
     */
    XliffMergeParameters.prototype.generatedI18nFile = /**
     * potentially to be generated I18n-File with the translations for one language.
     * @param {?} lang language shortcut
     * @return {?} Path of file
     */
    function (lang) {
        return join(this.genDir(), this.i18nBaseFile() + '.' + lang + '.' + this.suffixForGeneratedI18nFile()).replace(/\\/g, '/');
    };
    /**
     * @return {?}
     */
    XliffMergeParameters.prototype.suffixForGeneratedI18nFile = /**
     * @return {?}
     */
    function () {
        switch (this.i18nFormat()) {
            case 'xlf':
                return 'xlf';
            case 'xlf2':
                return 'xlf';
            case 'xmb':
                return 'xtb';
        }
    };
    /**
     * potentially to be generated translate-File for ngx-translate with the translations for one language.
     * @param lang language shortcut
     * @return Path of file
     */
    /**
     * potentially to be generated translate-File for ngx-translate with the translations for one language.
     * @param {?} lang language shortcut
     * @return {?} Path of file
     */
    XliffMergeParameters.prototype.generatedNgxTranslateFile = /**
     * potentially to be generated translate-File for ngx-translate with the translations for one language.
     * @param {?} lang language shortcut
     * @return {?} Path of file
     */
    function (lang) {
        return join(this.genDir(), this.i18nBaseFile() + '.' + lang + '.' + 'json').replace(/\\/g, '/');
    };
    /**
     * The encoding used to write new XLIFF-files.
     * @return encoding
     */
    /**
     * The encoding used to write new XLIFF-files.
     * @return {?} encoding
     */
    XliffMergeParameters.prototype.encoding = /**
     * The encoding used to write new XLIFF-files.
     * @return {?} encoding
     */
    function () {
        return this._encoding ? this._encoding : 'UTF-8';
    };
    /**
     * Output-Directory, where the output is written to.
     * Default is <srcDir>.
    */
    /**
     * Output-Directory, where the output is written to.
     * Default is <srcDir>.
     * @return {?}
     */
    XliffMergeParameters.prototype.genDir = /**
     * Output-Directory, where the output is written to.
     * Default is <srcDir>.
     * @return {?}
     */
    function () {
        return this._genDir ? this._genDir : this.srcDir();
    };
    /**
     * @return {?}
     */
    XliffMergeParameters.prototype.removeUnusedIds = /**
     * @return {?}
     */
    function () {
        return (isNullOrUndefined(this._removeUnusedIds)) ? true : this._removeUnusedIds;
    };
    /**
     * @return {?}
     */
    XliffMergeParameters.prototype.supportNgxTranslate = /**
     * @return {?}
     */
    function () {
        return (isNullOrUndefined(this._supportNgxTranslate)) ? false : this._supportNgxTranslate;
    };
    /**
     * @return {?}
     */
    XliffMergeParameters.prototype.ngxTranslateExtractionPattern = /**
     * @return {?}
     */
    function () {
        return (isNullOrUndefined(this._ngxTranslateExtractionPattern)) ?
            NgxTranslateExtractor.DefaultExtractionPattern : this._ngxTranslateExtractionPattern;
    };
    /**
     * Whether source must be used as target for new trans-units
     * Default is true
     */
    /**
     * Whether source must be used as target for new trans-units
     * Default is true
     * @return {?}
     */
    XliffMergeParameters.prototype.useSourceAsTarget = /**
     * Whether source must be used as target for new trans-units
     * Default is true
     * @return {?}
     */
    function () {
        return (isNullOrUndefined(this._useSourceAsTarget)) ? true : this._useSourceAsTarget;
    };
    /**
     * Praefix used for target when copying new trans-units
     * Default is ""
     */
    /**
     * Praefix used for target when copying new trans-units
     * Default is ""
     * @return {?}
     */
    XliffMergeParameters.prototype.targetPraefix = /**
     * Praefix used for target when copying new trans-units
     * Default is ""
     * @return {?}
     */
    function () {
        return (isNullOrUndefined(this._targetPraefix)) ? '' : this._targetPraefix;
    };
    /**
     * Suffix used for target when copying new trans-units
     * Default is ""
     */
    /**
     * Suffix used for target when copying new trans-units
     * Default is ""
     * @return {?}
     */
    XliffMergeParameters.prototype.targetSuffix = /**
     * Suffix used for target when copying new trans-units
     * Default is ""
     * @return {?}
     */
    function () {
        return (isNullOrUndefined(this._targetSuffix)) ? '' : this._targetSuffix;
    };
    /**
     * If set, run xml result through beautifier (pretty-data).
     */
    /**
     * If set, run xml result through beautifier (pretty-data).
     * @return {?}
     */
    XliffMergeParameters.prototype.beautifyOutput = /**
     * If set, run xml result through beautifier (pretty-data).
     * @return {?}
     */
    function () {
        return (isNullOrUndefined(this._beautifyOutput)) ? false : this._beautifyOutput;
    };
    /**
     * If set, order of new trans units will be as in master.
     * Otherwise they are added at the end.
     */
    /**
     * If set, order of new trans units will be as in master.
     * Otherwise they are added at the end.
     * @return {?}
     */
    XliffMergeParameters.prototype.preserveOrder = /**
     * If set, order of new trans units will be as in master.
     * Otherwise they are added at the end.
     * @return {?}
     */
    function () {
        return (isNullOrUndefined(this._preserveOrder)) ? true : this._preserveOrder;
    };
    /**
     * Whether to use autotranslate for new trans-units
     * Default is false
     */
    /**
     * Whether to use autotranslate for new trans-units
     * Default is false
     * @return {?}
     */
    XliffMergeParameters.prototype.autotranslate = /**
     * Whether to use autotranslate for new trans-units
     * Default is false
     * @return {?}
     */
    function () {
        if (isNullOrUndefined(this._autotranslate)) {
            return false;
        }
        if (isArray(this._autotranslate)) {
            return ((/** @type {?} */ (this._autotranslate))).length > 0;
        }
        return (/** @type {?} */ (this._autotranslate));
    };
    /**
     * Whether to use autotranslate for a given language.
     * @param lang language code.
     */
    /**
     * Whether to use autotranslate for a given language.
     * @param {?} lang language code.
     * @return {?}
     */
    XliffMergeParameters.prototype.autotranslateLanguage = /**
     * Whether to use autotranslate for a given language.
     * @param {?} lang language code.
     * @return {?}
     */
    function (lang) {
        return this.autotranslatedLanguages().indexOf(lang) >= 0;
    };
    /**
     * Return a list of languages to be autotranslated.
     */
    /**
     * Return a list of languages to be autotranslated.
     * @return {?}
     */
    XliffMergeParameters.prototype.autotranslatedLanguages = /**
     * Return a list of languages to be autotranslated.
     * @return {?}
     */
    function () {
        if (isNullOrUndefined(this._autotranslate) || this._autotranslate === false) {
            return [];
        }
        if (isArray(this._autotranslate)) {
            return ((/** @type {?} */ (this._autotranslate)));
        }
        return this.languages().slice(1); // first is source language
    };
    /**
     * API key to be used for Google Translate
     * @return api key
     */
    /**
     * API key to be used for Google Translate
     * @return {?} api key
     */
    XliffMergeParameters.prototype.apikey = /**
     * API key to be used for Google Translate
     * @return {?} api key
     */
    function () {
        if (!isNullOrUndefined(this._apikey)) {
            return this._apikey;
        }
        else {
            /** @type {?} */
            var apikeyPath = this.apikeyfile();
            if (this.apikeyfile()) {
                if (fs.existsSync(apikeyPath)) {
                    return FileUtil.read(apikeyPath, 'utf-8');
                }
                else {
                    throw new Error(format('api key file not found: API_KEY_FILE=%s', apikeyPath));
                }
            }
            else {
                return null;
            }
        }
    };
    /**
     * file name for API key to be used for Google Translate.
     * Explicitly set or read from env var API_KEY_FILE.
     * @return file of api key
     */
    /**
     * file name for API key to be used for Google Translate.
     * Explicitly set or read from env var API_KEY_FILE.
     * @return {?} file of api key
     */
    XliffMergeParameters.prototype.apikeyfile = /**
     * file name for API key to be used for Google Translate.
     * Explicitly set or read from env var API_KEY_FILE.
     * @return {?} file of api key
     */
    function () {
        if (this._apikeyfile) {
            return this._apikeyfile;
        }
        else if (process.env.API_KEY_FILE) {
            return process.env.API_KEY_FILE;
        }
        else {
            return null;
        }
    };
    return XliffMergeParameters;
}());
export { XliffMergeParameters };
if (false) {
    /** @type {?} */
    XliffMergeParameters.prototype.usedProfilePath;
    /** @type {?} */
    XliffMergeParameters.prototype._quiet;
    /** @type {?} */
    XliffMergeParameters.prototype._verbose;
    /** @type {?} */
    XliffMergeParameters.prototype._allowIdChange;
    /** @type {?} */
    XliffMergeParameters.prototype._defaultLanguage;
    /** @type {?} */
    XliffMergeParameters.prototype._srcDir;
    /** @type {?} */
    XliffMergeParameters.prototype._i18nBaseFile;
    /** @type {?} */
    XliffMergeParameters.prototype._i18nFile;
    /** @type {?} */
    XliffMergeParameters.prototype._i18nFormat;
    /** @type {?} */
    XliffMergeParameters.prototype._encoding;
    /** @type {?} */
    XliffMergeParameters.prototype._genDir;
    /** @type {?} */
    XliffMergeParameters.prototype._languages;
    /** @type {?} */
    XliffMergeParameters.prototype._removeUnusedIds;
    /** @type {?} */
    XliffMergeParameters.prototype._supportNgxTranslate;
    /** @type {?} */
    XliffMergeParameters.prototype._ngxTranslateExtractionPattern;
    /** @type {?} */
    XliffMergeParameters.prototype._useSourceAsTarget;
    /** @type {?} */
    XliffMergeParameters.prototype._targetPraefix;
    /** @type {?} */
    XliffMergeParameters.prototype._targetSuffix;
    /** @type {?} */
    XliffMergeParameters.prototype._beautifyOutput;
    /** @type {?} */
    XliffMergeParameters.prototype._preserveOrder;
    /** @type {?} */
    XliffMergeParameters.prototype._autotranslate;
    /** @type {?} */
    XliffMergeParameters.prototype._apikey;
    /** @type {?} */
    XliffMergeParameters.prototype._apikeyfile;
    /** @type {?} */
    XliffMergeParameters.prototype.errorsFound;
    /** @type {?} */
    XliffMergeParameters.prototype.warningsFound;
}
//# sourceMappingURL=data:application/json;base64,