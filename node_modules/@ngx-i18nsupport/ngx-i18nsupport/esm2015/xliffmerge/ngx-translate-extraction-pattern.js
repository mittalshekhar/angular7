/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * Helper class to parse ngx translate extraction pattern
 * and to decide wether a given message matches the pattern.
 */
export class NgxTranslateExtractionPattern {
    /**
     * Construct the pattern from given description string
     * @throws an error, if there is a syntax error
     * @param {?} extractionPatternString extractionPatternString
     */
    constructor(extractionPatternString) {
        this.extractionPatternString = extractionPatternString;
        /** @type {?} */
        const parts = extractionPatternString.split('|');
        this._matchExplicitId = false;
        this._descriptionPatterns = [];
        for (let i = 0; i < parts.length; i++) {
            /** @type {?} */
            const part = parts[i];
            if (part === '@@') {
                if (this._matchExplicitId) {
                    throw new Error('extraction pattern must not contain @@ twice');
                }
                this._matchExplicitId = true;
            }
            else {
                /** @type {?} */
                const errorString = this.checkValidDescriptionPattern(part);
                if (errorString) {
                    throw new Error(errorString);
                }
                this._descriptionPatterns.push(part);
            }
        }
    }
    /**
     * Check, wether an explicitly set id matches the pattern.
     * @param {?} id id
     * @return {?} wether an explicitly set id matches the pattern.
     */
    isExplicitIdMatched(id) {
        return id && this._matchExplicitId;
    }
    /**
     * Check, wether a given description matches the pattern.
     * @param {?} description description
     * @return {?} wether a given description matches the pattern.
     */
    isDescriptionMatched(description) {
        return this._descriptionPatterns.indexOf(description) >= 0;
    }
    /**
     * @param {?} descriptionPattern
     * @return {?}
     */
    checkValidDescriptionPattern(descriptionPattern) {
        if (!descriptionPattern) {
            return 'empty value not allowed';
        }
        if (/^[a-zA-Z_][a-zA-Z_-]*$/.test(descriptionPattern)) {
            return null; // it is ok
        }
        else {
            return 'description pattern must be an identifier containing only letters, digits, _ or -';
        }
    }
}
if (false) {
    /** @type {?} */
    NgxTranslateExtractionPattern.prototype._matchExplicitId;
    /** @type {?} */
    NgxTranslateExtractionPattern.prototype._descriptionPatterns;
    /** @type {?} */
    NgxTranslateExtractionPattern.prototype.extractionPatternString;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXRyYW5zbGF0ZS1leHRyYWN0aW9uLXBhdHRlcm4uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LWkxOG5zdXBwb3J0L25neC1pMThuc3VwcG9ydC8iLCJzb3VyY2VzIjpbInhsaWZmbWVyZ2Uvbmd4LXRyYW5zbGF0ZS1leHRyYWN0aW9uLXBhdHRlcm4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFJQSxNQUFNLE9BQU8sNkJBQTZCOzs7Ozs7SUFVdEMsWUFBb0IsdUJBQStCO1FBQS9CLDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBUTs7Y0FDekMsS0FBSyxHQUFHLHVCQUF1QixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFDaEQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQztRQUM5QixJQUFJLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxDQUFDO1FBQy9CLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFOztrQkFDN0IsSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDckIsSUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFO2dCQUNmLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO29CQUN2QixNQUFNLElBQUksS0FBSyxDQUFDLDhDQUE4QyxDQUFDLENBQUM7aUJBQ25FO2dCQUNELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7YUFDaEM7aUJBQU07O3NCQUNHLFdBQVcsR0FBRyxJQUFJLENBQUMsNEJBQTRCLENBQUMsSUFBSSxDQUFDO2dCQUMzRCxJQUFJLFdBQVcsRUFBRTtvQkFDYixNQUFNLElBQUksS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO2lCQUNoQztnQkFDRCxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3hDO1NBQ0o7SUFDTCxDQUFDOzs7Ozs7SUFPTSxtQkFBbUIsQ0FBQyxFQUFVO1FBQ2pDLE9BQU8sRUFBRSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUN2QyxDQUFDOzs7Ozs7SUFPTSxvQkFBb0IsQ0FBQyxXQUFtQjtRQUMzQyxPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9ELENBQUM7Ozs7O0lBRU8sNEJBQTRCLENBQUMsa0JBQTBCO1FBQzNELElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUNyQixPQUFPLHlCQUF5QixDQUFDO1NBQ3BDO1FBQ0QsSUFBSSx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsRUFBRTtZQUNuRCxPQUFPLElBQUksQ0FBQyxDQUFDLFdBQVc7U0FDM0I7YUFBTTtZQUNILE9BQU8sbUZBQW1GLENBQUM7U0FDOUY7SUFDTCxDQUFDO0NBQ0o7OztJQXpERyx5REFBa0M7O0lBQ2xDLDZEQUF1Qzs7SUFPM0IsZ0VBQXVDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEhlbHBlciBjbGFzcyB0byBwYXJzZSBuZ3ggdHJhbnNsYXRlIGV4dHJhY3Rpb24gcGF0dGVyblxyXG4gKiBhbmQgdG8gZGVjaWRlIHdldGhlciBhIGdpdmVuIG1lc3NhZ2UgbWF0Y2hlcyB0aGUgcGF0dGVybi5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBOZ3hUcmFuc2xhdGVFeHRyYWN0aW9uUGF0dGVybiB7XHJcblxyXG4gICAgcHJpdmF0ZSBfbWF0Y2hFeHBsaWNpdElkOiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSBfZGVzY3JpcHRpb25QYXR0ZXJuczogc3RyaW5nW107XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3QgdGhlIHBhdHRlcm4gZnJvbSBnaXZlbiBkZXNjcmlwdGlvbiBzdHJpbmdcclxuICAgICAqIEBwYXJhbSBleHRyYWN0aW9uUGF0dGVyblN0cmluZyBleHRyYWN0aW9uUGF0dGVyblN0cmluZ1xyXG4gICAgICogQHRocm93cyBhbiBlcnJvciwgaWYgdGhlcmUgaXMgYSBzeW50YXggZXJyb3JcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBleHRyYWN0aW9uUGF0dGVyblN0cmluZzogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgcGFydHMgPSBleHRyYWN0aW9uUGF0dGVyblN0cmluZy5zcGxpdCgnfCcpO1xyXG4gICAgICAgIHRoaXMuX21hdGNoRXhwbGljaXRJZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX2Rlc2NyaXB0aW9uUGF0dGVybnMgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhcnQgPSBwYXJ0c1tpXTtcclxuICAgICAgICAgICAgaWYgKHBhcnQgPT09ICdAQCcpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9tYXRjaEV4cGxpY2l0SWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2V4dHJhY3Rpb24gcGF0dGVybiBtdXN0IG5vdCBjb250YWluIEBAIHR3aWNlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXRjaEV4cGxpY2l0SWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3JTdHJpbmcgPSB0aGlzLmNoZWNrVmFsaWREZXNjcmlwdGlvblBhdHRlcm4ocGFydCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3JTdHJpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JTdHJpbmcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVzY3JpcHRpb25QYXR0ZXJucy5wdXNoKHBhcnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2ssIHdldGhlciBhbiBleHBsaWNpdGx5IHNldCBpZCBtYXRjaGVzIHRoZSBwYXR0ZXJuLlxyXG4gICAgICogQHBhcmFtIGlkIGlkXHJcbiAgICAgKiBAcmV0dXJuIHdldGhlciBhbiBleHBsaWNpdGx5IHNldCBpZCBtYXRjaGVzIHRoZSBwYXR0ZXJuLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaXNFeHBsaWNpdElkTWF0Y2hlZChpZDogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIGlkICYmIHRoaXMuX21hdGNoRXhwbGljaXRJZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrLCB3ZXRoZXIgYSBnaXZlbiBkZXNjcmlwdGlvbiBtYXRjaGVzIHRoZSBwYXR0ZXJuLlxyXG4gICAgICogQHBhcmFtIGRlc2NyaXB0aW9uIGRlc2NyaXB0aW9uXHJcbiAgICAgKiBAcmV0dXJuIHdldGhlciBhIGdpdmVuIGRlc2NyaXB0aW9uIG1hdGNoZXMgdGhlIHBhdHRlcm4uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpc0Rlc2NyaXB0aW9uTWF0Y2hlZChkZXNjcmlwdGlvbjogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rlc2NyaXB0aW9uUGF0dGVybnMuaW5kZXhPZihkZXNjcmlwdGlvbikgPj0gMDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNoZWNrVmFsaWREZXNjcmlwdGlvblBhdHRlcm4oZGVzY3JpcHRpb25QYXR0ZXJuOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmICghZGVzY3JpcHRpb25QYXR0ZXJuKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnZW1wdHkgdmFsdWUgbm90IGFsbG93ZWQnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoL15bYS16QS1aX11bYS16QS1aXy1dKiQvLnRlc3QoZGVzY3JpcHRpb25QYXR0ZXJuKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDsgLy8gaXQgaXMgb2tcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gJ2Rlc2NyaXB0aW9uIHBhdHRlcm4gbXVzdCBiZSBhbiBpZGVudGlmaWVyIGNvbnRhaW5pbmcgb25seSBsZXR0ZXJzLCBkaWdpdHMsIF8gb3IgLSc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==