/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { FileUtil } from '../common/file-util';
/**
 * Created by martin on 10.03.2017.
 * Helper class to read XMl with a correct encoding.
 */
export class XmlReader {
    /**
     * Read an xml-File.
     * @param {?} path Path to file
     * @param {?=} encoding optional encoding of the xml.
     * This is read from the file, but if you know it before, you can avoid reading the file twice.
     * @return {?} file content and encoding found in the file.
     */
    static readXmlFileContent(path, encoding) {
        if (!encoding) {
            encoding = XmlReader.DEFAULT_ENCODING;
        }
        /** @type {?} */
        let content = FileUtil.read(path, encoding);
        /** @type {?} */
        const foundEncoding = XmlReader.encodingFromXml(content);
        if (foundEncoding !== encoding) {
            // read again with the correct encoding
            content = FileUtil.read(path, foundEncoding);
        }
        return {
            content: content,
            encoding: foundEncoding
        };
    }
    /**
     * Read the encoding from the xml.
     * xml File starts with .. encoding=".."
     * @param {?} xmlString xmlString
     * @return {?} encoding
     */
    static encodingFromXml(xmlString) {
        /** @type {?} */
        const index = xmlString.indexOf('encoding="');
        if (index < 0) {
            return this.DEFAULT_ENCODING; // default in xml if not explicitly set
        }
        /** @type {?} */
        const endIndex = xmlString.indexOf('"', index + 10);
        return xmlString.substring(index + 10, endIndex);
    }
}
XmlReader.DEFAULT_ENCODING = 'UTF-8';
if (false) {
    /** @type {?} */
    XmlReader.DEFAULT_ENCODING;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieG1sLXJlYWRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtaTE4bnN1cHBvcnQvbmd4LWkxOG5zdXBwb3J0LyIsInNvdXJjZXMiOlsieGxpZmZtZXJnZS94bWwtcmVhZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0scUJBQXFCLENBQUM7Ozs7O0FBTTdDLE1BQU0sT0FBTyxTQUFTOzs7Ozs7OztJQVVYLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxJQUFZLEVBQUUsUUFBaUI7UUFDNUQsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNYLFFBQVEsR0FBRyxTQUFTLENBQUMsZ0JBQWdCLENBQUM7U0FDekM7O1lBQ0csT0FBTyxHQUFXLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQzs7Y0FDN0MsYUFBYSxHQUFHLFNBQVMsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDO1FBQ3hELElBQUksYUFBYSxLQUFLLFFBQVEsRUFBRTtZQUM1Qix1Q0FBdUM7WUFDdkMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1NBQ2hEO1FBQ0QsT0FBTztZQUNILE9BQU8sRUFBRSxPQUFPO1lBQ2hCLFFBQVEsRUFBRSxhQUFhO1NBQzFCLENBQUM7SUFDTixDQUFDOzs7Ozs7O0lBUU8sTUFBTSxDQUFDLGVBQWUsQ0FBQyxTQUFpQjs7Y0FDdEMsS0FBSyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO1FBQzdDLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTtZQUNYLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsdUNBQXVDO1NBQ3hFOztjQUNLLFFBQVEsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ25ELE9BQU8sU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3JELENBQUM7O0FBdENNLDBCQUFnQixHQUFHLE9BQU8sQ0FBQzs7O0lBQWxDLDJCQUFrQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RmlsZVV0aWx9IGZyb20gJy4uL2NvbW1vbi9maWxlLXV0aWwnO1xyXG4vKipcclxuICogQ3JlYXRlZCBieSBtYXJ0aW4gb24gMTAuMDMuMjAxNy5cclxuICogSGVscGVyIGNsYXNzIHRvIHJlYWQgWE1sIHdpdGggYSBjb3JyZWN0IGVuY29kaW5nLlxyXG4gKi9cclxuXHJcbmV4cG9ydCBjbGFzcyBYbWxSZWFkZXIge1xyXG4gICAgc3RhdGljIERFRkFVTFRfRU5DT0RJTkcgPSAnVVRGLTgnO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVhZCBhbiB4bWwtRmlsZS5cclxuICAgICAqIEBwYXJhbSBwYXRoIFBhdGggdG8gZmlsZVxyXG4gICAgICogQHBhcmFtIGVuY29kaW5nIG9wdGlvbmFsIGVuY29kaW5nIG9mIHRoZSB4bWwuXHJcbiAgICAgKiBUaGlzIGlzIHJlYWQgZnJvbSB0aGUgZmlsZSwgYnV0IGlmIHlvdSBrbm93IGl0IGJlZm9yZSwgeW91IGNhbiBhdm9pZCByZWFkaW5nIHRoZSBmaWxlIHR3aWNlLlxyXG4gICAgICogQHJldHVybiBmaWxlIGNvbnRlbnQgYW5kIGVuY29kaW5nIGZvdW5kIGluIHRoZSBmaWxlLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRYbWxGaWxlQ29udGVudChwYXRoOiBzdHJpbmcsIGVuY29kaW5nPzogc3RyaW5nKToge2NvbnRlbnQ6IHN0cmluZywgZW5jb2Rpbmc6IHN0cmluZ30ge1xyXG4gICAgICAgIGlmICghZW5jb2RpbmcpIHtcclxuICAgICAgICAgICAgZW5jb2RpbmcgPSBYbWxSZWFkZXIuREVGQVVMVF9FTkNPRElORztcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGNvbnRlbnQ6IHN0cmluZyA9IEZpbGVVdGlsLnJlYWQocGF0aCwgZW5jb2RpbmcpO1xyXG4gICAgICAgIGNvbnN0IGZvdW5kRW5jb2RpbmcgPSBYbWxSZWFkZXIuZW5jb2RpbmdGcm9tWG1sKGNvbnRlbnQpO1xyXG4gICAgICAgIGlmIChmb3VuZEVuY29kaW5nICE9PSBlbmNvZGluZykge1xyXG4gICAgICAgICAgICAvLyByZWFkIGFnYWluIHdpdGggdGhlIGNvcnJlY3QgZW5jb2RpbmdcclxuICAgICAgICAgICAgY29udGVudCA9IEZpbGVVdGlsLnJlYWQocGF0aCwgZm91bmRFbmNvZGluZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQsXHJcbiAgICAgICAgICAgIGVuY29kaW5nOiBmb3VuZEVuY29kaW5nXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWQgdGhlIGVuY29kaW5nIGZyb20gdGhlIHhtbC5cclxuICAgICAqIHhtbCBGaWxlIHN0YXJ0cyB3aXRoIC4uIGVuY29kaW5nPVwiLi5cIlxyXG4gICAgICogQHBhcmFtIHhtbFN0cmluZyB4bWxTdHJpbmdcclxuICAgICAqIEByZXR1cm4gZW5jb2RpbmdcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgZW5jb2RpbmdGcm9tWG1sKHhtbFN0cmluZzogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBpbmRleCA9IHhtbFN0cmluZy5pbmRleE9mKCdlbmNvZGluZz1cIicpO1xyXG4gICAgICAgIGlmIChpbmRleCA8IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuREVGQVVMVF9FTkNPRElORzsgLy8gZGVmYXVsdCBpbiB4bWwgaWYgbm90IGV4cGxpY2l0bHkgc2V0XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGVuZEluZGV4ID0geG1sU3RyaW5nLmluZGV4T2YoJ1wiJywgaW5kZXggKyAxMCk7IC8vIDEwID0gbGVuZ3RoIG9mICdlbmNvZGluZz1cIidcclxuICAgICAgICByZXR1cm4geG1sU3RyaW5nLnN1YnN0cmluZyhpbmRleCArIDEwLCBlbmRJbmRleCk7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG4iXX0=