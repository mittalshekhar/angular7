{"version":3,"file":"ngx-i18nsupport-ngx-i18nsupport.umd.js.map","sources":["ng://@ngx-i18nsupport/ngx-i18nsupport/lib/xliffmerge.module.ts","../../node_modules/tslib/tslib.es6.js","ng://@ngx-i18nsupport/ngx-i18nsupport/common/util.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/common/writer-to-string.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/common/command-output.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/xliffmerge/xliff-merge-error.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/common/file-util.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/xliffmerge/ngx-translate-extraction-pattern.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/xliffmerge/ngx-translate-extractor.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/xliffmerge/xliff-merge-parameters.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/xliffmerge/version.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/xliffmerge/xml-reader.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/xliffmerge/translation-messages-file-reader.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/autotranslate/auto-translate-service.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/autotranslate/auto-translate-result.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/autotranslate/auto-translate-summary-report.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/autotranslate/xliff-merge-auto-translate-service.ts","ng://@ngx-i18nsupport/ngx-i18nsupport/xliffmerge/xliff-merge.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\n\r\n// not used, only there to make ng-packagr happy\r\n@NgModule({\r\n    imports: [\r\n    ],\r\n    declarations: [],\r\n    exports: []\r\n})\r\nexport class XliffmergeModule { }\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\r\n * Collection of utility functions that are deprecated in nodes util.\r\n */\r\n\r\n/**\r\n * Replaces node isNullOrUndefined.\r\n */\r\nexport function isNullOrUndefined(value: any) {\r\n    return value === undefined || value === null;\r\n}\r\n\r\n/**\r\n * Replaces node isString.\r\n */\r\nexport function isString(value: any) {\r\n    return typeof value === 'string';\r\n}\r\n\r\n/**\r\n * Replaces node isBoolean.\r\n */\r\nexport function isBoolean(value: any) {\r\n    return typeof value === 'boolean';\r\n}\r\n\r\n/**\r\n * Replaces node isNumber.\r\n */\r\nexport function isNumber(value: any) {\r\n    return typeof value === 'number';\r\n}\r\n\r\n/**\r\n * Replaces node isArray.\r\n */\r\nexport function isArray(value: any) {\r\n    return Array.isArray(value);\r\n}\r\n","import {Writable} from 'stream';\r\nimport {isString} from './util';\r\n/**\r\n * Created by martin on 20.02.2017.\r\n * A helper class for testing.\r\n * Can be used as a WritableStream and writes everything (synchronously) into a string,\r\n * that can easily be read by the tests.\r\n */\r\n\r\nexport class WriterToString extends Writable {\r\n\r\n    private resultString: string;\r\n\r\n    constructor() {\r\n        super();\r\n        this.resultString = '';\r\n    }\r\n\r\n    public _write(chunk: any, encoding: string, callback: Function): void {\r\n        let chunkString;\r\n        if (isString(chunk)) {\r\n            chunkString = chunk;\r\n        } else if (chunk instanceof Buffer) {\r\n            chunkString = chunk.toString();\r\n        } else {\r\n            chunkString = Buffer.alloc(chunk).toString(encoding);\r\n        }\r\n        this.resultString = this.resultString + chunkString;\r\n        callback();\r\n    }\r\n\r\n    /**\r\n     * Returns a string of everything, that was written to the stream so far.\r\n     * @return written data\r\n     */\r\n    public writtenData(): string {\r\n        return this.resultString;\r\n    }\r\n}\r\n","/**\r\n * Created by martin on 17.02.2017.\r\n * Very simple class to control the output of a command.\r\n * Output can be errors, warnings, infos and debug-Outputs.\r\n * The output can be controlled via 2 flags, quiet and verbose.\r\n * If quit is enabled only error messages are shown.\r\n * If verbose is enabled, everything is shown.\r\n * If both are not enabled (the default) errors, warnings and infos are shown.\r\n * If not are enabled (strange), we assumed the default.\r\n */\r\n\r\nimport chalk from 'chalk';\r\nimport WritableStream = NodeJS.WritableStream;\r\nimport {format} from 'util';\r\n\r\nenum LogLevel {\r\n    'ERROR',\r\n    'WARN',\r\n    'INFO',\r\n    'DEBUG'\r\n}\r\n\r\nexport class CommandOutput {\r\n\r\n    /**\r\n     * verbose enables output of everything.\r\n     */\r\n    public _verbose: boolean;\r\n\r\n    /**\r\n     * quiet disables output of everything but errors.\r\n     */\r\n    public _quiet: boolean;\r\n\r\n    private outputStream: WritableStream;\r\n\r\n    constructor(stdout?: WritableStream) {\r\n        this._quiet = false;\r\n        this._verbose = false;\r\n        if (stdout) {\r\n            this.outputStream = stdout;\r\n        } else {\r\n            this.outputStream = process.stdout;\r\n        }\r\n    }\r\n\r\n    public setVerbose() {\r\n        this._verbose = true;\r\n    }\r\n\r\n    public setQuiet() {\r\n        this._quiet = true;\r\n    }\r\n\r\n    /**\r\n     * Test, wether verbose is enabled.\r\n     * @return wether verbose is enabled.\r\n     */\r\n    public verbose(): boolean {\r\n        return this._verbose;\r\n    }\r\n\r\n    /**\r\n     * Test, wether quiet is enabled.\r\n     * @return wether quiet is enabled.\r\n     */\r\n    public quiet(): boolean {\r\n        return this._quiet;\r\n    }\r\n\r\n    public error(msg, ...params: any[]) {\r\n        this.log(LogLevel.ERROR, msg, params);\r\n    }\r\n\r\n    public warn(msg, ...params: any[]) {\r\n        this.log(LogLevel.WARN, msg, params);\r\n    }\r\n\r\n    public info(msg, ...params: any[]) {\r\n        this.log(LogLevel.INFO, msg, params);\r\n    }\r\n\r\n    public debug(msg, ...params: any[]) {\r\n        this.log(LogLevel.DEBUG, msg, params);\r\n    }\r\n\r\n    private log(level: LogLevel, msg, params: any[]) {\r\n        if (!this.isOutputEnabled(level)) {\r\n            return;\r\n        }\r\n        let coloredMessage;\r\n        switch (level) {\r\n            case LogLevel.ERROR:\r\n                coloredMessage = chalk.red('ERROR: ' + msg);\r\n                break;\r\n            case LogLevel.WARN:\r\n                coloredMessage = chalk.magenta('WARNING: ' + msg);\r\n                break;\r\n            default:\r\n                coloredMessage = chalk.gray('* ' + msg);\r\n                break;\r\n        }\r\n        const outMsg = format(coloredMessage, ...params);\r\n        this.outputStream.write(outMsg + '\\n');\r\n    }\r\n\r\n    private isOutputEnabled(level: LogLevel): boolean {\r\n        let quietEnabled, verboseEnabled: boolean;\r\n        if (this._quiet && this._verbose) {\r\n            quietEnabled = false;\r\n            verboseEnabled = false;\r\n        } else {\r\n            quietEnabled = this._quiet;\r\n            verboseEnabled = this._verbose;\r\n        }\r\n        switch (level) {\r\n            case LogLevel.ERROR:\r\n                return true;    // always output errors\r\n            case LogLevel.WARN:\r\n                return (!quietEnabled);\r\n            case LogLevel.INFO:\r\n                return (verboseEnabled && !quietEnabled);\r\n            case LogLevel.DEBUG:\r\n                return verboseEnabled;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n}\r\n","/**\r\n * Created by martin on 17.02.2017.\r\n */\r\n\r\nexport class XliffMergeError extends Error {\r\n\r\n    constructor(msg: string) {\r\n        super(msg);\r\n\r\n        // Set the prototype explicitly.\r\n        Object.setPrototypeOf(this, XliffMergeError.prototype);\r\n    }\r\n}\r\n","import * as fs from 'fs';\r\n\r\n/**\r\n * Created by martin on 17.02.2017.\r\n * Some (a few) simple utils for file operations.\r\n * Just for convenience.\r\n */\r\n\r\nexport class FileUtil {\r\n\r\n    /**\r\n     * Check for existence.\r\n     * @param filename filename\r\n     * @return wether file exists\r\n     */\r\n    public static exists(filename: string) {\r\n        return fs.existsSync(filename);\r\n    }\r\n\r\n    /**\r\n     * Read a file.\r\n     * @param filename filename\r\n     * @param encoding encoding\r\n     * @return content of file\r\n     */\r\n    public static read(filename: string, encoding: string) {\r\n        return fs.readFileSync(filename, encoding);\r\n    }\r\n\r\n    /**\r\n     * Write a file with given content.\r\n     * @param filename filename\r\n     * @param newContent newContent\r\n     * @param encoding encoding\r\n     */\r\n    public static replaceContent(filename: string, newContent: string, encoding: string) {\r\n        fs.writeFileSync(filename, newContent, {encoding: encoding});\r\n    }\r\n\r\n    public static copy(srcFile: string, destFile: string) {\r\n        const BUF_LENGTH = 64 * 1024;\r\n        const buff = Buffer.alloc(BUF_LENGTH);\r\n        const fdr = fs.openSync(srcFile, 'r');\r\n        const fdw = fs.openSync(destFile, 'w');\r\n        let bytesRead = 1;\r\n        let pos = 0;\r\n        while (bytesRead > 0) {\r\n            bytesRead = fs.readSync(fdr, buff, 0, BUF_LENGTH, pos);\r\n            fs.writeSync(fdw, buff, 0, bytesRead);\r\n            pos += bytesRead;\r\n        }\r\n        fs.closeSync(fdr);\r\n        fs.closeSync(fdw);\r\n    }\r\n\r\n    /**\r\n     * Delete the folder and all of its content (rm -rf).\r\n     * @param path path\r\n     */\r\n    public static deleteFolderRecursive(path: string) {\r\n        let files = [];\r\n        if (fs.existsSync(path) ) {\r\n            files = fs.readdirSync(path);\r\n            files.forEach(function(file) {\r\n                const curPath = path + '/' + file;\r\n                if (fs.lstatSync(curPath).isDirectory()) { // recurse\r\n                    FileUtil.deleteFolderRecursive(curPath);\r\n                } else { // delete file\r\n                    fs.unlinkSync(curPath);\r\n                }\r\n            });\r\n            fs.rmdirSync(path);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete folders content recursively, but do not delete folder.\r\n     * Folder is left empty at the end.\r\n     * @param path path\r\n     */\r\n    public static deleteFolderContentRecursive(path: string) {\r\n        let files = [];\r\n        if (fs.existsSync(path) ) {\r\n            files = fs.readdirSync(path);\r\n            files.forEach(function(file) {\r\n                const curPath = path + '/' + file;\r\n                if (fs.lstatSync(curPath).isDirectory()) { // recurse\r\n                    FileUtil.deleteFolderRecursive(curPath);\r\n                } else { // delete file\r\n                    fs.unlinkSync(curPath);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete a file.\r\n     * @param path path\r\n     */\r\n    public static deleteFile(path: string) {\r\n        fs.unlinkSync(path);\r\n    }\r\n}\r\n","/**\r\n * Helper class to parse ngx translate extraction pattern\r\n * and to decide wether a given message matches the pattern.\r\n */\r\nexport class NgxTranslateExtractionPattern {\r\n\r\n    private _matchExplicitId: boolean;\r\n    private _descriptionPatterns: string[];\r\n\r\n    /**\r\n     * Construct the pattern from given description string\r\n     * @param extractionPatternString extractionPatternString\r\n     * @throws an error, if there is a syntax error\r\n     */\r\n    constructor(private extractionPatternString: string) {\r\n        const parts = extractionPatternString.split('|');\r\n        this._matchExplicitId = false;\r\n        this._descriptionPatterns = [];\r\n        for (let i = 0; i < parts.length; i++) {\r\n            const part = parts[i];\r\n            if (part === '@@') {\r\n                if (this._matchExplicitId) {\r\n                    throw new Error('extraction pattern must not contain @@ twice');\r\n                }\r\n                this._matchExplicitId = true;\r\n            } else {\r\n                const errorString = this.checkValidDescriptionPattern(part);\r\n                if (errorString) {\r\n                    throw new Error(errorString);\r\n                }\r\n                this._descriptionPatterns.push(part);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check, wether an explicitly set id matches the pattern.\r\n     * @param id id\r\n     * @return wether an explicitly set id matches the pattern.\r\n     */\r\n    public isExplicitIdMatched(id: string): boolean {\r\n        return id && this._matchExplicitId;\r\n    }\r\n\r\n    /**\r\n     * Check, wether a given description matches the pattern.\r\n     * @param description description\r\n     * @return wether a given description matches the pattern.\r\n     */\r\n    public isDescriptionMatched(description: string): boolean {\r\n        return this._descriptionPatterns.indexOf(description) >= 0;\r\n    }\r\n\r\n    private checkValidDescriptionPattern(descriptionPattern: string): string {\r\n        if (!descriptionPattern) {\r\n            return 'empty value not allowed';\r\n        }\r\n        if (/^[a-zA-Z_][a-zA-Z_-]*$/.test(descriptionPattern)) {\r\n            return null; // it is ok\r\n        } else {\r\n            return 'description pattern must be an identifier containing only letters, digits, _ or -';\r\n        }\r\n    }\r\n}\r\n","import {ITranslationMessagesFile, ITransUnit, NORMALIZATION_FORMAT_NGXTRANSLATE} from '@ngx-i18nsupport/ngx-i18nsupport-lib';\r\nimport {FileUtil} from '../common/file-util';\r\nimport {isNullOrUndefined} from '../common/util';\r\nimport {NgxTranslateExtractionPattern} from './ngx-translate-extraction-pattern';\r\n/**\r\n * Created by roobm on 15.03.2017.\r\n * A tool for extracting messages in ngx-translate format.\r\n * Generates a json-file to be used with ngx-translate.\r\n */\r\n\r\n/**\r\n * The interface used for translations in ngx-translate.\r\n * A hash that contains either the translation or another hash.\r\n */\r\ninterface NgxTranslations {\r\n    [id: string]: NgxTranslations | string;\r\n}\r\n\r\n/**\r\n * internal,\r\n * a message with id (a dot-separated string).\r\n */\r\ninterface NgxMessage {\r\n    id: string; // dot separated name, e.g. \"myapp.service1.message1\"\r\n    message: string; // the message, placeholder are in {{n}} syntax, e.g. \"a test with value: {{0}}\r\n}\r\n\r\nexport class NgxTranslateExtractor {\r\n\r\n    public static DefaultExtractionPattern = '@@|ngx-translate';\r\n    private extractionPattern: NgxTranslateExtractionPattern;\r\n\r\n    /**\r\n     * Check, wether extractionPattern has valid syntax.\r\n     * @param extractionPatternString extractionPatternString\r\n     * @return null, if pattern is ok, string describing the error, if it is not ok.\r\n     */\r\n    public static checkPattern(extractionPatternString: string): string {\r\n        try {\r\n          if (new NgxTranslateExtractionPattern(extractionPatternString)) {\r\n              return null;\r\n          }\r\n        } catch (error) {\r\n            return error.message;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static extract(messagesFile: ITranslationMessagesFile, extractionPattern: string, outputFile: string) {\r\n        new NgxTranslateExtractor(messagesFile, extractionPattern).extractTo(outputFile);\r\n    }\r\n\r\n    constructor(private messagesFile: ITranslationMessagesFile, extractionPatternString: string) {\r\n        this.extractionPattern = new NgxTranslateExtractionPattern(extractionPatternString);\r\n    }\r\n\r\n    /**\r\n     * Extact messages and write them to a file.\r\n     * @param outputFile outputFile\r\n     */\r\n    public extractTo(outputFile: string) {\r\n        const translations: NgxTranslations = this.toNgxTranslations(this.extract());\r\n        if (translations && Object.keys(translations).length > 0) {\r\n            FileUtil.replaceContent(outputFile, JSON.stringify(translations, null, 4), 'UTF-8');\r\n        } else {\r\n            if (FileUtil.exists(outputFile)) {\r\n                FileUtil.deleteFile(outputFile);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Extract messages and convert them to ngx translations.\r\n     *  @return the translation objects.\r\n     */\r\n    private extract(): NgxMessage[] {\r\n        const result: NgxMessage[] = [];\r\n        this.messagesFile.forEachTransUnit((tu: ITransUnit) => {\r\n            const ngxId = this.ngxTranslateIdFromTU(tu);\r\n            if (ngxId) {\r\n                const messagetext = tu.targetContentNormalized().asDisplayString(NORMALIZATION_FORMAT_NGXTRANSLATE);\r\n                result.push({id: ngxId, message: messagetext});\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Check, wether this tu should be extracted for ngx-translate usage, and return its id for ngx-translate.\r\n     * There are 2 possibilities:\r\n     * 1. description is set to \"ngx-translate\" and meaning contains the id.\r\n     * 2. id is explicitly set to a string.\r\n     * @param tu tu\r\n     * @return an ngx id or null, if this tu should not be extracted.\r\n     */\r\n    private ngxTranslateIdFromTU(tu: ITransUnit): string {\r\n        if (this.isExplicitlySetId(tu.id)) {\r\n            if (this.extractionPattern.isExplicitIdMatched(tu.id)) {\r\n                return tu.id;\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n        const description = tu.description();\r\n        if (description && this.extractionPattern.isDescriptionMatched(description)) {\r\n            return tu.meaning();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Test, wether ID was explicitly set (via i18n=\"@myid).\r\n     * Just heuristic, an ID is explicitly, if it does not look like a generated one.\r\n     * @param id id\r\n     * @return wether ID was explicitly set (via i18n=\"@myid).\r\n     */\r\n    private isExplicitlySetId(id: string): boolean {\r\n        if (isNullOrUndefined(id)) {\r\n            return false;\r\n        }\r\n        // generated IDs are either decimal or sha1 hex\r\n        const reForGeneratedId = /^[0-9a-f]{11,}$/;\r\n        return !reForGeneratedId.test(id);\r\n    }\r\n\r\n    /**\r\n     * Convert list of relevant TUs to ngx translations object.\r\n     * @param msgList msgList\r\n     */\r\n    private toNgxTranslations(msgList: NgxMessage[]): NgxTranslations {\r\n        const translationObject: NgxTranslations = {};\r\n        msgList.forEach((msg: NgxMessage) => {\r\n            this.putInTranslationObject(translationObject, msg);\r\n        });\r\n        return translationObject;\r\n    }\r\n\r\n    /**\r\n     * Put a new messages into the translation data object.\r\n     * If you add, e.g. \"{id: 'myapp.example', message: 'test'}\",\r\n     * the translation object will then contain an object myapp that has property example:\r\n     * {myapp: {\r\n     *   example: 'test'\r\n     *   }}\r\n     * @param translationObject translationObject\r\n     * @param msg msg\r\n     */\r\n    private putInTranslationObject(translationObject: NgxTranslations, msg: NgxMessage) {\r\n        let firstPartOfId: string;\r\n        let restOfId: string;\r\n        const indexOfDot = msg.id.indexOf('.');\r\n        if (indexOfDot === 0 || indexOfDot === (msg.id.length - 1)) {\r\n            throw new Error('bad nxg-translate id \"' + msg.id + '\"');\r\n        }\r\n        if (indexOfDot < 0) {\r\n            firstPartOfId = msg.id;\r\n            restOfId = '';\r\n        } else {\r\n            firstPartOfId = msg.id.substring(0, indexOfDot);\r\n            restOfId = msg.id.substring(indexOfDot + 1);\r\n        }\r\n        let object = translationObject[firstPartOfId];\r\n        if (isNullOrUndefined(object)) {\r\n            if (restOfId === '') {\r\n                translationObject[firstPartOfId] = msg.message;\r\n                return;\r\n            }\r\n            object = {};\r\n            translationObject[firstPartOfId] = object;\r\n        } else {\r\n            if (restOfId === '') {\r\n                throw new Error('duplicate id praefix \"' + msg.id + '\"');\r\n            }\r\n        }\r\n        this.putInTranslationObject(<NgxTranslations> object, {id: restOfId, message: msg.message});\r\n    }\r\n}\r\n","/**\r\n * Created by martin on 17.02.2017.\r\n * Collection of all parameters used by the tool.\r\n * The parameters are read form the profile or defaults are used.\r\n */\r\n\r\nimport * as fs from 'fs';\r\nimport {XliffMergeError} from './xliff-merge-error';\r\nimport {Stats} from 'fs';\r\nimport {CommandOutput} from '../common/command-output';\r\nimport {format} from 'util';\r\nimport {isArray, isNullOrUndefined} from '../common/util';\r\nimport {ProgramOptions, IConfigFile} from './i-xliff-merge-options';\r\nimport {FileUtil} from '../common/file-util';\r\nimport {NgxTranslateExtractor} from './ngx-translate-extractor';\r\nimport {dirname, isAbsolute, join, normalize} from 'path';\r\n\r\nconst PROFILE_CANDIDATES = ['package.json', '.angular-cli.json'];\r\n\r\nexport class XliffMergeParameters {\r\n\r\n    private usedProfilePath: string;\r\n    private _quiet: boolean;\r\n    private _verbose: boolean;\r\n    private _allowIdChange: boolean;\r\n    private _defaultLanguage: string;\r\n    private _srcDir: string;\r\n    private _i18nBaseFile: string;\r\n    private _i18nFile: string;\r\n    private _i18nFormat: string;\r\n    private _encoding: string;\r\n    private _genDir: string;\r\n    private _languages: string[];\r\n    private _removeUnusedIds: boolean;\r\n    private _supportNgxTranslate: boolean;\r\n    private _ngxTranslateExtractionPattern: string;\r\n    private _useSourceAsTarget: boolean;\r\n    private _targetPraefix: string;\r\n    private _targetSuffix: string;\r\n    private _beautifyOutput: boolean;\r\n    private _preserveOrder: boolean;\r\n    private _autotranslate: boolean|string[];\r\n    private _apikey: string;\r\n    private _apikeyfile: string;\r\n\r\n    public errorsFound: XliffMergeError[];\r\n    public warningsFound: string[];\r\n\r\n    /**\r\n     * Create Parameters.\r\n     * @param options command options\r\n     * @param profileContent given profile (if not, it is read from the profile path from options).\r\n     */\r\n    public static createFromOptions(options: ProgramOptions, profileContent?: IConfigFile) {\r\n        const parameters = new XliffMergeParameters();\r\n        parameters.configure(options, profileContent);\r\n        return parameters;\r\n    }\r\n\r\n    private constructor() {\r\n        this.errorsFound = [];\r\n        this.warningsFound = [];\r\n    }\r\n\r\n    /**\r\n     * Read potential profile.\r\n     * To be a candidate, file must exist and contain property \"xliffmergeOptions\".\r\n     * @param profilePath path of profile\r\n     * @return parsed content of file or null, if file does not exist or is not a profile candidate.\r\n     */\r\n    private static readProfileCandidate(profilePath: string): IConfigFile {\r\n        let content: string;\r\n        try {\r\n            content = fs.readFileSync(profilePath, 'UTF-8');\r\n        } catch (err) {\r\n            return null;\r\n        }\r\n        const parsedContent: IConfigFile = JSON.parse(content);\r\n        if (parsedContent && parsedContent.xliffmergeOptions) {\r\n            return parsedContent;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initialize me from the profile content.\r\n     * (public only for test usage).\r\n     * @param options options given at runtime via command line\r\n     * @param profileContent if null, read it from profile.\r\n     */\r\n    private configure(options: ProgramOptions, profileContent?: IConfigFile) {\r\n        this.errorsFound = [];\r\n        this.warningsFound = [];\r\n        if (!profileContent) {\r\n            profileContent = this.readProfile(options);\r\n        }\r\n        const validProfile: boolean = (!!profileContent);\r\n        if (options.quiet) {\r\n            this._quiet = options.quiet;\r\n        }\r\n        if (options.verbose) {\r\n            this._verbose = options.verbose;\r\n        }\r\n        if (validProfile) {\r\n            this.initializeFromConfig(profileContent);\r\n            // if languages are given as parameters, they ovveride everything said in profile\r\n            if (!!options.languages && options.languages.length > 0) {\r\n                this._languages = options.languages;\r\n                if (!this._defaultLanguage) {\r\n                    this._defaultLanguage = this._languages[0];\r\n                }\r\n            }\r\n            this.checkParameters();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Read profile.\r\n     * @param options program options\r\n     * @return the read profile (empty, if none, null if errors)\r\n     */\r\n    private readProfile(options: ProgramOptions): IConfigFile {\r\n        const profilePath: string = options.profilePath;\r\n        if (!profilePath) {\r\n            for (const configfilename of PROFILE_CANDIDATES) {\r\n                const profile = XliffMergeParameters.readProfileCandidate(configfilename);\r\n                if (profile) {\r\n                    this.usedProfilePath = configfilename;\r\n                    return profile;\r\n                }\r\n            }\r\n            return {};\r\n        }\r\n        let content: string;\r\n        try {\r\n            content = fs.readFileSync(profilePath, 'UTF-8');\r\n        } catch (err) {\r\n            this.errorsFound.push(new XliffMergeError('could not read profile \"' + profilePath + '\"'));\r\n            return null;\r\n        }\r\n        this.usedProfilePath = profilePath;\r\n        const profileContent: IConfigFile = JSON.parse(content);\r\n        // replace all pathes in options by absolute paths\r\n        const xliffmergeOptions = profileContent.xliffmergeOptions;\r\n        xliffmergeOptions.srcDir = this.adjustPathToProfilePath(profilePath, xliffmergeOptions.srcDir);\r\n        xliffmergeOptions.genDir = this.adjustPathToProfilePath(profilePath, xliffmergeOptions.genDir);\r\n        xliffmergeOptions.apikeyfile = this.adjustPathToProfilePath(profilePath, xliffmergeOptions.apikeyfile);\r\n        return profileContent;\r\n    }\r\n\r\n    private adjustPathToProfilePath(profilePath: string, pathToAdjust: string | undefined): string | undefined {\r\n        if (!pathToAdjust || isAbsolute(pathToAdjust)) {\r\n            return pathToAdjust;\r\n        }\r\n        return join(dirname(profilePath), pathToAdjust).replace(/\\\\/g, '/');\r\n    }\r\n\r\n    private initializeFromConfig(profileContent: IConfigFile) {\r\n        if (!profileContent) {\r\n            return;\r\n        }\r\n        const profile = profileContent.xliffmergeOptions;\r\n        if (profile) {\r\n            if (!isNullOrUndefined(profile.quiet)) {\r\n                this._quiet = profile.quiet;\r\n            }\r\n            if (!isNullOrUndefined(profile.verbose)) {\r\n                this._verbose = profile.verbose;\r\n            }\r\n            if (!isNullOrUndefined(profile.allowIdChange)) {\r\n                this._allowIdChange = profile.allowIdChange;\r\n            }\r\n            if (profile.defaultLanguage) {\r\n                this._defaultLanguage = profile.defaultLanguage;\r\n            }\r\n            if (profile.languages) {\r\n                this._languages = profile.languages;\r\n            }\r\n            if (profile.srcDir) {\r\n                this._srcDir = profile.srcDir;\r\n            }\r\n            if (profile.angularCompilerOptions) {\r\n                if (profile.angularCompilerOptions.genDir) {\r\n                    this._genDir = profile.angularCompilerOptions.genDir;\r\n                }\r\n            }\r\n            if (profile.genDir) {\r\n                // this must be after angularCompilerOptions to be preferred\r\n                this._genDir = profile.genDir;\r\n            }\r\n            if (profile.i18nBaseFile) {\r\n                this._i18nBaseFile = profile.i18nBaseFile;\r\n            }\r\n            if (profile.i18nFile) {\r\n                this._i18nFile = profile.i18nFile;\r\n            }\r\n            if (profile.i18nFormat) {\r\n                this._i18nFormat = profile.i18nFormat;\r\n            }\r\n            if (profile.encoding) {\r\n                this._encoding = profile.encoding;\r\n            }\r\n            if (!isNullOrUndefined(profile.removeUnusedIds)) {\r\n                this._removeUnusedIds = profile.removeUnusedIds;\r\n            }\r\n            if (!isNullOrUndefined(profile.supportNgxTranslate)) {\r\n                this._supportNgxTranslate = profile.supportNgxTranslate;\r\n            }\r\n            if (!isNullOrUndefined(profile.ngxTranslateExtractionPattern)) {\r\n                this._ngxTranslateExtractionPattern = profile.ngxTranslateExtractionPattern;\r\n            }\r\n            if (!isNullOrUndefined(profile.useSourceAsTarget)) {\r\n                this._useSourceAsTarget = profile.useSourceAsTarget;\r\n            }\r\n            if (!isNullOrUndefined(profile.targetPraefix)) {\r\n                this._targetPraefix = profile.targetPraefix;\r\n            }\r\n            if (!isNullOrUndefined(profile.targetSuffix)) {\r\n                this._targetSuffix = profile.targetSuffix;\r\n            }\r\n            if (!isNullOrUndefined(profile.autotranslate)) {\r\n                this._autotranslate = profile.autotranslate;\r\n            }\r\n            if (!isNullOrUndefined(profile.beautifyOutput)) {\r\n                this._beautifyOutput = profile.beautifyOutput;\r\n            }\r\n            if (!isNullOrUndefined(profile.preserveOrder)) {\r\n                this._preserveOrder = profile.preserveOrder;\r\n            }\r\n            if (!isNullOrUndefined(profile.apikey)) {\r\n                this._apikey = profile.apikey;\r\n            }\r\n            if (!isNullOrUndefined(profile.apikeyfile)) {\r\n                this._apikeyfile = profile.apikeyfile;\r\n            }\r\n        } else {\r\n            this.warningsFound.push('did not find \"xliffmergeOptions\" in profile, using defaults');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check all Parameters, wether they are complete and consistent.\r\n     * if something is wrong with the parameters, it is collected in errorsFound.\r\n     */\r\n    private checkParameters(): void {\r\n        this.checkLanguageSyntax(this.defaultLanguage());\r\n        if (this.languages().length === 0) {\r\n            this.errorsFound.push(new XliffMergeError('no languages specified'));\r\n        }\r\n        this.languages().forEach((lang) => {\r\n            this.checkLanguageSyntax(lang);\r\n        });\r\n        let stats: Stats;\r\n        let err: any;\r\n        // srcDir should exists\r\n        try {\r\n            stats = fs.statSync(this.srcDir());\r\n        } catch (e) {\r\n            err = e;\r\n        }\r\n        if (!!err || !stats.isDirectory()) {\r\n            this.errorsFound.push(new XliffMergeError('srcDir \"' + this.srcDir() + '\" is not a directory'));\r\n        }\r\n        // genDir should exists\r\n        try {\r\n            stats = fs.statSync(this.genDir());\r\n        } catch (e) {\r\n            err = e;\r\n        }\r\n        if (!!err || !stats.isDirectory()) {\r\n            this.errorsFound.push(new XliffMergeError('genDir \"' + this.genDir() + '\" is not a directory'));\r\n        }\r\n        // master file MUST exist\r\n        try {\r\n            fs.accessSync(this.i18nFile(), fs.constants.R_OK);\r\n        } catch (err) {\r\n            this.errorsFound.push(new XliffMergeError('i18nFile \"' + this.i18nFile() + '\" is not readable'));\r\n        }\r\n        // i18nFormat must be xlf xlf2 or xmb\r\n        if (!(this.i18nFormat() === 'xlf' || this.i18nFormat() === 'xlf2' || this.i18nFormat() === 'xmb')) {\r\n            this.errorsFound.push(new XliffMergeError('i18nFormat \"' + this.i18nFormat() + '\" invalid, must be \"xlf\" or \"xlf2\" or \"xmb\"'));\r\n        }\r\n        // autotranslate requires api key\r\n        if (this.autotranslate() && !this.apikey()) {\r\n            this.errorsFound.push(new XliffMergeError('autotranslate requires an API key, please set one'));\r\n        }\r\n        // autotranslated languages must be in list of all languages\r\n        this.autotranslatedLanguages().forEach((lang) => {\r\n            if (this.languages().indexOf(lang) < 0) {\r\n                this.errorsFound.push(new XliffMergeError('autotranslate language \"' + lang + '\" is not in list of languages'));\r\n            }\r\n            if (lang === this.defaultLanguage()) {\r\n                this.errorsFound.push(\r\n                    new XliffMergeError('autotranslate language \"' + lang + '\" cannot be translated, because it is the source language'));\r\n            }\r\n        });\r\n        // ngx translate pattern check\r\n        if (this.supportNgxTranslate()) {\r\n            const checkResult = NgxTranslateExtractor.checkPattern(this.ngxTranslateExtractionPattern());\r\n            if (!isNullOrUndefined(checkResult)) {\r\n                this.errorsFound.push(\r\n                    new XliffMergeError('ngxTranslateExtractionPattern \"' + this.ngxTranslateExtractionPattern() + '\": ' + checkResult));\r\n            }\r\n        }\r\n        // targetPraefix and targetSuffix check\r\n        if (!this.useSourceAsTarget()) {\r\n            if (this.targetPraefix().length > 0) {\r\n                this.warningsFound.push(\r\n                    'configured targetPraefix \"' + this.targetPraefix() + '\" will not be used because \"useSourceAsTarget\" is disabled\"');\r\n            }\r\n            if (this.targetSuffix().length > 0) {\r\n                this.warningsFound.push(\r\n                    'configured targetSuffix \"' + this.targetSuffix() + '\" will not be used because \"useSourceAsTarget\" is disabled\"');\r\n            }\r\n        }\r\n     }\r\n\r\n    /**\r\n     * Check syntax of language.\r\n     * Must be compatible with XML Schema type xsd:language.\r\n     * Pattern: [a-zA-Z]{1,8}((-|_)[a-zA-Z0-9]{1,8})*\r\n     * @param lang language to check\r\n     */\r\n    private checkLanguageSyntax(lang: string) {\r\n        const pattern = /^[a-zA-Z]{1,8}([-_][a-zA-Z0-9]{1,8})*$/;\r\n        if (!pattern.test(lang)) {\r\n            this.errorsFound.push(new XliffMergeError('language \"' + lang + '\" is not valid'));\r\n        }\r\n    }\r\n\r\n    public allowIdChange(): boolean {\r\n        return (isNullOrUndefined(this._allowIdChange)) ? false : this._allowIdChange;\r\n    }\r\n\r\n    public verbose(): boolean {\r\n        return (isNullOrUndefined(this._verbose)) ? false : this._verbose;\r\n    }\r\n\r\n    public quiet(): boolean {\r\n        return (isNullOrUndefined(this._quiet)) ? false : this._quiet;\r\n    }\r\n\r\n    /**\r\n     * Debug output all parameters to commandOutput.\r\n     */\r\n    public showAllParameters(commandOutput: CommandOutput): void {\r\n        commandOutput.debug('xliffmerge Used Parameters:');\r\n        commandOutput.debug('usedProfilePath:\\t\"%s\"', this.usedProfilePath);\r\n        commandOutput.debug('defaultLanguage:\\t\"%s\"', this.defaultLanguage());\r\n        commandOutput.debug('srcDir:\\t\"%s\"', this.srcDir());\r\n        commandOutput.debug('genDir:\\t\"%s\"', this.genDir());\r\n        commandOutput.debug('i18nBaseFile:\\t\"%s\"', this.i18nBaseFile());\r\n        commandOutput.debug('i18nFile:\\t\"%s\"', this.i18nFile());\r\n        commandOutput.debug('languages:\\t%s', this.languages());\r\n        for (const language of this.languages()) {\r\n            commandOutput.debug('outputFile[%s]:\\t%s', language, this.generatedI18nFile(language));\r\n        }\r\n        commandOutput.debug('removeUnusedIds:\\t%s', this.removeUnusedIds());\r\n        commandOutput.debug('supportNgxTranslate:\\t%s', this.supportNgxTranslate());\r\n        if (this.supportNgxTranslate()) {\r\n            commandOutput.debug('ngxTranslateExtractionPattern:\\t%s', this.ngxTranslateExtractionPattern());\r\n        }\r\n        commandOutput.debug('useSourceAsTarget:\\t%s', this.useSourceAsTarget());\r\n        if (this.useSourceAsTarget()) {\r\n            commandOutput.debug('targetPraefix:\\t\"%s\"', this.targetPraefix());\r\n            commandOutput.debug('targetSuffix:\\t\"%s\"', this.targetSuffix());\r\n        }\r\n        commandOutput.debug('allowIdChange:\\t%s', this.allowIdChange());\r\n        commandOutput.debug('beautifyOutput:\\t%s', this.beautifyOutput());\r\n        commandOutput.debug('preserveOrder:\\t%s', this.preserveOrder());\r\n        commandOutput.debug('autotranslate:\\t%s', this.autotranslate());\r\n        if (this.autotranslate()) {\r\n            commandOutput.debug('autotranslated languages:\\t%s', this.autotranslatedLanguages());\r\n            commandOutput.debug('apikey:\\t%s', this.apikey() ? '****' : 'NOT SET');\r\n            commandOutput.debug('apikeyfile:\\t%s', this.apikeyfile());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Default-Language, default en.\r\n     * @return default language\r\n     */\r\n    public defaultLanguage(): string {\r\n        return this._defaultLanguage ? this._defaultLanguage : 'en';\r\n    }\r\n\r\n    /**\r\n     * Liste der zu bearbeitenden Sprachen.\r\n     * @return languages\r\n     */\r\n    public languages(): string[] {\r\n        return this._languages ? this._languages : [];\r\n    }\r\n\r\n    /**\r\n     * src directory, where the master xlif is located.\r\n     * @return srcDir\r\n     */\r\n    public srcDir(): string {\r\n        return this._srcDir ? this._srcDir : '.';\r\n    }\r\n\r\n    /**\r\n     * The base file name of the xlif file for input and output.\r\n     * Default is messages\r\n     * @return base file\r\n     */\r\n    public i18nBaseFile(): string {\r\n        return this._i18nBaseFile ? this._i18nBaseFile : 'messages';\r\n    }\r\n\r\n    /**\r\n     * The master xlif file (the one generated by ng-xi18n).\r\n     * Default is <srcDir>/<i18nBaseFile>.xlf.\r\n     * @return master file\r\n     */\r\n    public i18nFile(): string {\r\n        return join(this.srcDir(),\r\n            (this._i18nFile ? this._i18nFile : this.i18nBaseFile() + '.' + this.suffixForGeneratedI18nFile())\r\n        ).replace(/\\\\/g, '/');\r\n    }\r\n\r\n    /**\r\n     * Format of the master xlif file.\r\n     * Default is \"xlf\", possible are \"xlf\" or \"xlf2\" or \"xmb\".\r\n     * @return format\r\n     */\r\n    public i18nFormat(): string {\r\n        return (this._i18nFormat ? this._i18nFormat : 'xlf');\r\n    }\r\n\r\n    /**\r\n     * potentially to be generated I18n-File with the translations for one language.\r\n     * @param lang language shortcut\r\n     * @return Path of file\r\n     */\r\n    public generatedI18nFile(lang: string): string {\r\n        return join(this.genDir(), this.i18nBaseFile() + '.' + lang + '.' + this.suffixForGeneratedI18nFile()).replace(/\\\\/g, '/');\r\n    }\r\n\r\n    private suffixForGeneratedI18nFile(): string {\r\n        switch (this.i18nFormat()) {\r\n            case 'xlf':\r\n                return 'xlf';\r\n            case 'xlf2':\r\n                return 'xlf';\r\n            case 'xmb':\r\n                return 'xtb';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * potentially to be generated translate-File for ngx-translate with the translations for one language.\r\n     * @param lang language shortcut\r\n     * @return Path of file\r\n     */\r\n    public generatedNgxTranslateFile(lang: string): string {\r\n        return join(this.genDir(), this.i18nBaseFile() + '.' + lang + '.' + 'json').replace(/\\\\/g, '/');\r\n    }\r\n\r\n    /**\r\n     * The encoding used to write new XLIFF-files.\r\n     * @return encoding\r\n     */\r\n    public encoding(): string {\r\n        return this._encoding ? this._encoding : 'UTF-8';\r\n    }\r\n\r\n     /**\r\n      * Output-Directory, where the output is written to.\r\n      * Default is <srcDir>.\r\n     */\r\n    public genDir(): string {\r\n        return this._genDir ? this._genDir : this.srcDir();\r\n    }\r\n\r\n    public removeUnusedIds(): boolean {\r\n        return (isNullOrUndefined(this._removeUnusedIds)) ? true : this._removeUnusedIds;\r\n    }\r\n\r\n    public supportNgxTranslate(): boolean {\r\n        return (isNullOrUndefined(this._supportNgxTranslate)) ? false : this._supportNgxTranslate;\r\n    }\r\n\r\n    public ngxTranslateExtractionPattern(): string {\r\n        return (isNullOrUndefined(this._ngxTranslateExtractionPattern)) ?\r\n            NgxTranslateExtractor.DefaultExtractionPattern : this._ngxTranslateExtractionPattern;\r\n    }\r\n\r\n    /**\r\n     * Whether source must be used as target for new trans-units\r\n     * Default is true\r\n     */\r\n    public useSourceAsTarget(): boolean {\r\n        return (isNullOrUndefined(this._useSourceAsTarget)) ? true : this._useSourceAsTarget;\r\n    }\r\n\r\n    /**\r\n     * Praefix used for target when copying new trans-units\r\n     * Default is \"\"\r\n     */\r\n    public targetPraefix(): string {\r\n        return (isNullOrUndefined(this._targetPraefix)) ? '' : this._targetPraefix;\r\n    }\r\n\r\n    /**\r\n     * Suffix used for target when copying new trans-units\r\n     * Default is \"\"\r\n     */\r\n    public targetSuffix(): string {\r\n        return (isNullOrUndefined(this._targetSuffix)) ? '' : this._targetSuffix;\r\n    }\r\n\r\n    /**\r\n     * If set, run xml result through beautifier (pretty-data).\r\n     */\r\n    public beautifyOutput(): boolean {\r\n        return (isNullOrUndefined(this._beautifyOutput)) ? false : this._beautifyOutput;\r\n    }\r\n\r\n    /**\r\n     * If set, order of new trans units will be as in master.\r\n     * Otherwise they are added at the end.\r\n     */\r\n    public preserveOrder(): boolean {\r\n        return (isNullOrUndefined(this._preserveOrder)) ? true : this._preserveOrder;\r\n    }\r\n\r\n    /**\r\n     * Whether to use autotranslate for new trans-units\r\n     * Default is false\r\n     */\r\n    public autotranslate(): boolean {\r\n        if (isNullOrUndefined(this._autotranslate)) {\r\n            return false;\r\n        }\r\n        if (isArray(this._autotranslate)) {\r\n            return (<string[]>this._autotranslate).length > 0;\r\n        }\r\n        return <boolean> this._autotranslate;\r\n    }\r\n\r\n    /**\r\n     * Whether to use autotranslate for a given language.\r\n     * @param lang language code.\r\n     */\r\n    public autotranslateLanguage(lang: string): boolean {\r\n        return this.autotranslatedLanguages().indexOf(lang) >= 0;\r\n    }\r\n\r\n    /**\r\n     * Return a list of languages to be autotranslated.\r\n     */\r\n    public autotranslatedLanguages(): string[] {\r\n        if (isNullOrUndefined(this._autotranslate) || this._autotranslate === false) {\r\n            return [];\r\n        }\r\n        if (isArray(this._autotranslate)) {\r\n            return (<string[]>this._autotranslate);\r\n        }\r\n        return this.languages().slice(1); // first is source language\r\n    }\r\n\r\n    /**\r\n     * API key to be used for Google Translate\r\n     * @return api key\r\n     */\r\n    public apikey(): string {\r\n        if (!isNullOrUndefined(this._apikey)) {\r\n            return this._apikey;\r\n        } else {\r\n            const apikeyPath = this.apikeyfile();\r\n            if (this.apikeyfile()) {\r\n                if (fs.existsSync(apikeyPath)) {\r\n                    return FileUtil.read(apikeyPath, 'utf-8');\r\n                } else {\r\n                    throw new Error(format('api key file not found: API_KEY_FILE=%s', apikeyPath));\r\n                }\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * file name for API key to be used for Google Translate.\r\n     * Explicitly set or read from env var API_KEY_FILE.\r\n     * @return file of api key\r\n     */\r\n    public apikeyfile(): string {\r\n        if (this._apikeyfile) {\r\n            return this._apikeyfile;\r\n        } else if (process.env.API_KEY_FILE) {\r\n            return process.env.API_KEY_FILE;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","/**\r\n * Created by martin on 19.02.2017.\r\n */\r\nimport * as path from 'path';\r\n\r\nlet pkg = null;\r\ntry {\r\n    pkg = require(path.resolve(__dirname, '..', 'package.json'));\r\n} catch (e) {\r\n    try {\r\n        pkg = require(path.resolve(__dirname, '..', '..', 'package.json'));\r\n    } catch (e) {\r\n        pkg = null;\r\n    }\r\n}\r\n\r\nexport const VERSION = (pkg ? pkg.version : 'unknown');\r\n","import {FileUtil} from '../common/file-util';\r\n/**\r\n * Created by martin on 10.03.2017.\r\n * Helper class to read XMl with a correct encoding.\r\n */\r\n\r\nexport class XmlReader {\r\n    static DEFAULT_ENCODING = 'UTF-8';\r\n\r\n    /**\r\n     * Read an xml-File.\r\n     * @param path Path to file\r\n     * @param encoding optional encoding of the xml.\r\n     * This is read from the file, but if you know it before, you can avoid reading the file twice.\r\n     * @return file content and encoding found in the file.\r\n     */\r\n    public static readXmlFileContent(path: string, encoding?: string): {content: string, encoding: string} {\r\n        if (!encoding) {\r\n            encoding = XmlReader.DEFAULT_ENCODING;\r\n        }\r\n        let content: string = FileUtil.read(path, encoding);\r\n        const foundEncoding = XmlReader.encodingFromXml(content);\r\n        if (foundEncoding !== encoding) {\r\n            // read again with the correct encoding\r\n            content = FileUtil.read(path, foundEncoding);\r\n        }\r\n        return {\r\n            content: content,\r\n            encoding: foundEncoding\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Read the encoding from the xml.\r\n     * xml File starts with .. encoding=\"..\"\r\n     * @param xmlString xmlString\r\n     * @return encoding\r\n     */\r\n    private static encodingFromXml(xmlString: string): string {\r\n        const index = xmlString.indexOf('encoding=\"');\r\n        if (index < 0) {\r\n            return this.DEFAULT_ENCODING; // default in xml if not explicitly set\r\n        }\r\n        const endIndex = xmlString.indexOf('\"', index + 10); // 10 = length of 'encoding=\"'\r\n        return xmlString.substring(index + 10, endIndex);\r\n    }\r\n\r\n}\r\n\r\n","/**\r\n * Created by roobm on 21.03.2017.\r\n */\r\nimport {TranslationMessagesFileFactory, ITranslationMessagesFile} from '@ngx-i18nsupport/ngx-i18nsupport-lib';\r\nimport {FileUtil} from '../common/file-util';\r\nimport {XmlReader} from './xml-reader';\r\n\r\n/**\r\n * Helper class to read translation files depending on format.\r\n */\r\nexport class TranslationMessagesFileReader {\r\n\r\n    /**\r\n     * Read file function, result depends on format, either XliffFile or XmbFile.\r\n     * @param i18nFormat format\r\n     * @param path path\r\n     * @param encoding encoding\r\n     * @param optionalMasterFilePath optionalMasterFilePath\r\n     * @return XliffFile\r\n     */\r\n    public static fromFile(i18nFormat: string,\r\n                           path: string,\r\n                           encoding: string,\r\n                           optionalMasterFilePath?: string): ITranslationMessagesFile {\r\n        const xmlContent = XmlReader.readXmlFileContent(path, encoding);\r\n        const optionalMaster = TranslationMessagesFileReader.masterFileContent(optionalMasterFilePath, encoding);\r\n        return TranslationMessagesFileFactory.fromFileContent(i18nFormat, xmlContent.content, path, xmlContent.encoding, optionalMaster);\r\n    }\r\n\r\n    /**\r\n     * Read file function, result depends on format, either XliffFile or XmbFile.\r\n     * @param path path\r\n     * @param encoding encoding\r\n     * @param optionalMasterFilePath optionalMasterFilePath\r\n     * @return XliffFile\r\n     */\r\n    public static fromUnknownFormatFile(path: string,\r\n                                        encoding: string,\r\n                                        optionalMasterFilePath?: string): ITranslationMessagesFile {\r\n        const xmlContent = XmlReader.readXmlFileContent(path, encoding);\r\n        const optionalMaster = TranslationMessagesFileReader.masterFileContent(optionalMasterFilePath, encoding);\r\n        return TranslationMessagesFileFactory.fromUnknownFormatFileContent(xmlContent.content, path, xmlContent.encoding, optionalMaster);\r\n    }\r\n\r\n    /**\r\n     * Read master xmb file\r\n     * @param optionalMasterFilePath optionalMasterFilePath\r\n     * @param encoding encoding\r\n     * @return content and encoding of file\r\n     */\r\n    private static masterFileContent(optionalMasterFilePath: string, encoding: string)\r\n        : {xmlContent: string, path: string, encoding: string} {\r\n        if (optionalMasterFilePath) {\r\n            const masterXmlContent = XmlReader.readXmlFileContent(optionalMasterFilePath, encoding);\r\n            return {\r\n                xmlContent: masterXmlContent.content,\r\n                path: optionalMasterFilePath,\r\n                encoding: masterXmlContent.encoding\r\n            };\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Save edited file.\r\n     * @param messagesFile messagesFile\r\n     * @param beautifyOutput Flag whether to use pretty-data to format the output.\r\n     * XMLSerializer produces some correct but strangely formatted output, which pretty-data can correct.\r\n     * See issue #64 for details.\r\n     * Default is false.\r\n     */\r\n    public static save(messagesFile: ITranslationMessagesFile, beautifyOutput?: boolean) {\r\n        FileUtil.replaceContent(messagesFile.filename(), messagesFile.editedContent(beautifyOutput), messagesFile.encoding());\r\n    }\r\n}\r\n\r\n","import {format} from 'util';\r\nimport * as request from 'request';\r\nimport {Observable} from 'rxjs';\r\nimport {of, forkJoin, throwError} from 'rxjs';\r\nimport {map} from 'rxjs/operators';\r\n\r\n/**\r\n * Created by roobm on 03.07.2017.\r\n * Low Level Service to call Google Translate.\r\n */\r\n\r\n/**\r\n * Types form google translate api.\r\n */\r\n\r\ninterface GetSupportedLanguagesRequest {\r\n    target: string; // The language to use to return localized, human readable names of supported\\nlanguages.\r\n}\r\n\r\ninterface LanguagesResource {\r\n    language: string; // code of the language\r\n    name: string; // human readable name (in target language)\r\n}\r\n\r\ninterface LanguagesListResponse {\r\n    languages: LanguagesResource[];\r\n}\r\n\r\ninterface TranslateTextRequest {\r\n    q: string[];  // The input texts to translate\r\n    target: string; // The language to use for translation of the input text\r\n    source: string; // The language of the source text\r\n    format?: string; // \"html\" (default) or \"text\"\r\n    model?: string; // see public documentation\r\n}\r\n\r\ninterface TranslationsResource {\r\n    detectedSourceLanguage?: string;\r\n    model?: string;\r\n    translatedText: string;\r\n}\r\n\r\ninterface TranslationsListResponse {\r\n    translations: TranslationsResource[];\r\n}\r\n\r\ninterface InternalRequestResponse {\r\n    response: request.RequestResponse;\r\n    body: any;\r\n}\r\n\r\nconst MAX_SEGMENTS = 128;\r\n\r\nexport class AutoTranslateService {\r\n\r\n    private _request: request.RequestAPI<request.Request, request.CoreOptions, request.RequiredUriUrl>;\r\n    _rootUrl: string;\r\n    _apiKey: string;\r\n\r\n    /**\r\n     * Strip region code and convert to lower\r\n     * @param lang lang\r\n     * @return lang without region code and in lower case.\r\n     */\r\n    public static stripRegioncode(lang: string): string {\r\n        const langLower = lang.toLowerCase();\r\n        for (let i = 0; i < langLower.length; i++) {\r\n            const c = langLower.charAt(i);\r\n            if (c < 'a' || c > 'z') {\r\n                return langLower.substring(0, i);\r\n            }\r\n        }\r\n        return langLower;\r\n    }\r\n\r\n    constructor(apiKey: string) {\r\n        this._request = request;\r\n        this._apiKey = apiKey;\r\n        this._rootUrl = 'https://translation.googleapis.com/';\r\n    }\r\n\r\n    /**\r\n     * Change API key (just for tests).\r\n     * @param apikey apikey\r\n     */\r\n    public setApiKey(apikey: string) {\r\n        this._apiKey = apikey;\r\n    }\r\n\r\n    /**\r\n     * Translate an array of messages at once.\r\n     * @param messages the messages to be translated\r\n     * @param from source language code\r\n     * @param to target language code\r\n     * @return Observable with translated messages or error\r\n     */\r\n    public translateMultipleStrings(messages: string[], from: string, to: string): Observable<string[]> {\r\n        // empty array needs no translation and always works ... (#78)\r\n        if (messages.length === 0) {\r\n            return of([]);\r\n        }\r\n        if (!this._apiKey) {\r\n            return throwError('cannot autotranslate: no api key');\r\n        }\r\n        if (!from || !to) {\r\n            return throwError('cannot autotranslate: source and target language must be set');\r\n        }\r\n        from = AutoTranslateService.stripRegioncode(from);\r\n        to = AutoTranslateService.stripRegioncode(to);\r\n        const allRequests: Observable<string[]>[] = this.splitMessagesToGoogleLimit(messages).map((partialMessages: string[]) => {\r\n            return this.limitedTranslateMultipleStrings(partialMessages, from, to);\r\n        });\r\n        return forkJoin(allRequests).pipe(\r\n            map((allTranslations: string[][]) => {\r\n                let all = [];\r\n                for (let i = 0; i < allTranslations.length; i++) {\r\n                    all = all.concat(allTranslations[i]);\r\n                }\r\n                return all;\r\n        }));\r\n    }\r\n\r\n    private splitMessagesToGoogleLimit(messages: string[]): string[][] {\r\n        if (messages.length <= MAX_SEGMENTS) {\r\n            return [messages];\r\n        }\r\n        const result = [];\r\n        let currentPackage = [];\r\n        let packageSize = 0;\r\n        for (let i = 0; i < messages.length; i++) {\r\n            currentPackage.push(messages[i]);\r\n            packageSize++;\r\n            if (packageSize >= MAX_SEGMENTS) {\r\n                result.push(currentPackage);\r\n                currentPackage = [];\r\n                packageSize = 0;\r\n            }\r\n        }\r\n        if (currentPackage.length > 0) {\r\n            result.push(currentPackage);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Return translation request, but messages must be limited to google limits.\r\n     * Not more that 128 single messages.\r\n     * @param messages messages\r\n     * @param from from\r\n     * @param to to\r\n     * @return the translated strings\r\n     */\r\n    private limitedTranslateMultipleStrings(messages: string[], from: string, to: string): Observable<string[]> {\r\n        const realUrl = this._rootUrl + 'language/translate/v2' + '?key=' + this._apiKey;\r\n        const translateRequest: TranslateTextRequest = {\r\n            q: messages,\r\n            target: to,\r\n            source: from,\r\n        };\r\n        const options = {\r\n            url: realUrl,\r\n            body: translateRequest,\r\n            json: true,\r\n//            proxy: 'http://127.0.0.1:8888' To set a proxy use env var HTTPS_PROXY\r\n        };\r\n        return this.post(realUrl, options).pipe(\r\n            map((data) => {\r\n            const body: any = data.body;\r\n            if (!body) {\r\n                throw new Error('no result received');\r\n            }\r\n            if (body.error) {\r\n                if (body.error.code === 400) {\r\n                    if (body.error.message === 'Invalid Value') {\r\n                        throw new Error(format('Translation from \"%s\" to \"%s\" not supported', from, to));\r\n                    }\r\n                    throw new Error(format('Invalid request: %s', body.error.message));\r\n                } else {\r\n                    throw new Error(format('Error %s: %s', body.error.code, body.error.message));\r\n                }\r\n            }\r\n            const result = body.data;\r\n            return result.translations.map((translation: TranslationsResource) => {\r\n                return translation.translatedText;\r\n            });\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Function to do a POST HTTP request\r\n     *\r\n     * @param uri uri\r\n     * @param options options\r\n     *\r\n     * @return response\r\n     */\r\n    post(uri: string, options?: request.CoreOptions): Observable<InternalRequestResponse> {\r\n        return <Observable<InternalRequestResponse>> this._call.apply(this, [].concat('post', <string> uri,\r\n            <request.CoreOptions> Object.assign({}, options || {})));\r\n    }\r\n\r\n    /**\r\n     * Function to do a HTTP request for given method\r\n     *\r\n     * @param method method\r\n     * @param uri uri\r\n     * @param options options\r\n     *\r\n     * @return response\r\n     *\r\n     */\r\n    private _call(method: string, uri: string, options?: request.CoreOptions): Observable<InternalRequestResponse> {\r\n        return <Observable<InternalRequestResponse>> Observable.create((observer) => {\r\n            // build params array\r\n            const params = [].concat(<string> uri, <request.CoreOptions> Object.assign({}, options || {}),\r\n                <RequestCallback>(error: any, response: request.RequestResponse, body: any) => {\r\n                    if (error) {\r\n                        return observer.error(error);\r\n                    }\r\n\r\n                    observer.next(<InternalRequestResponse> Object.assign({}, {\r\n                        response: <request.RequestResponse> response,\r\n                        body: <any> body\r\n                    }));\r\n                    observer.complete();\r\n                });\r\n\r\n            // _call request method\r\n            try {\r\n                this._request[<string> method].apply(\r\n                    <request.RequestAPI<request.Request,\r\n                    request.CoreOptions,\r\n                    request.RequiredUriUrl>> this._request,\r\n                    params);\r\n            } catch (error) {\r\n                observer.error(error);\r\n            }\r\n        });\r\n    }\r\n}\r\n","/**\r\n * Created by martin on 29.06.2017.\r\n */\r\n\r\nexport class AutoTranslateResult {\r\n\r\n  constructor(private _success: boolean, private _details: string) {\r\n\r\n  }\r\n\r\n  public success(): boolean {\r\n    return this._success;\r\n  }\r\n}\r\n","import {AutoTranslateResult} from './auto-translate-result';\r\nimport {format} from 'util';\r\nimport {ITransUnit} from '@ngx-i18nsupport/ngx-i18nsupport-lib';\r\n\r\n/**\r\n * A report about a run of Google Translate over all untranslated unit.\r\n * * Created by martin on 29.06.2017.\r\n */\r\n\r\nexport class AutoTranslateSummaryReport {\r\n\r\n  private _error: string;\r\n  private _from: string;\r\n  private _to: string;\r\n  private _total: number;\r\n  private _ignored: number;\r\n  private _success: number;\r\n  private _failed: number;\r\n\r\n  constructor(from: string, to: string) {\r\n    this._from = from;\r\n    this._to = to;\r\n    this._total = 0;\r\n    this._ignored = 0;\r\n    this._success = 0;\r\n    this._failed = 0;\r\n  }\r\n\r\n  /**\r\n   * Set error if total call failed (e.g. \"invalid api key\" or \"no connection\" ...)\r\n   * @param error error\r\n   * @param total total\r\n   */\r\n  public setError(error: string, total: number) {\r\n    this._error = error;\r\n    this._total = total;\r\n    this._failed = total;\r\n  }\r\n\r\n  public error(): string {\r\n    return this._error;\r\n  }\r\n\r\n  public setIgnored(ignored: number) {\r\n    this._total += ignored;\r\n    this._ignored = ignored;\r\n  }\r\n\r\n  /**\r\n   * Add a single result to the summary.\r\n   * @param tu tu\r\n   * @param result result\r\n   */\r\n  public addSingleResult(tu: ITransUnit, result: AutoTranslateResult) {\r\n    this._total++;\r\n    if (result.success()) {\r\n      this._success++;\r\n    } else {\r\n      this._failed++;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Merge another summary into this one.\r\n   * @param anotherSummary anotherSummary\r\n   */\r\n  public merge(anotherSummary: AutoTranslateSummaryReport) {\r\n    if (!this._error) {\r\n      this._error = anotherSummary._error;\r\n    }\r\n    this._total += anotherSummary.total();\r\n    this._ignored += anotherSummary.ignored();\r\n    this._success += anotherSummary.success();\r\n    this._failed += anotherSummary.failed();\r\n  }\r\n\r\n  public total(): number {\r\n    return this._total;\r\n  }\r\n\r\n  public ignored(): number {\r\n    return this._ignored;\r\n  }\r\n\r\n  public success(): number {\r\n    return this._success;\r\n  }\r\n\r\n  public failed(): number {\r\n    return this._failed;\r\n  }\r\n\r\n  /**\r\n   * Human readable version of report\r\n   */\r\n  public content(): string {\r\n    let result;\r\n    if (this._error) {\r\n      result = format('Auto translation from \"%s\" to \"%s\" failed: \"%s\", failed units: %s', this._from, this._to, this._error, this._failed);\r\n    } else {\r\n      result = format('Auto translation from \"%s\" to \"%s\", total auto translated units: %s, ignored: %s, succesful: %s, failed: %s',\r\n          this._from, this._to, this._total, this._ignored, this._success, this._failed);\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import {isNullOrUndefined} from '../common/util';\r\nimport {Observable, forkJoin, of} from 'rxjs';\r\nimport {map, catchError} from 'rxjs/operators';\r\nimport * as entityDecoderLib from 'he';\r\nimport {\r\n    IICUMessage, IICUMessageTranslation, INormalizedMessage, ITranslationMessagesFile, ITransUnit,\r\n    STATE_NEW\r\n} from '@ngx-i18nsupport/ngx-i18nsupport-lib';\r\nimport {AutoTranslateService} from './auto-translate-service';\r\nimport {AutoTranslateResult} from './auto-translate-result';\r\nimport {AutoTranslateSummaryReport} from './auto-translate-summary-report';\r\n/**\r\n * Created by martin on 07.07.2017.\r\n * Service to autotranslate Transunits via Google Translate.\r\n */\r\n\r\nexport class XliffMergeAutoTranslateService {\r\n\r\n    private autoTranslateService: AutoTranslateService;\r\n\r\n    constructor(apikey: string) {\r\n        this.autoTranslateService = new AutoTranslateService(apikey);\r\n    }\r\n\r\n    /**\r\n     * Auto translate file via Google Translate.\r\n     * Will translate all new units in file.\r\n     * @param from from\r\n     * @param to to\r\n     * @param languageSpecificMessagesFile languageSpecificMessagesFile\r\n     * @return a promise with the execution result as a summary report.\r\n     */\r\n    public autoTranslate(from: string, to: string, languageSpecificMessagesFile: ITranslationMessagesFile)\r\n        : Observable<AutoTranslateSummaryReport> {\r\n        return forkJoin([\r\n            this.doAutoTranslateNonICUMessages(from, to, languageSpecificMessagesFile),\r\n            ...this.doAutoTranslateICUMessages(from, to, languageSpecificMessagesFile)])\r\n            .pipe(\r\n                map((summaries: AutoTranslateSummaryReport[]) => {\r\n                    const summary = summaries[0];\r\n                    for (let i = 1; i < summaries.length; i++) {\r\n                        summary.merge(summaries[i]);\r\n                    }\r\n                    return summary;\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Collect all units that are untranslated.\r\n     * @param languageSpecificMessagesFile languageSpecificMessagesFile\r\n     * @return all untranslated units\r\n     */\r\n    private allUntranslatedTUs(languageSpecificMessagesFile: ITranslationMessagesFile): ITransUnit[] {\r\n        // collect all units, that should be auto translated\r\n        const allUntranslated: ITransUnit[] = [];\r\n        languageSpecificMessagesFile.forEachTransUnit((tu) => {\r\n            if (tu.targetState() === STATE_NEW) {\r\n                allUntranslated.push(tu);\r\n            }\r\n        });\r\n        return allUntranslated;\r\n    }\r\n\r\n    private doAutoTranslateNonICUMessages(from: string, to: string, languageSpecificMessagesFile: ITranslationMessagesFile)\r\n        : Observable<AutoTranslateSummaryReport> {\r\n        const allUntranslated: ITransUnit[] = this.allUntranslatedTUs(languageSpecificMessagesFile);\r\n        const allTranslatable = allUntranslated.filter((tu) => isNullOrUndefined(tu.sourceContentNormalized().getICUMessage()));\r\n        const allMessages: string[] = allTranslatable.map((tu) => {\r\n            return tu.sourceContentNormalized().asDisplayString();\r\n        });\r\n        return this.autoTranslateService.translateMultipleStrings(allMessages, from, to)\r\n            .pipe(\r\n                // #94 google translate might return &#.. entity refs, that must be decoded\r\n                map((translations: string[]) => translations.map(encodedTranslation => entityDecoderLib.decode(encodedTranslation))),\r\n                map((translations: string[]) => {\r\n                const summary = new AutoTranslateSummaryReport(from, to);\r\n                summary.setIgnored(allUntranslated.length - allTranslatable.length);\r\n                for (let i = 0; i < translations.length; i++) {\r\n                    const tu = allTranslatable[i];\r\n                    const translationText = translations[i];\r\n                    const result = this.autoTranslateNonICUUnit(tu, translationText);\r\n                    summary.addSingleResult(tu, result);\r\n                }\r\n                return summary;\r\n                }),\r\n                catchError((err) => {\r\n                    const failSummary = new AutoTranslateSummaryReport(from, to);\r\n                    failSummary.setError(err.message, allMessages.length);\r\n                    return of(failSummary);\r\n            }));\r\n    }\r\n\r\n    private doAutoTranslateICUMessages(from: string, to: string, languageSpecificMessagesFile: ITranslationMessagesFile)\r\n        : Observable<AutoTranslateSummaryReport>[] {\r\n        const allUntranslated: ITransUnit[] = this.allUntranslatedTUs(languageSpecificMessagesFile);\r\n        const allTranslatableICU = allUntranslated.filter((tu) => !isNullOrUndefined(tu.sourceContentNormalized().getICUMessage()));\r\n        return allTranslatableICU.map((tu) => {\r\n            return this.doAutoTranslateICUMessage(from, to, tu);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Translate single ICU Messages.\r\n     * @param from from\r\n     * @param to to\r\n     * @param tu transunit to translate (must contain ICU Message)\r\n     * @return summary report\r\n     */\r\n    private doAutoTranslateICUMessage(from: string, to: string, tu: ITransUnit): Observable<AutoTranslateSummaryReport> {\r\n        const icuMessage: IICUMessage = tu.sourceContentNormalized().getICUMessage();\r\n        const categories = icuMessage.getCategories();\r\n        // check for nested ICUs, we do not support that\r\n        if (categories.find((category) => !isNullOrUndefined(category.getMessageNormalized().getICUMessage()))) {\r\n            const summary = new AutoTranslateSummaryReport(from, to);\r\n            summary.setIgnored(1);\r\n            return of(summary);\r\n        }\r\n        const allMessages: string[] = categories.map((category) => category.getMessageNormalized().asDisplayString());\r\n        return this.autoTranslateService.translateMultipleStrings(allMessages, from, to)\r\n            .pipe(\r\n                // #94 google translate might return &#.. entity refs, that must be decoded\r\n                map((translations: string[]) => translations.map(encodedTranslation => entityDecoderLib.decode(encodedTranslation))),\r\n                map((translations: string[]) => {\r\n                    const summary = new AutoTranslateSummaryReport(from, to);\r\n                    const icuTranslation: IICUMessageTranslation = {};\r\n                    for (let i = 0; i < translations.length; i++) {\r\n                        icuTranslation[categories[i].getCategory()] = translations[i];\r\n                    }\r\n                    const result = this.autoTranslateICUUnit(tu, icuTranslation);\r\n                    summary.addSingleResult(tu, result);\r\n                    return summary;\r\n                }), catchError((err) => {\r\n                    const failSummary = new AutoTranslateSummaryReport(from, to);\r\n                    failSummary.setError(err.message, allMessages.length);\r\n                    return of(failSummary);\r\n            }));\r\n    }\r\n\r\n    private autoTranslateNonICUUnit(tu: ITransUnit, translatedMessage: string): AutoTranslateResult {\r\n        return this.autoTranslateUnit(tu, tu.sourceContentNormalized().translate(translatedMessage));\r\n    }\r\n\r\n    private autoTranslateICUUnit(tu: ITransUnit, translation: IICUMessageTranslation): AutoTranslateResult {\r\n        return this.autoTranslateUnit(tu, tu.sourceContentNormalized().translateICUMessage(translation));\r\n    }\r\n\r\n    private autoTranslateUnit(tu: ITransUnit, translatedMessage: INormalizedMessage): AutoTranslateResult {\r\n        const errors = translatedMessage.validate();\r\n        const warnings = translatedMessage.validateWarnings();\r\n        if (!isNullOrUndefined(errors)) {\r\n            return new AutoTranslateResult(false, 'errors detected, not translated');\r\n        } else if (!isNullOrUndefined(warnings)) {\r\n            return new AutoTranslateResult(false, 'warnings detected, not translated');\r\n        } else {\r\n            tu.translate(translatedMessage);\r\n            return new AutoTranslateResult(true, null); // success\r\n        }\r\n    }\r\n}\r\n","import {CommandOutput} from '../common/command-output';\r\nimport {XliffMergeParameters} from './xliff-merge-parameters';\r\nimport {XliffMergeError} from './xliff-merge-error';\r\nimport {FileUtil} from '../common/file-util';\r\nimport {VERSION} from './version';\r\nimport {format} from 'util';\r\nimport {isNullOrUndefined} from '../common/util';\r\nimport {ITranslationMessagesFile, ITransUnit,\r\n    FORMAT_XMB, FORMAT_XTB,\r\n    NORMALIZATION_FORMAT_DEFAULT, STATE_FINAL, STATE_TRANSLATED} from '@ngx-i18nsupport/ngx-i18nsupport-lib';\r\nimport {ProgramOptions, IConfigFile} from './i-xliff-merge-options';\r\nimport {NgxTranslateExtractor} from './ngx-translate-extractor';\r\nimport {TranslationMessagesFileReader} from './translation-messages-file-reader';\r\nimport {Observable, of, forkJoin} from 'rxjs';\r\nimport {map, catchError} from 'rxjs/operators';\r\nimport {XliffMergeAutoTranslateService} from '../autotranslate/xliff-merge-auto-translate-service';\r\nimport {AutoTranslateSummaryReport} from '../autotranslate/auto-translate-summary-report';\r\n\r\n/**\r\n * Created by martin on 17.02.2017.\r\n * XliffMerge - read xliff or xmb file and put untranslated parts in language specific xliff or xmb files.\r\n *\r\n */\r\n\r\nexport class XliffMerge {\r\n\r\n    private commandOutput: CommandOutput;\r\n\r\n    private options: ProgramOptions;\r\n\r\n    private parameters: XliffMergeParameters;\r\n\r\n    /**\r\n     * The read master xlf file.\r\n     */\r\n    private master: ITranslationMessagesFile; // XliffFile or Xliff2File or XmbFile\r\n\r\n    private autoTranslateService: XliffMergeAutoTranslateService;\r\n\r\n    static main(argv: string[]) {\r\n        const options = XliffMerge.parseArgs(argv);\r\n        if (options) {\r\n            new XliffMerge(new CommandOutput(process.stdout), options).run((result) => {\r\n                process.exit(result);\r\n            });\r\n        }\r\n    }\r\n\r\n    static parseArgs(argv: string[]): ProgramOptions {\r\n        const options: ProgramOptions = {\r\n            languages: []\r\n        };\r\n        for (let i = 1; i < argv.length; i++) {\r\n            const arg = argv[i];\r\n            if (arg === '--version' || arg === '-version') {\r\n                console.log('xliffmerge ' + VERSION);\r\n            } else if (arg === '--verbose' || arg === '-v') {\r\n                options.verbose = true;\r\n            } else if (arg === '--profile' || arg === '-p') {\r\n                i++;\r\n                if (i >= argv.length) {\r\n                    console.log('missing config file');\r\n                    XliffMerge.showUsage();\r\n                    return null;\r\n                } else {\r\n                    options.profilePath = argv[i];\r\n                }\r\n            } else if (arg === '--quiet' || arg === '-q') {\r\n                options.quiet = true;\r\n            } else if (arg === '--help' || arg === '-help' || arg === '-h') {\r\n                XliffMerge.showUsage();\r\n            } else if (arg.length > 0 && arg.charAt(0) === '-') {\r\n                console.log('unknown option');\r\n                return null;\r\n            } else {\r\n                options.languages.push(arg);\r\n            }\r\n        }\r\n        return options;\r\n    }\r\n\r\n    static showUsage() {\r\n        console.log('usage: xliffmerge <option>* <language>*');\r\n        console.log('Options');\r\n        console.log('\\t-p|--profile a json configuration file containing all relevant parameters.');\r\n        console.log('\\t\\tfor details please consult the home page https://github.com/martinroob/ngx-i18nsupport');\r\n        console.log('\\t-v|--verbose show some output for debugging purposes');\r\n        console.log('\\t-q|--quiet only show errors, nothing else');\r\n        console.log('\\t-version|--version show version string');\r\n        console.log('');\r\n        console.log('\\t<language> has to be a valid language short string, e,g. \"en\", \"de\", \"de-ch\"');\r\n    }\r\n\r\n    /**\r\n     * For Tests, create instance with given profile\r\n     * @param commandOutput commandOutput\r\n     * @param options options\r\n     * @param profileContent profileContent\r\n     */\r\n    public static createFromOptions(commandOutput: CommandOutput, options: ProgramOptions, profileContent?: IConfigFile) {\r\n        const instance = new XliffMerge(commandOutput, options);\r\n        instance.parameters = XliffMergeParameters.createFromOptions(options, profileContent);\r\n        return instance;\r\n    }\r\n\r\n    constructor(commandOutput: CommandOutput, options: ProgramOptions) {\r\n        this.commandOutput = commandOutput;\r\n        this.options = options;\r\n        this.parameters = null;\r\n    }\r\n\r\n    /**\r\n     * Run the command.\r\n     * This runs async.\r\n     * @param callbackFunction when command is executed, called with the return code (0 for ok), if given.\r\n     * @param errorFunction callbackFunction for error handling\r\n     */\r\n    public run(callbackFunction?: ((retcode: number) => any), errorFunction?: ((error: any) => any)) {\r\n        this.runAsync()\r\n            .subscribe((retcode: number) => {\r\n                if (!isNullOrUndefined(callbackFunction)) {\r\n                    callbackFunction(retcode);\r\n                }\r\n            }, (error) => {\r\n                if (!isNullOrUndefined(errorFunction)) {\r\n                    errorFunction(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Execute merge-Process.\r\n     * @return Async operation, on completion returns retcode 0=ok, other = error.\r\n     */\r\n    public runAsync(): Observable<number> {\r\n        if (this.options && this.options.quiet) {\r\n            this.commandOutput.setQuiet();\r\n        }\r\n        if (this.options && this.options.verbose) {\r\n            this.commandOutput.setVerbose();\r\n        }\r\n        if (!this.parameters) {\r\n            this.parameters = XliffMergeParameters.createFromOptions(this.options);\r\n        }\r\n        this.commandOutput.info('xliffmerge version %s', VERSION);\r\n        if (this.parameters.verbose()) {\r\n            this.parameters.showAllParameters(this.commandOutput);\r\n        }\r\n        if (this.parameters.errorsFound.length > 0) {\r\n            for (const err of this.parameters.errorsFound) {\r\n                this.commandOutput.error(err.message);\r\n            }\r\n            return of(-1);\r\n        }\r\n        if (this.parameters.warningsFound.length > 0) {\r\n            for (const warn of this.parameters.warningsFound) {\r\n                this.commandOutput.warn(warn);\r\n            }\r\n        }\r\n        this.readMaster();\r\n        if (this.parameters.autotranslate()) {\r\n            this.autoTranslateService = new XliffMergeAutoTranslateService(this.parameters.apikey());\r\n        }\r\n        const executionForAllLanguages: Observable<number>[] = [];\r\n        this.parameters.languages().forEach((lang: string) => {\r\n            executionForAllLanguages.push(this.processLanguage(lang));\r\n        });\r\n        return forkJoin(executionForAllLanguages).pipe(\r\n            map((retcodes: number[]) => this.totalRetcode(retcodes)));\r\n    }\r\n\r\n    /**\r\n     * Give an array of retcodes for the different languages, return the total retcode.\r\n     * If all are 0, it is 0, otherwise the first non zero.\r\n     * @param retcodes retcodes\r\n     * @return number\r\n     */\r\n    private totalRetcode(retcodes: number[]): number {\r\n        for (let i = 0; i < retcodes.length; i++) {\r\n            if (retcodes[i] !== 0) {\r\n                return retcodes[i];\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Return the name of the generated file for given lang.\r\n     * @param lang language\r\n     * @return name of generated file\r\n     */\r\n    public generatedI18nFile(lang: string): string {\r\n        return this.parameters.generatedI18nFile(lang);\r\n    }\r\n\r\n    /**\r\n     * Return the name of the generated ngx-translation file for given lang.\r\n     * @param lang language\r\n     * @return name of translate file\r\n     */\r\n    public generatedNgxTranslateFile(lang: string): string {\r\n        return this.parameters.generatedNgxTranslateFile(lang);\r\n    }\r\n\r\n    /**\r\n     * Warnings found during the run.\r\n     * @return warnings\r\n     */\r\n    public warnings(): string[] {\r\n        return this.parameters.warningsFound;\r\n    }\r\n\r\n    private readMaster() {\r\n        try {\r\n            this.master = TranslationMessagesFileReader.fromFile(\r\n                this.parameters.i18nFormat(),\r\n                this.parameters.i18nFile(),\r\n                this.parameters.encoding());\r\n            this.master.warnings().forEach((warning: string) => {\r\n                this.commandOutput.warn(warning);\r\n            });\r\n            const count = this.master.numberOfTransUnits();\r\n            const missingIdCount = this.master.numberOfTransUnitsWithMissingId();\r\n            this.commandOutput.info('master contains %s trans-units', count);\r\n            if (missingIdCount > 0) {\r\n                this.commandOutput.warn('master contains %s trans-units, but there are %s without id', count, missingIdCount);\r\n            }\r\n            const sourceLang: string = this.master.sourceLanguage();\r\n            if (sourceLang && sourceLang !== this.parameters.defaultLanguage()) {\r\n                this.commandOutput.warn(\r\n                    'master says to have source-language=\"%s\", should be \"%s\" (your defaultLanguage)',\r\n                    sourceLang,\r\n                    this.parameters.defaultLanguage());\r\n                this.master.setSourceLanguage(this.parameters.defaultLanguage());\r\n                TranslationMessagesFileReader.save(this.master, this.parameters.beautifyOutput());\r\n                this.commandOutput.warn('changed master source-language=\"%s\" to \"%s\"', sourceLang, this.parameters.defaultLanguage());\r\n            }\r\n        } catch (err) {\r\n            if (err instanceof XliffMergeError) {\r\n                this.commandOutput.error(err.message);\r\n                return of(-1);\r\n            } else {\r\n                // unhandled\r\n                const currentFilename = this.parameters.i18nFile();\r\n                const filenameString = (currentFilename) ? format('file \"%s\", ', currentFilename) : '';\r\n                this.commandOutput.error(filenameString + 'oops ' + err);\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Process the given language.\r\n     * Async operation.\r\n     * @param lang language\r\n     * @return on completion 0 for ok, other for error\r\n     */\r\n    private processLanguage(lang: string): Observable<number> {\r\n        this.commandOutput.debug('processing language %s', lang);\r\n        const languageXliffFile = this.parameters.generatedI18nFile(lang);\r\n        const currentFilename = languageXliffFile;\r\n        let result: Observable<void>;\r\n        if (!FileUtil.exists(languageXliffFile)) {\r\n            result = this.createUntranslatedXliff(lang, languageXliffFile);\r\n        } else {\r\n            result = this.mergeMasterTo(lang, languageXliffFile);\r\n        }\r\n        return result\r\n            .pipe(map(() => {\r\n                if (this.parameters.supportNgxTranslate()) {\r\n                    const languageSpecificMessagesFile: ITranslationMessagesFile =\r\n                        TranslationMessagesFileReader.fromFile(\r\n                            this.translationFormat(this.parameters.i18nFormat()),\r\n                            languageXliffFile,\r\n                            this.parameters.encoding(),\r\n                            this.master.filename());\r\n                    NgxTranslateExtractor.extract(\r\n                        languageSpecificMessagesFile,\r\n                        this.parameters.ngxTranslateExtractionPattern(),\r\n                        this.parameters.generatedNgxTranslateFile(lang));\r\n                }\r\n                return 0;\r\n            }), catchError((err) => {\r\n                if (err instanceof XliffMergeError) {\r\n                    this.commandOutput.error(err.message);\r\n                    return of(-1);\r\n                } else {\r\n                    // unhandled\r\n                    const filenameString = (currentFilename) ? format('file \"%s\", ', currentFilename) : '';\r\n                    this.commandOutput.error(filenameString + 'oops ' + err);\r\n                    throw err;\r\n                }\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * create a new file for the language, which contains no translations, but all keys.\r\n     * in principle, this is just a copy of the master with target-language set.\r\n     * @param lang language\r\n     * @param languageXliffFilePath name of file\r\n     */\r\n    private createUntranslatedXliff(lang: string, languageXliffFilePath: string): Observable<void> {\r\n        // copy master ...\r\n        // and set target-language\r\n        // and copy source to target if necessary\r\n        const isDefaultLang: boolean = (lang === this.parameters.defaultLanguage());\r\n        this.master.setNewTransUnitTargetPraefix(this.parameters.targetPraefix());\r\n        this.master.setNewTransUnitTargetSuffix(this.parameters.targetSuffix());\r\n        const languageSpecificMessagesFile: ITranslationMessagesFile =\r\n            this.master.createTranslationFileForLang(lang, languageXliffFilePath, isDefaultLang, this.parameters.useSourceAsTarget());\r\n        return this.autoTranslate(this.master.sourceLanguage(), lang, languageSpecificMessagesFile).pipe(\r\n            map((summary) => {\r\n            // write it to file\r\n            TranslationMessagesFileReader.save(languageSpecificMessagesFile, this.parameters.beautifyOutput());\r\n            this.commandOutput.info('created new file \"%s\" for target-language=\"%s\"', languageXliffFilePath, lang);\r\n            if (!isDefaultLang) {\r\n                this.commandOutput.warn('please translate file \"%s\" to target-language=\"%s\"', languageXliffFilePath, lang);\r\n            }\r\n            return null;\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Map the input format to the format of the translation.\r\n     * Normally they are the same but for xmb the translation format is xtb.\r\n     * @param i18nFormat format\r\n     */\r\n    private translationFormat(i18nFormat: string): string {\r\n        if (i18nFormat === FORMAT_XMB) {\r\n            return FORMAT_XTB;\r\n        } else {\r\n            return i18nFormat;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge all\r\n     * @param lang language\r\n     * @param languageXliffFilePath filename\r\n     */\r\n    private mergeMasterTo(lang: string, languageXliffFilePath: string): Observable<void> {\r\n        // read lang specific file\r\n        const languageSpecificMessagesFile: ITranslationMessagesFile =\r\n            TranslationMessagesFileReader.fromFile(\r\n                this.translationFormat(this.parameters.i18nFormat()),\r\n                languageXliffFilePath,\r\n                this.parameters.encoding());\r\n        const isDefaultLang: boolean = (lang === this.parameters.defaultLanguage());\r\n        let newCount = 0;\r\n        let correctSourceContentCount = 0;\r\n        let correctSourceRefCount = 0;\r\n        let correctDescriptionOrMeaningCount = 0;\r\n        let idChangedCount = 0;\r\n        languageSpecificMessagesFile.setNewTransUnitTargetPraefix(this.parameters.targetPraefix());\r\n        languageSpecificMessagesFile.setNewTransUnitTargetSuffix(this.parameters.targetSuffix());\r\n        let lastProcessedUnit: ITransUnit = null;\r\n        this.master.forEachTransUnit((masterTransUnit) => {\r\n            const transUnit: ITransUnit = languageSpecificMessagesFile.transUnitWithId(masterTransUnit.id);\r\n\r\n            if (!transUnit) {\r\n                // oops, no translation, must be a new key, so add it\r\n                let newUnit;\r\n                if (this.parameters.allowIdChange()\r\n                    && (newUnit = this.processChangedIdUnit(masterTransUnit, languageSpecificMessagesFile, lastProcessedUnit))) {\r\n                    lastProcessedUnit = newUnit;\r\n                    idChangedCount++;\r\n                } else {\r\n                    lastProcessedUnit = languageSpecificMessagesFile.importNewTransUnit(\r\n                        masterTransUnit,\r\n                        isDefaultLang,\r\n                        this.parameters.useSourceAsTarget(),\r\n                        (this.parameters.preserveOrder()) ? lastProcessedUnit : undefined);\r\n                    newCount++;\r\n                }\r\n            } else {\r\n                // check for changed source content and change it if needed\r\n                // (can only happen if ID is explicitely set, otherwise ID would change if source content is changed.\r\n                if (transUnit.supportsSetSourceContent() && masterTransUnit.sourceContent() !== transUnit.sourceContent()) {\r\n                    transUnit.setSourceContent(masterTransUnit.sourceContent());\r\n                    if (isDefaultLang) {\r\n                        // #81 changed source must be copied to target for default lang\r\n                        transUnit.translate(masterTransUnit.sourceContent());\r\n                        transUnit.setTargetState(STATE_FINAL);\r\n                    } else {\r\n                        if (transUnit.targetState() === STATE_FINAL) {\r\n                            // source is changed, so translation has to be checked again\r\n                            transUnit.setTargetState(STATE_TRANSLATED);\r\n                        }\r\n                    }\r\n                    correctSourceContentCount++;\r\n                }\r\n                // check for missing or changed source ref and add it if needed\r\n                if (transUnit.supportsSetSourceReferences()\r\n                    && !this.areSourceReferencesEqual(masterTransUnit.sourceReferences(), transUnit.sourceReferences())) {\r\n                    transUnit.setSourceReferences(masterTransUnit.sourceReferences());\r\n                    correctSourceRefCount++;\r\n                }\r\n                // check for changed description or meaning\r\n                if (transUnit.supportsSetDescriptionAndMeaning()) {\r\n                    let changed = false;\r\n                    if (transUnit.description() !== masterTransUnit.description()) {\r\n                        transUnit.setDescription(masterTransUnit.description());\r\n                        changed = true;\r\n                    }\r\n                    if (transUnit.meaning() !== masterTransUnit.meaning()) {\r\n                        transUnit.setMeaning(masterTransUnit.meaning());\r\n                        changed = true;\r\n                    }\r\n                    if (changed) {\r\n                        correctDescriptionOrMeaningCount++;\r\n                    }\r\n                }\r\n                lastProcessedUnit = transUnit;\r\n            }\r\n        });\r\n        if (newCount > 0) {\r\n            this.commandOutput.warn('merged %s trans-units from master to \"%s\"', newCount, lang);\r\n        }\r\n        if (correctSourceContentCount > 0) {\r\n            this.commandOutput.warn('transferred %s changed source content from master to \"%s\"', correctSourceContentCount, lang);\r\n        }\r\n        if (correctSourceRefCount > 0) {\r\n            this.commandOutput.warn('transferred %s source references from master to \"%s\"', correctSourceRefCount, lang);\r\n        }\r\n        if (idChangedCount > 0) {\r\n            this.commandOutput.warn('found %s changed id\\'s in \"%s\"', idChangedCount, lang);\r\n        }\r\n        if (correctDescriptionOrMeaningCount > 0) {\r\n            this.commandOutput.warn(\r\n                'transferred %s changed descriptions/meanings from master to \"%s\"', correctDescriptionOrMeaningCount, lang);\r\n        }\r\n\r\n        // remove all elements that are no longer used\r\n        let removeCount = 0;\r\n        languageSpecificMessagesFile.forEachTransUnit((transUnit: ITransUnit) => {\r\n            const existsInMaster = !isNullOrUndefined(this.master.transUnitWithId(transUnit.id));\r\n            if (!existsInMaster) {\r\n                if (this.parameters.removeUnusedIds()) {\r\n                    languageSpecificMessagesFile.removeTransUnitWithId(transUnit.id);\r\n                }\r\n                removeCount++;\r\n            }\r\n        });\r\n        if (removeCount > 0) {\r\n            if (this.parameters.removeUnusedIds()) {\r\n                this.commandOutput.warn('removed %s unused trans-units in \"%s\"', removeCount, lang);\r\n            } else {\r\n                this.commandOutput.warn('keeping %s unused trans-units in \"%s\", because removeUnused is disabled', removeCount, lang);\r\n            }\r\n        }\r\n\r\n        if (newCount === 0 && removeCount === 0 && correctSourceContentCount === 0\r\n            && correctSourceRefCount === 0 && correctDescriptionOrMeaningCount === 0) {\r\n            this.commandOutput.info('file for \"%s\" was up to date', lang);\r\n            return of(null);\r\n        } else {\r\n            return this.autoTranslate(this.master.sourceLanguage(), lang, languageSpecificMessagesFile)\r\n                .pipe(map(() => {\r\n                    // write it to file\r\n                    TranslationMessagesFileReader.save(languageSpecificMessagesFile, this.parameters.beautifyOutput());\r\n                    this.commandOutput.info('updated file \"%s\" for target-language=\"%s\"', languageXliffFilePath, lang);\r\n                    if (newCount > 0 && !isDefaultLang) {\r\n                        this.commandOutput.warn('please translate file \"%s\" to target-language=\"%s\"', languageXliffFilePath, lang);\r\n                    }\r\n                    return null;\r\n                }));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle the case of changed id due to small white space changes.\r\n     * @param masterTransUnit unit in master file\r\n     * @param languageSpecificMessagesFile translation file\r\n     * @param lastProcessedUnit Unit before the one processed here. New unit will be inserted after this one.\r\n     * @return processed unit, if done, null if no changed unit found\r\n     */\r\n    private processChangedIdUnit(\r\n        masterTransUnit: ITransUnit,\r\n        languageSpecificMessagesFile: ITranslationMessagesFile,\r\n        lastProcessedUnit: ITransUnit): ITransUnit {\r\n\r\n        const masterSourceString = masterTransUnit.sourceContentNormalized().asDisplayString(NORMALIZATION_FORMAT_DEFAULT).trim();\r\n        let changedTransUnit: ITransUnit = null;\r\n        languageSpecificMessagesFile.forEachTransUnit((languageTransUnit) => {\r\n             if (languageTransUnit.sourceContentNormalized().asDisplayString(NORMALIZATION_FORMAT_DEFAULT).trim() === masterSourceString) {\r\n                 changedTransUnit = languageTransUnit;\r\n             }\r\n        });\r\n        if (!changedTransUnit) {\r\n            return null;\r\n        }\r\n        const mergedTransUnit = languageSpecificMessagesFile.importNewTransUnit(\r\n            masterTransUnit,\r\n            false,\r\n            false,\r\n            (this.parameters.preserveOrder()) ? lastProcessedUnit : undefined);\r\n        const translatedContent = changedTransUnit.targetContent();\r\n        if (translatedContent) { // issue #68 set translated only, if it is really translated\r\n            mergedTransUnit.translate(translatedContent);\r\n            mergedTransUnit.setTargetState(STATE_TRANSLATED);\r\n        }\r\n        return mergedTransUnit;\r\n    }\r\n\r\n    private areSourceReferencesEqual(\r\n        ref1: {sourcefile: string; linenumber: number; }[],\r\n        ref2: {sourcefile: string; linenumber: number; }[]): boolean {\r\n\r\n        if ((isNullOrUndefined(ref1) && !isNullOrUndefined(ref2)) || (isNullOrUndefined(ref2) && !isNullOrUndefined(ref1))) {\r\n            return false;\r\n        }\r\n        if (isNullOrUndefined(ref1) && isNullOrUndefined(ref2)) {\r\n            return true;\r\n        }\r\n        // bot refs are set now, convert to set to compare them\r\n        const set1: Set<string> = new Set<string>();\r\n        ref1.forEach((ref) => {set1.add(ref.sourcefile + ':' + ref.linenumber); });\r\n        const set2: Set<string> = new Set<string>();\r\n        ref2.forEach((ref) => {set2.add(ref.sourcefile + ':' + ref.linenumber); });\r\n        if (set1.size !== set2.size) {\r\n            return false;\r\n        }\r\n        let match = true;\r\n        set2.forEach((ref) => {\r\n            if (!set1.has(ref)) {\r\n                match = false;\r\n            }\r\n        });\r\n        return match;\r\n    }\r\n\r\n    /**\r\n     * Auto translate file via Google Translate.\r\n     * Will translate all new units in file.\r\n     * @param from from\r\n     * @param to to\r\n     * @param languageSpecificMessagesFile languageSpecificMessagesFile\r\n     * @return a promise with the execution result as a summary report.\r\n     */\r\n    private autoTranslate(\r\n        from: string,\r\n        to: string,\r\n        languageSpecificMessagesFile: ITranslationMessagesFile): Observable<AutoTranslateSummaryReport> {\r\n\r\n        let serviceCall: Observable<AutoTranslateSummaryReport>;\r\n        const autotranslateEnabled: boolean = this.parameters.autotranslateLanguage(to);\r\n        if (autotranslateEnabled) {\r\n            serviceCall = this.autoTranslateService.autoTranslate(from, to, languageSpecificMessagesFile);\r\n        } else {\r\n            serviceCall = of(new AutoTranslateSummaryReport(from, to));\r\n        }\r\n        return serviceCall.pipe(map((summary) => {\r\n            if (autotranslateEnabled) {\r\n                if (summary.error() || summary.failed() > 0) {\r\n                    this.commandOutput.error(summary.content());\r\n                } else {\r\n                    this.commandOutput.warn(summary.content());\r\n                }\r\n            }\r\n            return summary;\r\n        }));\r\n    }\r\n\r\n}\r\n"],"names":["NgModule","tslib_1.__extends","Writable","format","fs.existsSync","fs.readFileSync","fs.writeFileSync","fs.openSync","fs.readSync","fs.writeSync","fs.closeSync","path","fs.readdirSync","fs.lstatSync","fs.unlinkSync","fs.rmdirSync","NORMALIZATION_FORMAT_NGXTRANSLATE","tslib_1.__values","isAbsolute","join","dirname","fs.statSync","fs.accessSync","fs.constants","path.resolve","TranslationMessagesFileFactory","of","throwError","forkJoin","map","Observable","STATE_NEW","entityDecoderLib.decode","catchError","FORMAT_XMB","FORMAT_XTB","STATE_FINAL","STATE_TRANSLATED","NORMALIZATION_FORMAT_DEFAULT"],"mappings":"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"}
